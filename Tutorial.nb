(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    874379,      18390]
NotebookOptionsPosition[    804926,      16177]
NotebookOutlinePosition[    822325,      16628]
CellTagsIndexPosition[    817705,      16520]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Neurotica Tutorial Notebook", "Title",
 CellChangeTimes->{{3.643557425324668*^9, 3.64355743585394*^9}}],

Cell["Author: Noah C. Benson <nben@nyu.edu>", "Subtitle",
 CellChangeTimes->{{3.6435574619204473`*^9, 3.643557479594146*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Chapter"],
 ". Introduction"
}], "Chapter",
 CellChangeTimes->{{3.64355751686607*^9, 3.643557527148156*^9}, {
  3.643557583129756*^9, 3.643557611095809*^9}, {3.64355764376658*^9, 
  3.643557658054234*^9}}],

Cell[CellGroupData[{

Cell["This Notebook\[CloseCurlyQuote]s Mission", "Subchapter",
 CellChangeTimes->{{3.643557613013329*^9, 3.6435576150221252`*^9}, {
  3.64355767925988*^9, 3.643557705742556*^9}, {3.643558119676399*^9, 
  3.643558122365286*^9}}],

Cell[TextData[{
 "This notebook is designed to be a demonstration of an introduction to the \
usage of the Neurotica neuroscience library for ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". It is intended for ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " users with a reasonable level of experience with the Wolfram Language. If \
you are new to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", it is the author\[CloseCurlyQuote]s suggestion that you begin by learning \
the basics of the language. A few links to relevant ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " tutorials are listed below."
}], "Text",
 CellChangeTimes->{{3.643557711221219*^9, 3.643557877890922*^9}},
 FontSize->16],

Cell[CellGroupData[{

Cell["\<\
Wolfram Language Tutorial for \
Programmers:\[LineSeparator]https://www.wolfram.com/language/fast-\
introduction-for-programmers/\
\>", "Item",
 CellChangeTimes->{{3.643557944223893*^9, 3.6435579551119537`*^9}},
 FontSize->16],

Cell["\<\
Wolfram\[CloseCurlyQuote]s \[OpenCurlyDoubleQuote]Getting Started\
\[CloseCurlyDoubleQuote] \
Guide:\[LineSeparator]https://reference.wolfram.com/language/tutorial/\
GettingStartedOverview.html\
\>", "Item",
 CellChangeTimes->{{3.643557996027964*^9, 3.643558004961792*^9}, {
  3.64355804999445*^9, 3.6435580499968023`*^9}},
 FontSize->16],

Cell["\<\
Wolfram\[CloseCurlyQuote]s Core Language \
Reference:\[LineSeparator]http://reference.wolfram.com/language/\
\>", "Item",
 CellChangeTimes->{{3.643557996027964*^9, 3.643558004961792*^9}, {
  3.64355804999445*^9, 3.6435580690420113`*^9}},
 FontSize->16]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["What is Neurotica?", "Subchapter",
 CellChangeTimes->{{3.64356327200663*^9, 3.6435632749990377`*^9}}],

Cell["\<\
Neurotica is a general purpose library for the analysis of Neuroscientific \
data. It has grown out of actual Neuroscience use cases encountered by the \
library\[CloseCurlyQuote]s author. As a result, it is largely incomplete and \
fixates on particular problems and areas. Neurotica is *not* an all-inclusive \
analysis suite (at least not yet), and, as of the writing of this tutorial \
notebook, is geared primarily toward the following application domains:\
\>", "Text",
 CellChangeTimes->{{3.6435632770464373`*^9, 3.6435632779917107`*^9}, {
  3.6435633178288193`*^9, 3.643563407873608*^9}, {3.6435634467319317`*^9, 
  3.643563448554137*^9}},
 FontSize->16],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Visual Cortex and Vision.",
  FontWeight->"Bold"],
 "\[LineSeparator]Neurotica\[CloseCurlyQuote]s author is a vision scientists \
who studies, among other things, the retinotopic organization of the visual \
cortex. Neurotica includes an entire namespace, Neurotica`VisualCortex` that \
includes tools specific to retinotopy and the visual field."
}], "Item",
 CellChangeTimes->{{3.643563451118621*^9, 3.6435635061447697`*^9}, {
  3.643563600958765*^9, 3.6435636423380613`*^9}, {3.643564585416007*^9, 
  3.643564588689893*^9}},
 FontSize->16],

Cell[TextData[{
 StyleBox["MRI Data.",
  FontWeight->"Bold"],
 "\[LineSeparator]Neurotica includes the Neurotica`MRImage` package, which is \
specifically designed to (a) import and represent MRI data in a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "-friendly way and (b) to extend ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s many 3D image-processing techniques to MR images. \
Neurotica\[CloseCurlyQuote]s MRImage3D type behaves almost identically to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s native Image3D type but stores several additional \
pieces of data that track MRI-specific information (such as how to transform \
the image into a RAS space)."
}], "Item",
 CellChangeTimes->{{3.643563451118621*^9, 3.6435635061447697`*^9}, {
  3.643563600958765*^9, 3.643563731638525*^9}, {3.643563815282773*^9, 
  3.643563871324237*^9}, {3.643564216122059*^9, 3.64356432954523*^9}},
 FontSize->16],

Cell[TextData[{
 StyleBox["FreeSurfer.",
  FontWeight->"Bold"],
 "\[LineSeparator]This library originally grew out of a library called \
MmaSurfer, which bears a strong resemblance to Neurotica. MmaSurfer was \
designed specifically to represent FreeSurfer subject data as a data \
structure in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", and Neurotica represents a significant improvement over MmaSurfer\
\[CloseCurlyQuote]s original goal. Neurotica supports importing most \
FreeSurfer file formats (including label files, annotation files, curv files, \
w files, and mgh/mgz files) and exporting some of these as well. \
Additionally, FreeSurfer subjects can be treated as data structures rather \
than having to import their data manually."
}], "Item",
 CellChangeTimes->{{3.643563451118621*^9, 3.6435635061447697`*^9}, {
  3.643563600958765*^9, 3.643563731638525*^9}, {3.643563815282773*^9, 
  3.64356403934448*^9}},
 FontSize->16],

Cell[TextData[{
 StyleBox["Cortical Meshes.\[LineSeparator]",
  FontWeight->"Bold"],
 "Although originally designed for use specifically with FreeSurfer, \
Neurotica\[CloseCurlyQuote]s CorticalMesh immutable data type is a very \
extensive and flexible representation of the cortical surface mesh. Cortical \
meshes are simultaneously (and automatically) interpreted as ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Graph instances (with edges composed from the mesh\[CloseCurlyQuote]s \
triangles) and as both MeshRegion and BoundaryMeshRegion instances."
}], "Item",
 CellChangeTimes->{{3.643563451118621*^9, 3.6435635061447697`*^9}, {
  3.643563600958765*^9, 3.643563731638525*^9}, {3.643563815282773*^9, 
  3.643564204602068*^9}, {3.6435643380721893`*^9, 3.643564338080044*^9}},
 FontSize->16],

Cell[TextData[{
 StyleBox["NifTI Support.",
  FontWeight->"Bold"],
 "\[LineSeparator]The Neurotica`NifTI` package contains weak support for \
handling NifTI files. Both NiftI-1 and NifTI-2 files can be imported, \
including the CifTI sub-format. The GifTI format is also supported. None of \
these may not be exported yet, however."
}], "Item",
 CellChangeTimes->{{3.643563451118621*^9, 3.6435635061447697`*^9}, {
  3.643563600958765*^9, 3.643563731638525*^9}, {3.643563815282773*^9, 
  3.643564204602068*^9}, {3.6435643380721893`*^9, 3.6435644431954823`*^9}, {
  3.6435829228795547`*^9, 3.6435829228873*^9}},
 FontSize->16],

Cell[TextData[{
 StyleBox["Registration.",
  FontWeight->"Bold"],
 "\[LineSeparator]The Neurotica library was built with the problem of surface \
registration in mind. A Neurotica package, Neurotica`Registration`, provides \
several utilities for performing optimization with respect to models or \
anatomical constraints."
}], "Item",
 CellChangeTimes->{{3.643563451118621*^9, 3.6435635061447697`*^9}, {
  3.643563600958765*^9, 3.643563731638525*^9}, {3.643563815282773*^9, 
  3.643564204602068*^9}, {3.6435643380721893`*^9, 3.6435644431954823`*^9}, {
  3.6435829228795547`*^9, 3.6435829815523376`*^9}},
 FontSize->16],

Cell[TextData[{
 StyleBox["Miscellaneous Utilities.",
  FontWeight->"Bold"],
 "\[LineSeparator]The Neurotica`Util` package contains a number of \
miscellaneous but useful utilities that may be useful even to \
non-neuroscientists. These tools are detailed in Section 2: Utilities."
}], "Item",
 CellChangeTimes->{{3.643563451118621*^9, 3.6435635061447697`*^9}, {
  3.643563600958765*^9, 3.643563731638525*^9}, {3.643563815282773*^9, 
  3.643564204602068*^9}, {3.6435643380721893`*^9, 3.6435644534981194`*^9}, {
  3.643564522000098*^9, 3.6435645681135807`*^9}},
 FontSize->16]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Neurotica Installation Instructions", "Subchapter",
 CellChangeTimes->{{3.643558140601664*^9, 3.6435581442578793`*^9}, {
  3.6435621815167313`*^9, 3.643562212364477*^9}}],

Cell["\<\
In order for the example code in this notebook to run correctly, you will \
need to make sure that Neurotica is installed on your system and that it is \
able to discover your FreeSurfer subjects\[CloseCurlyQuote] directory. The \
check-list included below formalizes these requirements:\
\>", "Text",
 CellChangeTimes->{{3.643558146282806*^9, 3.643558216730669*^9}, {
  3.6435583545212717`*^9, 3.6435583572101088`*^9}, {3.643559525989612*^9, 
  3.643559555126445*^9}, {3.643559604345469*^9, 3.643559605560419*^9}, {
  3.6435596383317957`*^9, 3.6435596428093224`*^9}},
 FontSize->16],

Cell[TextData[{
 StyleBox["Neurotica must be installed.\[LineSeparator]",
  FontWeight->"Bold"],
 "To install Neurotica, you will need to make sure that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can find a copy of it in its library directories. On Linux/Unix systems, \
the local library directory is \
\[OpenCurlyDoubleQuote]~/.Mathematica/Applications\[CloseCurlyDoubleQuote]; \
on Mac OSX, it is \[OpenCurlyDoubleQuote]~/Library/Mathematica/Applications\
\[CloseCurlyDoubleQuote]; and in Windows it is \
\[OpenCurlyDoubleQuote]C:\\Users\\<username>\\AppData\\Roaming\\Mathematica\\\
Applications\[CloseCurlyDoubleQuote]. To obtain the \
library\[CloseCurlyQuote]s code itself, you can download the library from \
GitHub: https://github.com/noahbenson/Neurotica. Note that, in order to use \
the registration library, you will additionally need to initialize Neurotica\
\[CloseCurlyQuote]s github submodules (shown in the block below). The \
recommended installation method is to clone this github repository then to \
make a symbolic link to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s library directory for the file src/Neurotica.m and the \
directory src/Neurotica. The following code demonstrates how this \
installation occurs on Mac OSX from the Terminal:"
}], "Item",
 CellChangeTimes->{{3.643560237937209*^9, 3.64356027908918*^9}, {
  3.6435603174187317`*^9, 3.643560590709784*^9}, {3.6435606300121193`*^9, 
  3.643560648743683*^9}, {3.664974383506373*^9, 3.66497439076617*^9}}],

Cell[TextData[{
 StyleBox["~$ cd Code\n~/Code$ git clone \
https://github.com/noahbenson/Neurotica\n",
  FontWeight->"Bold"],
 "Cloning into 'Neurotica'...\nremote: Counting objects : 726, done.\nremote: \
Compressing objects : 100% (14/14), done.\nremote: Total 726 (delta 4), \
reused 0 (delta 0), pack - reused 712\nReceiving objects : 100% (726/726), \
422.29 KiB | 0 bytes/s, done.\nResolving deltas : 100% (427/427), done.\n\
Checking connectivity ... done.\n",
 StyleBox["~/Code$ cd Neurotica\n~/Code$ git submodule init\n",
  FontWeight->"Bold"],
 "Submodule 'src/Neurotica/lib/nben' (https://github.com/noahbenson/nben) \
registered for path 'src/Neurotica/lib/nben'",
 StyleBox["\n~/Code$ git submodule update\n",
  FontWeight->"Bold"],
 "Cloning into 'src/Neurotica/lib/nben'...\nremote: Counting objects: 270, \
done.\nremote: Compressing objects: 100% (94/94), done.\nremote: Total 270 \
(delta 38), reused 0 (delta 0), pack-reused 151\nReceiving objects: 100% \
(270/270), 1.41 MiB, done.\nResolving deltas: 100% (85/85), done.\nSubmodule \
path 'src/Neurotica/lib/nben': checked out \
'cd129f7d626d42df1cc1d4d3d6e574f017059e43'",
 StyleBox["\n~/Code/Neurotica$ ls\n",
  FontWeight->"Bold"],
 "LICENSE     README.md   Tutorial.nb src\n",
 StyleBox["~/Code/Neurotica$ cd src\n~/Code/Neurotica/src$ \n",
  FontWeight->"Bold"],
 "Neurotica   Neurotica.m",
 StyleBox["\n~/Code/Neurotica/src$ cd ~/Library/Mathematica/Applications\n\
~/Library/Mathematica/Applications$ ln -s ~/Code/Neurotica/Neurotica.m .\n\
~/Library/Mathematica/Applications$ ln -s ~/Code/Neurotica/Neurotica/ .\n\
~/Library/Mathematica/Applications$ ls Neurotica/\n",
  FontWeight->"Bold"],
 "Coordinates.m  Global.m       Mesh.m         Registration.m VisualCortex.m\n\
FreeSurfer.m   MRImage.m      NifTI.m        Util.m\n\n# After this \
installation is complete, you can include the entire Neurotica library\n# \
into Mathematica by using the typical <<Neurotica` syntax. Additionally, you \
can\n# upgrade the library by typing 'git pull' from the ~/Code/Neurotica \
directory."
}], "Program",
 CellChangeTimes->{{3.643560237937209*^9, 3.64356027908918*^9}, {
  3.6435603174187317`*^9, 3.64356068793869*^9}, {3.643560720961048*^9, 
  3.6435609717882967`*^9}, {3.6435610652086353`*^9, 3.643561131077612*^9}, {
  3.64356116796738*^9, 3.64356127746353*^9}, {3.664974398910913*^9, 
  3.664974457414969*^9}}],

Cell[TextData[{
 StyleBox["Neurotica needs to be able to find your FreeSurfer Subjects\
\[CloseCurlyQuote] directory ($SUBJECTS_DIR).\[LineSeparator]",
  FontWeight->"Bold"],
 "You don\[CloseCurlyQuote]t need to have FreeSurfer installed to use \
Neurotica, but in order to execute the examples in this tutorial, you\
\[CloseCurlyQuote]ll need to have a subjects directory containing, at the \
least, the fsaverage, fsaverage_sym, and bert subjects. (The subject \
\[OpenCurlyQuote]bert\[CloseCurlyQuote] is an example subject that is \
distributed with FreeSurfer). If you do not have FreeSurfer or FreeSurfer\
\[CloseCurlyQuote]s default subject directory, please visit \
http://freesurfer.net/ to obtain these."
}], "Item",
 CellChangeTimes->{{3.6435612131465263`*^9, 3.643561215475378*^9}, {
   3.643561297499597*^9, 3.643561408503685*^9}, {3.643561941509377*^9, 
   3.6435619839332047`*^9}, {3.643562036223572*^9, 3.6435621683993473`*^9}, 
   3.6435644882735653`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Neurotica Configuration", "Subchapter",
 CellChangeTimes->{{3.6435621902131042`*^9, 3.6435622187995787`*^9}}],

Cell[TextData[{
 "Once Neurotica is properly installed, the entire library can be included \
into your ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " context with the following instruction:"
}], "Text",
 CellChangeTimes->{{3.643562220801908*^9, 3.6435622509184017`*^9}, 
   3.643564498600913*^9},
 FontSize->16],

Cell[BoxData[
 RowBox[{"<<", "Neurotica`"}]], "Input",
 CellChangeTimes->{{3.643562252050975*^9, 3.6435622534162073`*^9}}],

Cell["\<\
If you want to only include part of the library, for example only the Util \
namespace, you can use a line like this:\
\>", "Text",
 CellChangeTimes->{{3.643562286154069*^9, 3.6435623110498877`*^9}},
 FontSize->16],

Cell[BoxData[
 RowBox[{"<<", "Neurotica`Util`"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.643562317705761*^9, 3.643562320837759*^9}, {
  3.643562626817573*^9, 3.64356262911395*^9}}],

Cell["\<\
Once Neurotica has been included, there are a few variables that may need to \
be configured; these are the FreeSurfer subjects directory and the fsaverage \
and fsaverage_sym directories. If your fsaverage and fsaverage_sym \
directories are in your subjects directory, then you need only set the \
subjects directory itself. Note that Neurotica can track multiple subjects \
directories, so the function to register one is \
AddFreeSurferSubjectsDirectory[]; to remove a directory, \
RemoveFreeSurferSubjectsDirectory[] can be used.\
\>", "Text",
 CellChangeTimes->{{3.643562338117373*^9, 3.6435623621701403`*^9}, {
  3.643562410995273*^9, 3.643562475930751*^9}, {3.643562568777233*^9, 
  3.6435625822141113`*^9}},
 FontSize->16],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "AddFreeSurferSubjectsDirectory", "[", 
   "\"\</Applications/freesurfer/subjects\>\"", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.6435623647429647`*^9, 3.64356240745368*^9}, {
  3.643562477607808*^9, 3.643562496575081*^9}}],

Cell["\<\
To see the list of subject directories, we can examine the variable \
$FreeSurferSubjectsDirectories:\
\>", "Text",
 CellChangeTimes->{{3.6435625841783447`*^9, 3.643562595799893*^9}},
 FontSize->16],

Cell[CellGroupData[{

Cell[BoxData["$FreeSurferSubjectsDirectories"], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.64356260007992*^9, 3.6435626000805683`*^9}}],

Cell[BoxData[
 RowBox[{"{", "\<\"/Applications/freesurfer/subjects\"\>", "}"}]], "Output",
 CellChangeTimes->{3.643562600986229*^9, 3.6435626346544847`*^9, 
  3.643562671851061*^9, 3.643620784067493*^9, 3.6436264421083593`*^9, 
  3.643626481890088*^9}]
}, Open  ]],

Cell["\<\
Additionally, one occasionally wants to examine a FreeSurfer subjects \
directory that lies in a different location that the fsaverage or \
fsaverage_sym directories; in these cases, you can explicitly set the \
fsaverage and fsaverage_sym paths:\
\>", "Text",
 CellChangeTimes->{{3.6435626955765247`*^9, 3.643562716940549*^9}, {
  3.6435632249934683`*^9, 3.643563245951589*^9}},
 FontSize->16],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "$FSAverage", "=", "\"\</Applications/freesurfer/subjects/fsaverage\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "$FSAverageSym", "=", 
   "\"\</Applications/freesurfer/subjects/fsaverage_sym\>\""}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.643564604292852*^9, 3.64356462521937*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Chapter"],
 ". Utilities"
}], "Chapter",
 CellChangeTimes->{{3.643557632866323*^9, 3.643557671981203*^9}, {
  3.6435621740472403`*^9, 3.64356217576805*^9}, {3.643564650926221*^9, 
  3.643564652005076*^9}}],

Cell[CellGroupData[{

Cell["Introduction", "Subchapter",
 CellChangeTimes->{{3.6435681282979383`*^9, 3.643568133181903*^9}}],

Cell[TextData[{
 "The Neurotica`Util` package contains a variety of useful functions that are \
used throughout the Neurotica library. They aren\[CloseCurlyQuote]t directly \
related to neuroscience, per se, but they are intended to fill a few small \
holes in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s interface. Pieces of this library are useful for a \
variety of analysis tasks and may be included without the rest of Neurotica \
with the command <<Neurotica`Util`; this section documents and gives examples \
of the various tools provided in this package."
}], "Text",
 CellChangeTimes->{{3.643568372889969*^9, 3.643568373327915*^9}, {
  3.643568492900915*^9, 3.643568500276828*^9}, {3.643568585314445*^9, 
  3.643568643961381*^9}, {3.643568714270976*^9, 3.6435687630869493`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functions", "Subchapter",
 CellChangeTimes->{{3.643568797807267*^9, 3.6435687986611967`*^9}}],

Cell[CellGroupData[{

Cell["AutoCache", "Subsection",
 CellChangeTimes->{{3.643568836461877*^9, 3.643568839371728*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643568859899282*^9, 3.643568861411313*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AutoCache"}]], "Input",
 CellChangeTimes->{{3.6435688803485203`*^9, 3.643568881779297*^9}}],

Cell[BoxData[
 StyleBox["\<\"AutoCache[name, body] checks first to see if a cache file \
exist for the file named by the given name and yields its contents if so. \
Otherwise, yields the result of evaluating body and caches it in the given \
filename. If the cache file is out of date relative to the evaluating cell, \
the contents are erased and recalculated. If the given filename is an \
absolute path, it is used as such, otherwise it is localized to the cache \
directory. Note that the mx extension is added automatically if not included.\
\\nThe following options may be used:\\n * RefreshOnChange (default: True) \
prevents the function from overwriting the cache file when the cell is \
changed if False.\\n * Quiet (default: False) prevents the function from \
producing messages when updating or overwriting the cache file if False.\\n * \
Check (default: True) if True instructs AutoCache to yield $Failed and not \
generate the cache file whenever messages are produced during the execution \
of body.\\n * Directory (default: Automatic) names the directory in which the \
cache file should go; if Automatic, then uses $CacheDirectory.\\n * \
CreateDirectory (default: Automatic) determines whether AutoCache can \
automatically create the $CacheDirectory if it is needed. If True, then \
AutoCache will always create the directory; if False it will never create the \
directory; if Automatically, it will defer to $AutoCreateCacheDirectory.\"\>",
   "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6435689619374237`*^9},
 CellTags->"Info3643554561-3240927"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.643568970721884*^9, 3.64356897168795*^9}, {
  3.6435698609945173`*^9, 3.643569862080916*^9}}],

Cell[TextData[{
 "AutoCache can be used to save the results of a long computation for \
subsequent ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " sessions. This is a good way to make a notebook load quickly between \
sessions. Keep in mind that, as nice as ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is, it still crashes sometimes; the author\[CloseCurlyQuote]s experience \
is that this is most likely to happen when when displaying complex 3D \
graphics (such as cortical surfaces or MRImage3D instances) and when \
rendering complex PDF or video files. Using frequent AutoCache statements \
prevents long load-times when restarting a notebook."
}], "Text",
 CellChangeTimes->{{3.643569074029688*^9, 3.643569126171465*^9}, {
  3.643569184482189*^9, 3.6435692042501707`*^9}, {3.6435692684327087`*^9, 
  3.643569272128212*^9}, {3.6435697532190647`*^9, 3.643569901016653*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.643569904575817*^9, 3.643569905639596*^9}}],

Cell[TextData[{
 "Here, we use AutoCache to save the result of a long computation; the second \
time we run the auto-cache command, the result is loaded rather than computed \
and thus proceeds quickly.\n\nNote: this example will create the directory \
AutoCache in your ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " library directory; do not run this cell if you do not wish to create this \
directory."
}], "Text",
 CellChangeTimes->{{3.643569908583778*^9, 3.643570061162883*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleData", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<TestImage3D\>\"", ",", "\"\<CTengine\>\""}], "}"}], 
  "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.643570102738654*^9, 3.643570109278501*^9}, 
   3.64357035648687*^9},
 ImageSize->{315, 13},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
adzpsKtRp+IuR8fHxSYmJGCA/H4M6c4W8hdnCD8P+V+Intu6eKigPFonrP1W
TmjgfitAAxY+EACAQEHD19+PuPwJgPh3BQiXJCQwOMjf2+OE04GUg/Nasicw
KvQ6KnQQE2oMO2ond9yaRH+6gv5oGeqkPFtFf2zEuDe/o3Yq485sgAa6B3TA
+yt1Oyr1GJX6jAp9epkuvUy/vVinLU+rNV+n+Ybmu2StqtPrKqO2pJ06mng6
NP7syWuXLiRcu9qdEtInamrvChmu++x4d3W/VQzp4dgQfh7yz4ueq6BsO+I5
DeScrRPWfiunSaN7aARgaBw7fhwuHz+4/LoyhAQIaxLiF+Dv4+keYr+jxH9a
W6EWo8oAQIFwAZUIJBXwii+oU+7NQx5RSDxQHrKW/nw1MnK8WANfZ9yd3VE3
FX0joAZeq+D9hvCjgCGMqsn0Mj1gSGu+Vkue7ucsnXfJ2k9iZ1ZHbs4Od7l+
0j/xTFj8pQuJBEP+sCSEayHDdY9ML+ypvRZD+Az5Bwf8z8cKje4cGt+qgrK1
Tlj3t+LWCadJA6AB2QIBjUAMDQAFEOOorw9x+R477svBkC5JCLzFx80p3HFr
TahBe4lOR7UhkTboorWPuYEhQEqjhBxabYBuqvSRXxQykCdG9KerUCHzaj39
3VaEi4aZ6LvwzyEAgvKQch1GuS6jTIdeot1epNWWr9mSrfE5bcK7ZP1Hl+dU
nN2THu6VfCog8XxkT0aFfJOa+v0dGT5D+PGd0RNBg4cXlHP2Dtcpf1TrhBUa
nCYNVmgAEChoePsc8zp2DF69fVgB4ssGEHiLt4vjadvV1aGG7cVI3kRrvIpY
7zUGiA8ozTBA9MBfBHSgDEQPfRF3ZhE9ZtAfLkNVDFxQxeBU5PUG+jNjyEPQ
d8HPgSoGpy6VUAHpMtClTy/VoRdpthdqteZqNmdrfUjVen5l8t3zyyEJSY0K
S74Szbul+/sVMlz3yPSiq/utYgjfofpPja9Cg6ugwdVAzrnrpLt+K7tJows0
grpCwxcoAcTwPHoULq9j+GIFCDMJQQDx9Qmz2ljgof06VaetyQhlEShD0O1k
hR5JDHit1CFEDG2ik2KA3oDkUC3s5UB+sBoDRt00etNiRI/Hy0lX2Mt1yONx
fwFUN6iQuTWZ6MXoEf8VPcQcSEIgAynVphdrtxdoteVqtuTqfM7UfJus/yBm
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
9K82F2kMkKoPEr91RDjHRibK3wPSV0hi4QN2hQgMEMyQPzcJoQoZWDKYG7Cm
/o5NWN771L6qgn4rNDj7rezjd3jaQTl3q3FO4GGBhmMvMg0gxpbt27ds3wav
W3dsZwMIMwPZvctkvZHnYvWQuZKXFg/OXP5j/tYfC636lzsMrnUVrfaUqPYU
v3VMotZLstRZIstS7O6uQW2xUvTaaYgbAI37+FpIr53adv2Xt+HiD46K1brS
Kl0lsh1kEyxlrtkqxzvJxzsqXbFTjXVQuuKoGueoGmOrEGuvcsVRPtZaLsZG
OdpG6fx+mYsmUmf3yp02kT17QP6sqdTpPdJn98mc3St1fq9kjKVstKnU+X3S
ly1kISG5uF821kom5oDsFSv5+IOKV2zkYywVrzkqxTspJjgqJVpJpdhIJtkq
pjgqpDnLp9rKA74yDipku8lne6rc9FTLP6qc640qnQJPlWIflRIfxRJftfLj
qlU+CpX+SreCVevC1OrCVW4Hyd8JUbkXpvLgpNrjcIUXEYpvLyq1ZY5GDabG
OciLUtk5bKR2CtlgJSULfOSlPqNhBnNcc5Ue0/SFRVFsDX20nJ414q3HkLo9
QndOjXoeLlPtJ17pIZxkoX4qLAQ+V9FEwGfsMhGYIVyTkAQiuktCONsxPTxB
hrc3FfINeOzCaoIE/m/HDU5BoztbV9+2TrozaXA4u5h20K4ecs598Wxjuzqh
Yd8baGzetrXz2sYJkC5JyK6dJpuM7RdoHNUTil7wc8qyn3LW/lhi0q/YfnC5
07BKl+GVLmI3zEVydgg8dR/anq+JKhSABr6aFtMbfmtPHfEhgnb/mHi9u1iN
i2iJo2iGvUyMiUS0mfwVB/nLtgpRB5Qu2iiet1G+YK18zlz+orXSBRu5aAvZ
iwfkz5gpROyWPr1b6uQu2bCdMhH75U7ukQrfLnlqp8TJbZIR28UvmEhF7pSM
3CGBMLJf9sw+mQumUmf3SJ/bL3fZCv2Qc6Zyl60V4g4qxjkoxe6XSLCWirOW
v2qjkOSgAOyKt1FIdlBKPSSf7qGYflgl0105010pw0Uh87BytptSNhRTXqp5
nioFHoqFfoqFPiqlASNKQ1TL/RUhLak8rnwrQKXGR6H2uFJjoOLHMHF6mTbZ
S2pajIhRrcesUzqdb4z6aUQXeC3p6yB39+iyYES3o5E4+7JU6+NJyQfWQwoP
Kd2LGvcsTLr6OK3UefhFu8VnTp+GzxU8jy5cuHCRCAwQzJAYIjiTEIohXJOQ
3qmp3TEElgw8cClusJo3/vpNWFyb9Hxza99Cg7Xf2lfQYM80vgEau1mhsXHL
Frg2bYWLpAdXgFAyyIZ1q81+GxtiNDhqteCVZUOSl/ZLNfpv/pYfi/b0v7l7
yPVNQ25b9mtNHwXlOapKABcPl6Cbxvn0vDEfz9GeHBWpcaeVHhStdhLOthJO
tJA6B4t9t9y5A7Jn9suH71E4vV8uwkwxYp/8KRO5yAMKEQdkIvbKRO6VOblb
LmyH1Mmdkid2yQdvkw4zkT2xXTJoPS14rWjwetqJDaIR2yVCN9HCtoiFbxU/
uUPy5A6J04CU7VIAkHP7paOAJCYyFy3lom3lr9grXtxDu2IpHX1AJsZaPtZG
8Yq5zBUrmat2Slet5ZJdoMBRSHZRBp4k28gkOcgn2yukHZJP81DJcFNNd1HM
8VFGOYm3Wo6vWq6PYu4Rpfwjivleinlu8oWuChUeCs+8BD7H/dKarUFvmEUM
VN+Eus+sm+iRD38K/dU65ixW5hwAqopBLlOkllRPar6s8sxVoGznsNwjv9y/
MOFRuFS1l0i2tcRJt73wiYLPVRQRFEAwQ1iTEFaAUEkIK0B+pyQEFgvk58AN
WEqs5o2/fhOW06HROxX0m6DB2W/lNrOL3UPedeMJ5xZXcgJPH2YaQIwNmzdv
2LwJXjdu2UwBhGIIJ0C2bNu6Zt40/yUCURZikTayZ/dKnDQSvLho4NUFP8Uv
/LFm7w8f4kcQpzLpwoOS8WARYShdjITQi1IvfIUa3USKHUVzrIRLHIYnHRC9
uEfy5GaJsG0yJ/dIh+2WDdoGNJAO3CYTvEMuZJds6F6F0H3SITulQ7fDJRO8
VTJ8h0TQdtmAzVJBO6WCtkgcXyXms0L4+CoRPyMRf2PRoNXCQcbCgevFgtaK
Bq4BnogFbRI/uZ0WCQCBRGWHONycNZOOtpY9t0Pkopn02f3SF8zlzpkpnDOV
vWguE20pf8lCLs5O4aqDXJyjYqyNQpylTKyF9BVzuXh7+YRDiolQ4DgqpR1R
SnFTTgOGeI1I81BMO4w0WAQWW9lMe/lCB+mmg0NehSt8jFZpSRzVlqtFvzUV
ZVyv1zOeGKEe66Nl2C1PDF2fjI7MZp22ymSIATqZrnZa87WRr3zE6q2G5OwQ
Lj6q2BT+S/0JqSq34akHVIL8fCKJgI/WmTNnzhKBAcI7CeGqhPR5EgL0wNyA
Jy9uwv5duMFD0OBq6+rD1gkbNDhMGl2cXV095Jy71TjHdqGpwhgaNj2Axq69
3UJj/aaN6zZuhNf1mzZxAGQLV4CsX7nM6TepsLVDIkzEztpKnLcRD90semHx
kOr9P76N+6WtYS5KMF6sIZqJ85ATrFy35bLsG//hjU7DKhxFsqxEUs1EbtiI
Xt4nGrpZInANLXC9VOA2qYBNUsfXSx9fL3VsnZTfJpmgnTKBO+QCtsPXJQM2
SgVulg7YIHFiq0TgFhmftZLHNkgcXydxxEj0yFJhjyXCRxYKei0S8lkm6L1I
wHe5oO8ygaOLBY8bCfgtEwhYJRiyTujE+uEhG4SCN4ic2iV6Zqfo2U1C50wk
Ikykz1nInTKRj9gDDJE5s0/6rInMBQv5WAe5aCtU1Fy2kL2wX+rCftloCyh2
ZKGuibVWSHZSvOagmOQ+4rq76rWDCvEHleIdlOPtFJIspK9by+WYid+xGfDs
hOSLSOXXV9XexY38mKTemj6BXmGIureoH70amUBuTUL3L9cx7s7u3DJMOEip
3cQ1hvT7i1ozxr31k7jrLFKye1DqVqHqE8pNJ6SrAyTLnIdfNfs16EQw5K7w
uYogAgOEYghrEkIxpOdKCCdDeLRjuJ4gA49XWDWQqFPc+FuYN3jvU+OhgvYt
NLg5u3oJDdZR5D2HBtfyBJjQCY0NazdsgFegR/cA6ZKBwI3pvElhMwdGLR1w
deWAnNX9anf89DpseEuOenv9LPQArSCq+6eEt6HasOWayms/4QdHBCtsh920
Ek4zF00+IJpkLhq5FbICce/lokeNJb3WSngZS3ivlvI0lvRcI+2zSSZwp6zv
FjmfzVJH10j4rpP0WSvls1bCby3t6Gopj1USHsa0I8aSrkaiTgsED84RdPpt
iMtMuAa7zhjsNmOgx8yBrjMGus0Y4D5zgMdv/Y/NH+S7aKD/0kF+y4cEGQ8J
XTMswnjw2Z3CYbslT++XCd0lG7JFInyPVNguqfBdUlAWRR2QiQSkHJA7ayJ9
apdExE7pyD3SUfAVU5koU5krtvKXbRRiHFXinVVibOSjrRQv2yhdtpK/vE8q
dr9M9nahOw4DH/jJPAmVfxah+uz0iJcXR3y4oPr52pj2nDH0W1OQPvycsNQ+
Q7tvGFDHQS3zaj25eY0cFKYL9V17keaHYKl7rmJVdsPL9g68uW1Y/THZ2yck
yj3E8h2Gn7OYCtwICw8LJwIDBDOEDSBUEsIKECoJYQXIt7ZjeCQhkHLAesHc
YDVv/MWbsFwFjd6poH1i0uCcDtrVDtpltxrnMA0umYYDBQ2b3pUnGBpr1q9f
s34dvK7dABeTIZwAwQzZtnmjr5FuvJFs5ap+9zf933Pzf3/0/U9rkhyjTAsl
GFCb3CGKemyIqp/RelXldRDtvptA7WGBXAuBNAuR5ANiiaYil/eIhKwXOWYk
5rZA2HWxmPNymutycfdVUq4rJdzXSHutlz62VfbIWhmvjVIeKyUALB4rJT2N
JTyMRN2Wibssp7ksF3NdJXFwsbDtb4LWU4fZGAy21RtoqzfATqe/nVY/O63+
dpr97TSIV63+Trr9nfT7uU7u7zmj/9FZ/QPn9w+b1y9y/ZATOyRC90gHbpXy
XwMVjUTwdqnATRIntkuGbINLAkqn0G3iQRtoQRvET0AxhWQTqZM7paL2S0eZ
yZ03V4ixUzh3QDbKTD7qgDzwJHK71IUdUiUbB991E7gdIH0vVLkxUOHRCfkn
p1SfhyuiqSZXVOhl2qhFcmcWmolUroV8s8+MSVPc05Udt3/Ds3o6tVD5h0do
lXaiZXbCt2wGlR0QqvaVrPKVrDwscsNa8JTVfPggwWMoJCwUPlpwYYacJIIt
CTlDRE+UkD5JQihuwPKBh+/fhRs8bF3fr4J+q0mDqx30j4VGt5kG4GL1urWr
165Fr+vWsQKEoAc7QDavXxOxSO3WtiGvDv70yb9/84mB7Qk0eokmcjbWT0NS
xmMj1CBA9yvojXPbMsa+DaHdPyLS4CxQdUgw10bourlI4gGxK7tEorYIB60W
PrJE1GnWcKf5oo6LxZyWih9eJeViJOG8StpjHbpcV0sf2SztbCTuZiTuYiTp
slz80EJRx/k0+wWiDgvEHJbSbOcOt5whaKo/1FRrsInGYJOJg0wmDtk7YfDe
iUNMJg7epz4Y7uHGTGPwgYmDLLQH2xkMcZg05PC0oZ5TBgUtHBC0QThoM6p3
vFeJ+awWC9oiCa++a8X9N0gErKcFbhY/vkrUb6Xo8VUiAavEAtfRgjfQTmwR
P7VTEnKSCwdkLlrIntkrA6nIGRPpiL3SoZslL6wTq9740/3jtLog5Tuhire9
pRuPSD72lHhxXPxTmBg9S7Wjdio5waNcC/6JOmonY1wwGucAOqA8YUCS9nYT
vULv83nlJ94StU60YmvRUkda7SHB6oNCBV6SVe7iZc7CabYiYXaL4YMEuSt8
ruDiBAiVhPS8iumTJATQAdyAJywsHMjV/xbmDVybsO1T6/mIvz7pt/JwdnUd
Kdxl4wnXYRosE3jIWX+c0DC3+oZMgxMaxmvXrFqzxhiutXBxAQiVgWxZszJ4
4S81Owd/8O3fGiVIvyZGz1RGoh8q24lpV9TcvNcb6A8Wt98Y13ya1nREpOaQ
UJmDYLHj8IKDIpnWogn7Rc5vEgpbLXR8hZDbQhHHGUIOc0XtltAcF9Mcl0k6
wKuR1OF1si5rpJ1XS7tulHZcJm6/UMxxvpjtPFGb34ZbzxSxnCVs8ZuIxVxh
8+lCJlME9uoO26k5bJvG0G2aAtt1hLZqCW7VEdyuLbBNS2CrtgDc7IBLc9hO
XcF9U4RMpgmZzRKxmiroOmngscVDj68W9Vwp5r4MiSRHV9E8V4lB3RSyYvgZ
I4GLq4dFrxhyefmQ84sHn1k8NHKZQIiRUJixSOQG0fCttDM7xcO3iodukTy1
RSx8i3jgBomgNbQLywXKt/339lHRqqNyFe5yDQdpDw4KP3YS/OA5mJ4sCyBl
3J6J+IAGDc3H83/QDZ5hSFi/UAZSZfD5kuqzYxK1LuKltmJFdmLFjuI1zqKV
zmIlzhKlTmIF9kLXbUWC7JfD0wc+UYEnTsBHCwCCGQIAoRgSxi0JYZVSKYaw
Sqk9bMdwZQgsClgdWcRRDpgbbOaNv2AT9lsFja+qoH1g0ujWDtpl4wnXLa5c
oEEOCOWEhjlAw8QMQ8OkOyGUKzRWrl69crUxvK5aAxfBEG4A2bp6uc/8Mbmb
hr8PGdQeS6OnKdDzxqDNX2hWBjEugxqSg86CXw1pdmus3LsA4Uf2Q+v2Dija
OvDG5iE3TIVTzUSSTISj1gkGLRc4ulgAihS7aUJWv4nYLBSzWyxuPV/cZh7N
erGko7GMw0rpQ6tlHFZL2iykWcBKB1DMEDafLGg+Rdhs+vD9U4VNpgmaGAru
1RPYpTdsu7bgZg2BrTrDtxkIb9UR2qIjuE1HcIuu0GZtwa3EtV1z2FZdwR2T
h++eLrz3N5G904St9Ie6TB/ksWS422KRw4tEXBcMd1skfNpoWPaOgfd8RN5H
S7ckKnyOl2tJVISb9xeknobQnoeJPvCnPT0hXGkzsGDP4MytA7O2DU7ZOChl
w5Boo6GXlg7JnvdTzeYfG80E7lkJPLMd9sJqyDvH/q3hg9tvjoU6jjz1kjpW
hjn3g5xihGYR3J3bcn3sa19avZN4sS2tyJZWaEcrsKOVHaTlO0gUH6QVHRTN
sB1+1YLm77gWPkuQchBXMAYIxRDWJIRkyHcrIT3xhMC6gFQcuAGrBps3WLnx
FzRvcAoaPRnx1/PWSW9MGtztoDx2q/GExkFe0Pj28mQdhsYKY2PqYgUIaway
bvUqh/naV5ZLPfcZ3JYoBfk2vVAdHbraOJfcp4aJ8cQI7ZR/uZZeO7UladSn
CPG3AcNeegx6enDgQ9uBD/b9XLnjv8Vbf85cM/DKyiEnlgw9Om+Y29zhttME
D0wTtpgjarNI3Hw27cAsUfMF4jbLpK2XStoayVguFjObIWw6efh+4jLTFzAz
FDKbLLjPQGiPgcA+fcFdkFHoCGzSFtykIbBNV3iLPnBj+GYghpYQvMLXt0LW
oSmwTXPYFqCHodCOKcK7porsgZ+mJ2BjOMh+7vBD80Tc5gsFzRXI3tT/dbQ8
/eYYRuF4lr3teuSUYzQ/RJNRqtleYdhepEHP/qU9e8zH1NGtaaptaaqtifKf
Y2Razou3XxJrjRJjJEi1XZVmZCgzCsbBN+I5JORI1Spd5jAfauIxFC8N0+n3
5rdmqr8NkrzjQiu1pRXY0Apsabk24jetxfLsxG9Y0rJtxLJsRFJsh8daShyz
3w2fJfhEQdYBH63uAEIlIUyAsCQhrADh3c/tSRICKwJKFeAGPGQpbvxlzRts
Dg3egkZ3Kmhf9Vt5Oru6eMi7bjxhbnHlnPXXNdOw7cNMgxUa3QEErvVGS/wW
jq62HNJ8Waw9awS9YDy9YSaqTZCmt4K4iKmeAJBX6+l3ZrdmTfh8SeVztMqn
2JHvrqi9jZJ5eVL8qZ/EgyMStT7SlTZD01b8dH7egMDZQ1xmCFpNFjSdLLx/
lqjlfPH9s2mmM0T3z6GZzxM3nydmPl/CdLaomYGgqZ6Aib7QPl1BU51hJroC
ZnrD9uoI7tIZuk9HYI/mMBOtods0hm3XgIxCeIu20Fbd4VtQyiG0VW84pBxQ
swA6tmgKoCREb/iuScN3Th6+Z5KQme5Qc/1BVr8JHZwlDNAos+j3MUkNbWYv
65yVwZyJ0blbBF9QXxATeBgNM8njY/AE5pKJxMkO6uSInko9cj4P8zBKPeYh
VnimInXYSpUu/DO2l+l/CJG67y5e6UgrtBbLtaLlWIllWdAyLGg3rGjpFrRE
E5F0a9FkG5HLBySOOuyDBxCBDnxhgFAMCaYYQgCEPQnpuRLSwyQE0IG5AY9X
4AaneQMWIKzEv0gTllPQ+OqIvz5snXQHDQ5n1+8IjR5nGptYMw1gQnfQYAOI
8aoVNvO00laLvAka3J6uRM8fR6/UR/vUcKeVSjaIriL9/sL2XI2W+NGfk7U+
J2h8SNb6GK/+PnH862i15+EK933k64PHVngr3DQXSVzy06kZA9ynDLM2GGaq
L7R3ppjZLDGz2WKIG7+J7p8pZjNjuN1vIlbThjtBQaE32EVviLveIE/dgUd0
B/kbDPDRHxg4uX/glAHnZvWLmf3TlZk/hU3q72sw2MtgsJPhUHu9oQf0BPcb
CO3WE9qtI7CN0DqgltmuI7RHX9BkstA+Q8EDWkPNdAa5TBcInzO02ubnz2mj
mFOUmSmBbudh2QadxycRNMB/iwd81RigiTrV+sSc0k7jFuuWky4/h8MaSkzp
QepQ3fTPkbJNbmIVUJhY0/KtxXIsxbItxdIP0FLMaKnmYtdNhZNNhZKsRK47
iF00lfJ0soTPEnyiCHoggHQyhA0g31XF9DAJAXoAN2BpQDYO3MDmDU5u/EXM
GzwG77DZur5HBf0Okwa7HZRjtxpziyvnBB6WAaHfn2mwQ4PIKHp0bV0y68os
0QcmP7aeHw7JOdo2fnsWMT50PpFmrITlQIwDNaY3LWkv1m1NGf85Rf9zoubn
q+M/x4z+cHX829gxL2LUH4apNRwTv+UnX+6jetNGKnnDsAu//RxgOOiQ3uD9
2sN2TxYxmyZs89tw5+mCvjOHhc0ZemHuwKQVA66v6Je39r/FG/9buunHyo3/
qdryA1y1W39o2PufRvMfnngN+hAp9NZ/wKsjPz21/Hfj9n837PiheuN/ilb9
mLH4p+T5P1+Y1T9ySv8gwwFeeoPcdQcd1h3srD/EyWDoYf0h7toDAg37xy/q
f8dxwOckZShASMGBOpKSSjnIg2g7pQk8/Lys80ipys6Zn8/R0GPinYSPi0on
cG3Cehguxgj2d1XrowbK7VnNMWrPvUWrbUXyLWl51rRca1qWJS3DnHZ9v1ii
iVjSPqHEHYOv7xp61Vrsup3o2b1yRw47Hjt+HD5RPn7wufJjAQhnEhJEJSEE
QNiTEFYplXc/t7t2DHADFgXmBjxnWU1ff7UmLNs+Nd4qKFcD+XdCozuTBteR
wtw2nnwFGiwnJfGGBnumsW1nn0Fj/5LpEYbD6o1++Hi0f/sVGj1nJNodjzd7
wgeeSDlQD/GJEdqKUqbbmjruc5L2p4QJ76+O/Xhl1MfYMe+jlV9cHP/0lMq9
YPmGsF9L3NVyXRRv2skkbxSKXTLgpH4/D52BntoDg6cOvLhgwM1N/ap2/djk
0v/ZsX6vw4Z9OCf2KUbyc5x0S4JMyxVayzXJ1njJ1lixtkTpthQFdLhbuQ6s
d3jtyBvJyFRsjxNrjxFsvTCs5czQzyE/vT/645vD/3lh/+9HZv++t/Pft7f+
u3LtD6Wr/pNv9J+Stf+p2vTDA8f/vjkp2npzPANP16mgjj/QJE+xpI62pJY5
VbwQ0/8Yt2fidAJqFuT8ZB79xnLOIzXrj/Xcyc7B5owXq+l35zbHj3npL95g
L5x3QCTPUizXhpZjLU7UJuLJpmLxe4Tj1g2IXd4vbpNggr1IsoNY+E5Vd7fD
8HGCxxBxYYAcpwBCJSG9q2K+SUqluJGYmAiLBbhBmTc4ufEnNmFZBQ3e+9R6
roJ+Z7+1u0F/3Ww84bov/iuZBnHoyR+aaexbMu3kdNGsOT8+3/P/PocNb4+T
QrN8G+fj7IIBKQcU+OVaqAuAzOQ6rWmjPidofo4d++7yiHeX1D5cGvHmgtKL
C+OfnpB9cGpsg6/CLU9a8SHRm84KubbiWduHJS0bED/lx4zZP8ISfnyo/7sT
Q5sv01ozf6HfHMUomsAonkCvMuwoHEcoBpr4LBVGpR4xUm88OXscL3N8Fm2x
Or1+BqNIHb6RUTAO6qn2dEV6hnJ7qnx7vERbrEjrBaHWyMHNJwe2nBncfF6g
NVGmLWd0R8E48sTJCm3mGQe4zYEPhWEO1dFAu0saZqDZGsT4YpRiPVuF5mOg
EYjzyBSFwguz0tFj7kAhpjGTAwBvGaIDm5qWtGaovw2UuOMiVmQunGspdtOa
dtNaLNtaPN1SPM1SPMlULHarwIUl/U4vF0ywk05xl0i0EQneMcbd3c3b5xh8
oqDmJS4SIFQSQgCEMwkJ7EZK5dXP5ZGEwOcfFgI8RmF1YG6wmb64mjf++GYK
b0Hjqyoo79bJd0KDzdnFzUPeI2jY2ds52FofsjJzMN9nbWlmZWXJAxpfzTTW
bmCFRk+vdUZLnOeNj581sGbVD29c+jVH0uipsmiF1hAHHBCCBv78o90olfqt
iWofo0d8iBvzMUrp7UXld+cV352Vf3lu3LNguabQUfVHpWs8Jco8lQoOyxbY
SpYdEC7fMujuxh9eW//f55NCbanKjNzRCAjkaW7apFBAnRqAc368MFkPWq0h
jo2r6Dx8AX87MTKdfn8hslFV6hGjgyEn0UZT+IrG00u10Cb3KkN6/UzmEZDk
j9Ulz7Ks7DwAFycbNQaAC4RHAAWxu4Q429EY96DRcU63JqF/DVbhoob1ZEyW
NIM6XfrWpI67s+Hb23J1PoRJ3jssVmIrmmcpctNKLMdGPMeGlm0jnm4lnmJB
i98nemndkJNLBSOtlFK8RqV7SsZaivrvGO/m7uZ17Ch8ouDiBhDfXlQxvZBS
YQlAqQ7rAhYI5ORspi+qCQsr8U9swnLdp8ZDBe1d6+RbocHm7OIJDW/e0LCz
s7G3Nve3XJ8dOvtm8LTzjrPTfaYFWa90Mt1sa7rLyoxAhek+nuXJNoDGxi1s
0FjbHTRWGK9aSVwrVq3EbRR87V48LWiubP7y/97b/sN7H4HmSDFINtDhhpgV
qEJZiRbm7Zn0W1Parqu9O6X04vSoF6dHvoga/eL82BcXxr44NeJZsMyjsJEN
XpJVXtKVnmr5zlIlHiplttKPTAa/P/hD2wUhevZIeoUu5DDkwW3M8ZudpQHr
YF7mwc065NdxhwJDgzosEnMAn2BLHTuCNAcdNNf3/gJUVtyeyZx6Qa1l8nhW
6hupzexzECpfraO/3Ux/t4X+ZhO6JzVhI2K46BqmBIoH8mBi4BnFzN3xnefS
whfrp8E/YHvl1M8RMg+8aRW2IgW2tHxb0WwrsSwr8Zv24lm2EumWtEQzsYQ9
w6NWDg3bJ3f+yOhEr9HJ7hKXLUR8d2oDN6DUhU8UPIkIgBylANLJkG4B0vMq
hreUCh9+qFMwN6CEx9ygzBtspi/MjT++CctD0OCtgnZnIO9h6wSgwavfyg0a
HB5y5m41jmEa1Ky/Qw5WBxzMdodZLLx3berHPJ1POZofMie8TVN/dV394RX1
yjDNeBfDwP0LXXYa2+5cd2DHxn27tu3avWvnrp07dmxjhUaPMw3jVUZL1yxd
uH7J3I1LZsPNmsVzVi9bvGrVirUrltnM17y6YGi50Y9Npj++PypETxBDW+Of
EScF4Ectsnitpd+d05Yy8n2YZFPYyAenRjcRA36fhik/CVF4Gqz4MFDxrqdE
3WHJUlelfCfJsoPydWair2z6tZ0eSM8ehZ74aOF3ZhGsZwxR99QoG5ZTIMlu
Jl6qzMOMDJlnzjKtEZyHy+uTE/woHOFvxPOE8UFI1PHTnacPMF6v76ib9qVh
xpe6aR2N89B5jh920l9tQia31xsY8Ib66WguMfwQfEAMdcR2tR6VtDCPmYb8
BMhze3bzOYXHR8QqD9IKrUQK7MXz7Gg51rRMS/EbtpLAjQwrWoKpaNxWgZMr
RcPsR1z2HnfNa0y8q8RlExGvrdNd3Vw9vLzgE0VcJEA6GYIB8l1VzFelVEAH
5gY8SWGBwErhNH396eYN3raur6qg3bVOvtekwQGNrh7yHkPj0EFba0sHk+0R
ZnOeXTdoKTVoqzBsK9FpKdBsvqnenKf5KXvih0z1d2njXySp342ecOvk2LKQ
CTFOU523LzHfvGr3pjU7N67Zumn9JrQBjQmNNTwyjZVGZvN1fBeqnF0sdnGp
cOgC8cA54kfnKLjNGnV47jinaWp+0yTTlvUrMv75kfXPzYGD0WFDFdoM4vwO
crsrmjA8q+2G+ocwWlOw6p2z6ndOjW48Obbp7K93wsbeDRl111euEZmlRUoP
yufZSZTZyjRZCL937UdPlKZX6aPjUyt1vlRofyHnX7EcSUb6JTrXPiUX4PVI
gQIfbUYdi0ZCQ4v8UdSgTqreYTvz+haVEhgy74ESrKnC7Rnogkqkcd6XF+u+
vNr45anxl8crvzxc9uXOnI7bszqAFU9WIXmnUp9eqI6uEk169SQG/LFhJtI9
qljghvOQW4YIGnXTms8rPPUUvmUnXGg5PNdCNA+4YS+eawdphni6tcQNO8kM
a+CGSPT6YSd2yl3wGnvZa2zckdFXXcQv7R1+ZMesw26u7p7wcfKEDxUHQKgk
pLsq5vh3VzEhwA1YBZB4Y25QZlFs3uDkxh/chGUTNL5HBf3+fiubs4vj3Gc2
aPh0s1uty9guh4OOttYWdvu2nzOd9OaGXnv1FMatKYyaSQxI4Mt16CVa7SXa
7cXabUVarfkTW/I1Pt+c+DFL/X3auLepv75I/PX+pQm5fhMDdkx23zrLx/S3
PWuXrV+7eu26Nbg8MWYpPVgzja3zDM8tHV5lP7jWQ7jWTazaQbDEWujGnuHR
xoJn5gmGTRqcOPvnZKN+RWt/fmnTvyNLDeX/tyYjXDQtZtz+DRX79TNa08d/
PCn56KhkXeioukD5uiCZumC5uhDFej/Zem/xW17KNU7CRa6q2bYSReaSj00F
mn1+pmeqMoizRb5U6iJoVOl9IX1QmszmBSYA5YyintfUPHByYmfnUarU3E7S
YaXHnADM2vckv6JL/oeoI5sxLsgT01hPa52GyHBn9peHS7983vvl2dYvL3d9
ebv7y7sdX95s/vJqw5fna77cX9RROw2VWomSbdFibZcl2q5ItsVKtifJ0TNU
6TmjEEaAIXXTGdWGDFTlaaIpRhW6zZG0565Db5kMyNsztNBkSN4BoTxbWp69
ZK4D4EI83UYiw1YyzVIscd/wc8bDwixVz3uOveQxJuawyhUniXM7hF13LDzs
5galLnyi4IKHUSdAKIZ4d1PFUAzxpRjStRfDxRDCKaXCxx4empgbsDowN3ib
voAbf1gT9psEjZ6M0ehDaHBzdnHfrcYLGg72dpb7D+3beG6vwbt0eFRNRk83
9OmdjAyHUIlX6MLDCz2/ynXpZTrtpToEQCa03BwPqcjnnAmfcia+z1R/nTzu
8TX1R5dH10eOTD860XfftD2r5m9cuXST0aLVK5cj9QKqkjXYArp6xcoVHgvH
3LQSrPCXrzwuU+kjVXNMssxbqtBb4YazSuaWoSmr+met+m/cqsENW35qPk1D
0/ghtYaq5LERskNDRX9nTlvWhI+XFF74C9cfkasKnVDlP7LGV6XGT6nSQ67S
S7XCR63cXrTYQfamlWixpczTA0NaTw6ExzHk/F/KNb9ApoG4ofOlWo9Ahw4p
b+L0Hp+NSNqrOiUOfFHLH2cFpK2iky04ISHhg48Y0CUPWWMOCddhOc+os1Sh
QIEOaSXOiIf7hpkdd+d8ebD4y/tdXx6u/XJ35ZfGVV+a1n95BFnH1i/v9n55
v/MLcd59e6LcR/+Bb30GvvLq/9qr31vPfh98+n8KGNASPqT1zLD2OMCILFJy
ijXQ/4gZSs0nhV7a/li77ef8NT/nbRxYsntwuenQYmvBYgda/kHJVCuUb6Tb
SKZa0pL2CZ5bIxh6aNRZ9zHR7qNjXBQvOYqf2ibsvHc5fIpcPdyJy4MnQL5a
xfh+axUDH3jIsYEbkZGRsC5ggWDTF+bGV80bv3cTllXQ6O4QRt4qKNfWCe9+
61ehwc3Z9U3QcO0CDQtTp73ro/YYvsvQoFfoo33W8KFFYhpuInSK/MQRYAgg
gJEybXiKtRejqw2uIs2W/InN2eM+ZY//mD3hXYb661T1Z4njGqPHFZ1QDzXV
tV4zfduKhZtXLF63cpmx8cpVq1evXr7k5FqZMj+l8oBfyv1HoKPNjqtU+Knm
+irnW9MyTARubBqaurZfvvGgV0cHMQpRhQIrHSUbDxYz8Hn0BRrNF2VfRko2
uQ2vOKZc6qVQ4iNfdly5wke13FulxGF4kZNsgbV4/gFahYXEM5P+bZGD6CUa
SCIgfhSCBrp0EDTgwgu5onOHFzO10GXmDMwzmju92eShRZosfNAiD4NGr9qk
CZz0X+FjFjtPWsQyLCW9ooMUpzJPdsbcbpiByhNUm6z7UrfoS+3CL3WLv9Qv
/tKwFDHkwTrIQDrqf6NXTfno2f+J7YBHTj/fdRhYYCZwy7x/k/V/n9j8p8n8
h1eHfnh/5L+fAga2hA9rvSDadmbIJ6//Pt/x71urfyxZP7Bs5+C8nUNz9w4r
2C9YaCVUbi+UYy16w1biuqVEirVEijkt1UQwaoNYmNMvZ9xGIW44yZy3pQVt
oDmY7YQiF9Bx2B0ud7hYAOJBAaSbKubo91UxJDdgIWBucDWLsnHjD9tB33NB
46sqaB+2TrqHRhcPOccW1y7DNPDYLnsHe1tzU889K+Is9T6lj4VcgtTlMDeo
5JzV54wfmsRpPoxybXSVaZEYKVBvL5zYVqjRWqgBtUwzUc58yFJ/mzHhReLY
u9HqxUFjrnv86rh26h6j2XsXTr5uIlISPK7Eb0x5wNiykHEVIeOqQ8YWB4zN
spO4ulW4YO3Ako0/P/YTa8sai5/v+Cwh4uhGwqqRoPAulPbQV6zKnlYYOCr/
+Ih8L7UCN/l8Z5lcR6VcZ4VsO7GbFgpVe4c92/ff9sgBCBr10wlo6AIl0CuB
CxIjuKlRzsINKhkgm7A6nbYKTfJYauzZIA+4J4CATnkmDkwsJbaKlGmh10o9
kifUtrJSjc6sxoApmaIiZXJnzTKVVDmAG01Lvzxc9eWeMYIGvjBAahd9ubXg
y9MNjGfr2s4IPbHo/8BqaJXNkCwXiUJX6dLDtHxrkcK9Qwv3DGo0+fGB6Q+P
rH946fDD64M/vjrwf01G/1e9/MfGAwMaHARrnMUKbEThf4skE6FMM8GbZkJ5
NsJpVuKZ9pIpFuKpVrQ0E8GIbZKn3H454zHyotuoK05SUZYifqul7G0s4YME
6CDoQQHEjQIIlYQQAOl5FePztSrGHz7teF4QrIXTxDR1yvSFzaK8zRu/XxO2
u31q3W1u7ck5jN21TvoCGgG9gYa9LUDDe++KXG+dT2mj6SVa5EOT2gRB9gcN
mFU5xQ2UhOixnFOshTyTJRoAECAJvVTr//N23mFRnN3f/+f3JFGsMLB9l96r
dHuJJlFjSyxYkd57Z2GXpYooRRRFpAhSFOy9KyoqSG/2rrEk9ga78t733DOz
QxHRJ8+b6772GhDMgjuf/Z5zvueczhpbcDou20CGVI95f9HmbaXF6zOWL05a
Pj5g3phvenuL5uNCrRvZplc3mrdvtK3LtGldZ9G2waItQ6dhDadOxHuYhj3b
a/H+0sTP9XjyAa0zhuuEFkobJ3Qc1n5ZoPpoA+9qvMrlGPXabOuqZJOqFN1z
iRqVCZpnIziVYr1zEartHsOfCRU6S0fIaqzAM8fVxXg5N1omdjXi3ICfHEc6
NMaQFohJ8p8aObqh3cucMH1dGvW52hJatsAjODXW4EDHF7i4Yvu5bgx82vCM
wZvL8C2K6NeLCNPU3fVNrHqfTPCK2ul8Y/rn6zO7Xnp13VgEQQHEBjw4N1rn
wE+2zpBdsX0R88M1H4UbocMviNnHonhnk7kXE1VrEhlXotlVwUrn/RSr3IbW
uA9q9vzhov2gGvtBjZ5DbgQNuSEe2bZKuSWZWRPLPh/FORrC3uejcjSQcUrI
PBfDPiXin4/ln47iHPFSynPjb0syLk0x3ZNitCeOVxSgnL5CWySKiktMBK+l
+KQkHCBJFEAoETKwKCbtm6IYwA009IPiBjJ9UWZRZN4A9xo1sad3B/3/CBpf
snX1s+75qwbyL9Vb/zto9Gw86asvvi9oiKLEIf4ZfnZXsie8P2OOK40J8l4G
1LVNmA9J2zNlKKKCd7QokC6/yUSirBF3X9eNhh6nurEwnLlkBVMil2zen7N4
e8b8wynjjrMmHWeMPhzT+3BE58NR/acVpn/vNvhnn/HLo6NenJrwtmrix6bf
pO2/IkkPB2vfmw+XKLVN7Thu+CaP9yBH9doaXkO0SlWKzoW1GseiBSeS9M6u
MT4dp3siSv10ANYcwH4a/GPnjhEgqJfd+p2ABqkuKFxQAYtcAFB9YVA24NuW
L5l+rjKG57wRfoxl4FSNkl00l1VbyS5b4uZSG3ALw1MLfnXj4AEKpwH//SBu
wN/PWCJCkec6SG60kaVYatsRhMkvXXf/7Hri1HV7adedFTC5cXNJ183FXdcW
QHrcW9L1ZNmnCrV7Lv+pdxraIGReSeAeFqoei+WdiuOfieGfjudXRTEvR2Kn
3EeecBx2xm3YJb+hNf5DzvkPOx+o2CpSupasfCVOuTqRcTaCCdTFUSF/tx/j
YCjvZAL3rIR/RsI/FcU+6KWY48LblmBYmmSyK8WkIo671RNLWWYiEkeDFxII
dQE9vhsg3xrFAG6AVzvOjRxwIxQUFNDNokeOHKG40XtiD+DG/64I+9WERj+2
rt5Z0G+d8vetJo1+u9V6DtMgZv3Fx4uiIqNC/Df6/nGzdPSn6nEymHL8mbQb
TSA6p1CQjtyPUHjbdK8vjJd7G6gPG6l3UtywRPV9A4aAGx9qkjHSGuvOGpvO
2jH4/WUL77Vqa+klC9klc3APggt4wCdrrDuuz5a1/iy7M092cya4x6Ed+vYc
aevPHadHvc7jPlrPblmnUSdhV0dwzqYbnciwPBTGPxLMPRameiSIczRIrdpT
+an/j53FCrIr1vCZ3JkD1QUiBhQe40lujIePeIqDYEXjOKKt7Irl54sAFAbw
nNX7fEobHNkJTdlJLVmloazKTAaeNiBGtTX8WerG4mcMVBp1cEoGFBt1o4lf
Qj1JDNS2RnEDX5dGWDebSSMHVVKB11O7rv/e9Xhp1yP7rqdOXc+cux7BnEbX
I6eu+yu63nhL2+e+Xv1T/bIfm9wUr8TqXIzlHhBpHI3mH07gnIxTO5XMPyoS
HIvhnQxjVPooVXoOPe057KSP4gU/GL/Uhw1vSVBpTmJdSlK5EKtyNJwFuLEz
kFMRzD0Qwz0Rzz8Zwz8RyT7grbjJkVuUYFAcr18Wq1cm5uR7YMkrRonEIkl8
nCQ+PjYBnASKIThAKIZ8axST2m8U040b4HZA3AA3C8UNyvQFbro+zRv/iyJs
j4TGl2xd/XTE/69KJ1+DRq9utS9AIy4WQiPYP8v3j9sVYz9Vj5W1oez9VCIj
h9Qy5X2CwTjJDXhhSXRMyG0M4+WWSIoq9EN5n+AXjMVbwMbKiD+aCG8ochwN
nEhTawMv4J07Gs8PjCaGUN3/E6Y1rv3WcdrsbR4IYZi31rBqEgXnIxhnIjWO
JRkcCFHfH6KxP5h/0Idx0JtV5Trise+gzi0/SWttZLdmQSy0TOqChddxBC4Q
MQBJwOdb8D9Ff3TFsqt61OcLhvAgVgBKAFYcUZUe4kHXx1E16Ukd2TljHBpW
EBo1EH0QGg3jgNIg4jVwED0a8Z+0DiVDbOCps5ULG/DbJtrYJxNVXXSu4gsZ
YYwDWDe5q3Vq183ZXddndN2cBQuyjxZ3PV3Z9dfSLhAMVprcdfuh0WVkY7DK
5c2TL8Syy8MEh8P4J5I4h+JUjyfwTyZrnlzFOxnDPRSscsgHO+mLXQhWPOGn
eMBT6UIgdkWsfEWCgejmeIzKvgjmgVDuvgjVkhDWnnD+wQTecRH/WBRnr5vi
hhXcPLFOSbxOuURQKmRvcsMSVlhHi0UxcbExcXE4Pf4FgHw1igGvcPBSx7mR
DW4EcEfQTeb9m77oHfT/YhG2zz61gWRBv2og/19Do1fjST9KI04sDI8O9M72
nXt/l+2n2gkQGjAFOpl4raIou30qYVlE/uTGcUTAgt6CAUNgMhCRxJZwE1G1
hmaatbKJVB2Ee2ESUY5EoQ36LiIPScY71LwaopF8DJGWbJkouzlLWmvbUcZ8
kqJyNZHRmMg6K+SeDFQ5GqV5MIC9y4u5y5+zK4i/14N9wVn5oeePnzb+IL1k
if5+nBsTUbEVD0xAwDIRx8XErlacGA1jumosIDGqjD5X6n0+DXChLTuuKTuq
Do70sEB6kAfPETXpcS3pWUM4jwsoDUAJxA1wDXExRoZ01BU8z4OSG+jnQg3y
dbbyKi3awYqKVugCN37Dg9ABPtkwtqtudNeVMV114wAi4GMjwMikrvZfu1qm
dDVOkt394+1m7Kbb4BYvxaaQYefzfzkRzdkeyj0QxAehyq5Y/pF4jYPJgsPx
/KPxgr1C7qEQ5sFA5YP+2OEA7FSA8qkA7Hig4mUJszoJSAvOEbHK7lDWrjDB
XjF/R7T6TjH3SCz/sJCz23X4+kVYrlC1LEa9PI6z1Vd5gysWu2JSlFgkjpXg
JxYBhGRIT4D8K2kQ8NoGcQrOjY10bvQ2i/5/M2/0dmh8NaHRfxb0m6b8DcTZ
NQA7aB998fQJPOAfNDoqQhjsn+0z++khm46aMTLUpIA2krfSyiVUEgNVUmjr
RAnJAbgBQv4ac5geRB9ewQdMoQMgg+56eT8m2fHRNI6Q6ygCahwnr18QBU0U
GeFJyDpreaNH/Wjp1V87T+i8Wad4U4zVilXOi1hHA1lHfJl7gtQqAjUq/LUq
fNXLvdWPOajcdRr0fu0P0vMmqJvsc+MYwq0BAIKqJzApin9YbwuvAQOrzWEw
Uqn/+YyuDAQjxzVkx9SlQGMAYhzidR7gSA/xOw9y4VzfM3rSC6YycAArruDE
qIa5UCgw4CMiCZAfY4gsR91oeYSCVEfjWDk2UfaVqt2gffGokoXLua5Lo7pq
bLpqgRAaDdFRbQMfL1mAx8/tv3e2z/hb8mO76/AmX8Ur4pGVW2z2hbLKo7i7
A/iHxPxyCW9fjPq+BP6BeLWDyWqHE3n7wjnlwYyDwdixMOahYOa+AOxoEFYZ
zTqTxDop4e+NVCkLYewI5e+KUitN0Ngh4u2N5R+I4O7xGJE1b2hhGKc0ml8k
5OZ6Ka93wMTLp0aJRNExMSIJOBKxhA4QSoTEUwzBAUKJkCRKhOAA6aOY2yOK
AegAoQrOjQ3gxY8PUc9BZlGKG/QJgT24QTdv/FtF2D4TGn02tw48C/od9dav
QuMLdtC+W1x7QCNGEhMdLRQFe2/x/v3vQ5ad9ROhb5BQFz8TFz0YQvmf5anC
SYT8QPELCtUhNCwhRuqsiQ+psTNEQXMyQaTWyXK7AjXZsoleoyEJg3aHof7x
5vHERcukT2Uqj2IV6yOUK0NUjgYw9nkx9nqwyny5xQ5YqQOjzJG5d4XitZUK
ryX/6QQ6AfyAOKwImYGSGAAXSHgQUYkVfPKXgMww/XxGT3ZKRwZikOOanUfU
Og8LOg/h5wDgBhdeHFbrPKYpPWMgrRolBXEKymygFEcNnhEFAAHcwPOiuPaw
hXOAUWYDJY2R9iDKKGRaA0WIKKdBlFQmE78EoDeqLbrqx8BTawsf68D1OPhY
N+Zz2y8dp42fhP7Y6j60OUixIQ47m22xN5yxI4q9w4+3P5q/I4a9M0qwO4a/
M0Fj7yrVA/H8nSL+zkjW7mDG3gjWrgjW7kCVg8GsQ5HsC8mcs4mq+yLZZaEq
RWG8nUK1nYlqpZGCCjFvn5C7y1tp80KFTe7MoihOfgBro7vKOkcVof2MyOio
KLE4GpwYMQkQnCHfAJABRjF9cmNLXl7fZtGvmjf++yLslxIafdq6+jGQD6Tr
5F8yafQJjbR+oCGBdtCQ2CD3XK+ZL09Yd9aDaBoPT+ixCeU4kndaTSKaL6gC
Csra9WBIA+VhsMF1CM4QlAapsyWGzyDrVNtkuZIhmq3IxAhFDKKqa4u/NdtS
DWVdeP+pdDfrXvjw6iClY77Yfi/GLjfGTk9+kadW4Upemb3K/mXDWpcPeh33
f7LTOkBKwd4TvEMERiKobtI8Xg4NGHNZwSoqIAaAwDkj6Sld6XFNGIYc1+o8
ot55SBXnBg9y47Bq5zGNzhO6cERhpSHkxnlTSAwAikuWMKNbjSsNop5iA5VG
/VhcctgSegMVYSnXKEqHIpZSzSno34JosEUZ1NEwTmkc39UAIilkOxkLGQge
G8bK7sz9uEvwMGBQi9uQWqFyTYzyqU0WFWGsEiGnLJC/V8jfEcksAQIjQrAn
WX1nvMaeJN2KRP2KWMHeaF5FJKc0jFMeyNwbxtkdwTkq5hyL5x8S8SvEzAIh
b7tQvTxeUBKpuj2GtzuCWxGovNVxxCYf5Tx/Vo4nM8tNJX2lcoTj7MioKKFI
JITt06J+AEJFMd+dBgHcAC9vnBuZ4JUPInTKZA5uFsQNyvSFzBuIG73NG/99
Ebb/hEafWdB+xmj07jr5t+ut3wkN8M8YHRGaFOC8LWTmq5NWnY2T4fsaNDD/
+vnaNLIn4mcirUG9hlsmEUkPdLNTToNWeixDa9ZAxRTKCoWCl1orgieU9mim
eS9bSFVDNYPUkzNnkG4hesfIPtNaa9kZ/TclvHspI+9ksKqCsJPuSkfc2Ad9
lQ/bD77oNexB0ojOfaqwekJMyoL/R4IVeKWVwAhSMrBWAmSGGYw4Ko2k4JzW
6wTcOKnTeUIbXHQe5ENcAHTACzX4R6f1pGcNpHhGVHrJUoqSouCAC6A36sYS
YgMPUnD/xhjo5ai1JfIbqGZN/RKoZnZC400mJB8VGOIDPfBnDp7/BEiPRpwb
TXgxCGCnzvZd3vC7QQrNPsMbopUuRSqd2GS5PZxTFssrCeTvCuWVBjK3BjFL
I9QqkjTKE7R3rjatSDHcs0p7R6x6eYxgRxR3Zxhnu5C3S8Q9GMM7BMIZiXpF
NDtPyCkJVy2J4W+LViuK4u4I4mwPYJb4Kxf6MzZ7MTe6MbNcGalLGKFOf0RE
CYHkiIRCFh0CIFHfC5A+0yCAG+CFjXMjA7zmM7MIbtBN5j0mBPYwff2LHfRf
6lP7pizoV0snveut/zY00ntDgzZMIzEGvBuEBa0KcDq86tc3Jy2kzUBX/AJx
gbiBJAd6uaJ8PvX2R3ZNEqF3M20UDDUQBr3mW2m5Eeo2pxZzICkCAHLFikil
NpI0oMQGilzQnYK+nTZaswv6RvB6Jfh7qsw6K00+ndD/eEzvzUG9O/k6f23X
e3vM4MMpo45KE2nNaLlli4yACIGBo4PQM7U2n2uA0rCA1osLkBsQGufhY+dJ
HSlQFODxpHbnEVWIi6Ma8OIIzo0zeI8Y3FBgJa22BtyQQrFhQdRhYWyCJzeA
3gDEAI+oJISqJ3Lj+ng5NonBfZO7jwuWx2uEBx5WfCZS9IMZXajfJgNp92qr
4E7csObwkZfjWRcilI5uti0OZpfF80oDuDsC2IU+rNxARmGExvYkre0JOhUp
ZhVrTCpWm1Ss0i9P0twu5u+I4pWCcEbM3yMRHEoQ7I9VqxBy8qNYeUH8bUJe
frRmXjS3LJhTEswt8mfn+bA3ujA2ODHXO6qssWMFeiwPFwoBOiKiosD5CkBi
6AD5Uh41vi+A9MkNucm8h1m0H/MG1UH/3UXYASY0BpIF7T1755tKJ98IjZ52
0C/3xSfF4XbQqLDAtX7La7MnvL+Ad6sBaFz/jUjaE/1TpMygxry0kmKDmPcy
Sd5ULg9SJpJNXhQ3aJqkWxPoOCIlCN7fq/FpeHDmnrW8mFsv1wbybyGgAf8U
5i1hjmIi/OIr4P0dxgXSi+Yfqse+qfvtffPMjuap0LRWT7aJIfSR8zOJOw7c
eqh2U48HDkASgOAC3PJVo2Qw6DCBDV/gnDHAuaENDwDFCS34IYhfTulBaFww
w30mKDwxJ5MbVrgLBT91Y5D7i7BwoKorMrQ0kiN9qB8TBW7Ubw8lSyl64OjA
f3A8LdNKogM5T1Bd+7LFh8MGD9YrX0sccXWV4iXh0MM5Y4oCmWVxvDI/Zok3
M9eTmx3AzgvXLE3U3ZmkszNJf8dqo+0ppjvWmpUl65XFa5eKBSXR4PAqxIL9
ceo7JYIdkby8CMbmQF5eCC9PrLMFaI9ATlEgF0BjszdnozszfQVrnb3K6kVc
fx+PsMiIsMjIcCE4QoohOEAohiCAiEiAiL8xj5oIXszgrRDnRhrgBnjxI258
1SxK5wZl3vhvOui/mtD4aha0/9JJj1a1AdZbv8ND/jVoiIXhwWl+y1oKxnw4
byNt/RkHxTQCF4Rbg8rITen2Gm4mB7y0TpK/A1KJCMopStnOCZfjJPkwPaql
hajAkvMrwG0LCzEWeCHGirBiImcIjGVoez0ax5GBxgSUoCAHbMJqC7hVO1um
frr956d7drLmidInK6TPHeAc7xZyWBYZBcDvpVpWG5Dxeyy802F8YQmdZuAA
IMAABI9WICV0O0/hqQx0DcITKDNMpRctpJRhAxAD2jZwpyiKU66gUAX324NY
CWVEa22pXh5ChoGftJmcpUPvqEWCRB6qwF8j0a5LqI6JlNkV/VYBQj+cNPpr
m/qjLYzbW5g31w5p3qB2PFyxTMwp9VEudFfO9+Vlh3Nzw1SLE42Lk3T2rtIp
T9LfnmxSnmJautqwJFGvSKJeGKNaIuYD7VEuFpRL+OXh3PwIlY2+3Gw/fp5Y
e3MopzCAk+vF3uAIZAY4jIwVjPSVjIT5Aj8/n9CI8NCICJweXwfId6RBADdA
nIJzYy3gBnjZ49yQm8wLCgoobvQwfX3JvPEdRdgBJjS+mgX9aumkR731X7SD
9oZG9754CA046E8sEkaEpvotay8a/Z6CBkxo4OiQN12Sc6XkQcdkeTBCP829
5tw2k2+ddPmBUp3UbAp6irWFFCGUkQylT4H8QFN/UUqkgSzREsUUwmIhnwBM
zdqSe9rxXrwb04lwhpZ9JVygqJkd3sjjZChdiXIRuE8V7m8C6ABxCtAb5006
zxrCzCcQHgAXgBtAZgCYAGiA8ATENYAPCBeXLIlrpFvgNZkaBayAOQ3kahst
97wh9Mnbf8bL++ZQxoMw3ZGwbRxHVI1RahcwEBaGxnRRv/wr1p2Vxu+P6n08
qv3+kPbLcv7DUvXalOHHoxWLPbECN0aeD69QopoXwS+N09+eZFSxyqAiUWdn
ok5pon5pgm5xol5pvPbWWM3CGM1tYo1iscauOP5OIW9LsPJGL/ZGH35OlOam
YE6+DxvEJmnLmGnLmRnLGenLlVNXqMTO1/bz9w0JD8NPOAIIyRAEkMj/EiCA
GyBUobgBXvA4N6jmFLnJnG766sENunnj+zroB57QGIiBvP+uk9711v8FNHoN
0yAGhIrE0cLwkHT/5TdLbT9CDzk+TAOEJwQ3pso7tYlUxmQylUFri2il5tnS
mlbk/ePj5CIEpTfpr390gaBBlzF0PYPI0EDLgQB6QHRYyQ+K8XFvJ7EKpJG0
tVPv4GhSXwsZMXWHXhdleQVfjGocKAtRNwb522GGE9ADqQ7AjSozqD2AugD0
OGvQiRIaIJABB3wByoKiJAZlLweRDjKAIW4gaKDgCy1nbCYHd1AmFmr+BjWR
GHyGSDRNlgcpABrIZwKiLXimUOVj4lvqbMET66g07jhn0nHO7NMZoycVujez
lU94D9vqqpTrxs7zZxfHaOeJBLsS1EBUUp5osDPJaFeiDjg749TLE7SKY7W3
xWvlx2nlijRLYrW2S3jbw3nZ/tgGN9YGN+5moWZOKKvAj71uhcoaO8YaO5X0
5Sppy5TXLsPEC/QAN4JCQ4PDwAkDZyAA+ZY0CJ0bKXRu0E3mPSaLfsn01WP9
wcCLsAOxdfWfBe2/62Qg9dZ/ERrdu9VoSiM+FvwLREaErvNZcq/cEkKj/Rcc
GiQ3YC6UZiknB1eSHtEpcuFB5TzlRVLynpULj/HdpuERhVqqbkuXK93Tqs0T
aHcQWYhBoUqdNZEDQfFLrTWRHkHyg0qDUN4P+RAtOp0mEzcgtSERHxgi50b9
OKL2ge79y1YwyQmIAfgApAVgBTgwWYpD4yJ+gCyphc01xDeC2ATlQlGKo3EC
YdgAdILcGEN0q8lnA44nsisopXPFUnbOTHrcpPOkmezsqM8Xrbqlj2BSyBZ6
1ZDTFTlaqeYa5JQDP2bDWBkSS5fM4QSDC2Yv9hu0iRUOOQ4rcRi52YufF80F
0UcJEBJJunuSNXfFq++M165YZVyeqF2RqF0mUSsTqxZJtHJjwNEtitXcJuJt
C+Ju8sFAPJLpxN0UoZkdwtnixcywZ662Y65ZzEhbppK2BFuzBBP+aeTr7xsY
EhIUik6fAAn/boAAbgDZjHMjGbzIga7GuUE1p2TTudHb9NWPeWPgHfTfmgX9
0hiNfkonA6+3/pfQ6NXi2m1AqBj3aWT4LHtQYf7x0mhZK+7KuIbLDFRypdKh
xIfT5NxA9uaeVZIJn8nypdz5SXm0GknnJ7UOTG78oOVGmmnJQNjyOZGcdjVe
HrxQ+RP8bZQgBsp+IDOnvKRLAoQS/+h7+1BKZLIRT2vgEQreOVI3BjeBj0Pc
gDP0amxgwELkOkxxVlhAjKA+O/A1UGlY4bQZQ8iVGjIXCl2jtvjqpbGoLQUf
uEH+LAi29eS8DvRzVRl1HDX7tNfw/V7jj7sM3h4w/3jUovMsUFzWpKyCIO2q
syVzwuQwQ1yEED8v+Ekbx8EtLTVW0ivw+X+6aP0sa3h90LDypcOz7bH1DuxC
kWpxFGu7iFsu0aiIVa2IV6+IUyuL1d2RYFCWZFQcr1EWq7ZVrJ4v1iqINSyK
1d4h4W8L423ywDa6MDJXcjeGqW/0YW5yZ6YvY6TYMVOXM8BZC7hhh4XOt/T1
9wsIDgoIDg4MASeEZMhXAEKlQXCAUFFMND2P2g836M0pfZpFe5u+KPPGN3XQ
f0cWdCClk96tavR6a/8mjf495N/SF99zqrAkMiTVb+WTvaNg4wk9EXqNzGlc
x68plxdVhyW4MVV+6zXT7+gJcm6glF0tEOq2n8G78Fkz6SmzzjMW4N3z8wUg
EmyISihKtxLSgpyJR9GG6tGQ28DGE0nCJnoeA7/XEDcoEQIN7VS/GzkGh0gw
0tCB/uZGshemgcpsjEZdq/CiBhcbABooVIG5Div8whIeiBH8M+AL4Nfg3KAO
0c87miijoMEjKEgB3KO0FtGDM5pwx4Hnf9G446D+x3KtdyX6z7cb/l1u8GKn
4Yv9pm+OWHQcMZOdH0XhEXrg5Z3+46geXjJrPYUY5VGPDyuosX69T+te/OBT
DiO3LB250Ym5biWW76eS7alU6DeyyAsri1Apl/AqklR3xGkWSrQL44y2JRsX
SjQKY9SKxOp5EoNiiU5JDL8wmJvlBpijnLGMmxWquimEm+3DSV3KTFnMSl2q
snax8pqlWPIiLGDhZB9/P/+gQP+gIJweXwJI6LcCBKADRCsxcYgbSYn4/FKc
G/LmFLrJvIfpC3Gjx8SebzJv9JnQ6CcLSk9ofCkL2k/ppM9667/n7OpvmAaa
KhwfEbQ7Ye4/+407asfLoLPrV6LkihKhSGmAOIUITyh60NDRTkUoNI8off0Q
rIRafjo15t1xm9cHrV8eNH+50/Dlbr1/tuu/Ltf7WK7zaY9ex2ET6Ukg+G2I
SitaR4IqLCjGbyA3hdFlORVuICXfTA4OkhdPbcncKW4FkftR8SwBpXaaJ5C1
Y2qsHzqAIRMI1YGyo+iuxyunMAbBzRhwE9xl3JiBawwpil8ANIAmAaBoGC9r
miRHB4QP/km8FQUlRYk6Efrp6CPQwbO9bPb5jEHHQYP32zXe5Gs+L9F7WqD3
sFD/4XbDv3aYPNtp+WKHyaddutLjRpCQCBooL0pNNcTRIXeZ4kyGuw+uTf90
3vwfIDZchhR7MDc5KG1YoZy2ePiGhUPXLxi8afGg7EUK4OQ4jdgqxCAcYjSK
4/QLkkzzY3WKYlQBOnJEukVinSIxP8+fs94Zy1imnLaClxmisSGYs9GDk7oM
cAPoDZUUOyxlCZa4EPNd8DPghm9AgF8gOIE4QCiGIIAEUwChREi/eVRUiIkC
ekMkQdxIANwAr3OcG6m9uNHNZN7DLIq40du88dUi7JcSGv1kQekd8V8ykPco
nfQYDdpnvfX/AzRAeJIQEXAoefqro2ad9RNkbcin8Sscno/MXSgkuUYWYalE
RzvdJjqFSOZTNrAWcuw2WUIFQPh40OzlzlHPyvUebTV6mKt5b736vUzVu+nc
+2nsx2nM51mcVwWst9v4b8t1P+wz7ThsJK00/3zOBL+VxhOZhx4zfulDvxvJ
mTZUiNRCLlWnFhDU4yuVL48immLAI7qmNoYQGmkidEY1420gjbhLqnkSPtIQ
n2qI5AfiBiqsXLElDi4tpFdGw4NkBmpuraNzYyzBDTjcbDzxdyKlAblhLe8x
QQc8t0tmsmP6nXu0Ppapvy7SeF6k+VeR3v1c7TsbdW/lGN0vMnq8zeBJqeGL
7XqfdunJTht01Vp3ySXHBKLxH/bwUgkc1Ko8VvrXss723z7uVLkVMGSPI5bj
juW4KGXaKabMH7x2xuDk2Qrpdkrpf2Jr52Kps4ZtmPfTZvcRuRFcgI6cGMPc
OIOCOPUisVpOtPbWaJ2t0dwcf26mA5a6TCXVgbcuTCczmLvBlb12KXO1HYhQ
lNcsU05Zohy/APNe8IuXr4+Pv79vADp9A4QSIQMESD/coJpTcLNoNmUy/6rp
q4d5o58ibJ8L4r+UBaUnNAZiIO+ndPKleuu/Co3VPaEhiUkIDziz/pdXR0w6
Gybi0JhGc3ZNI4MU2idhYYXkSftUOSiojCgx25/WAl83uvP4qLf7DF4W6zzY
ontzg9rVdK3WVfymRNX6eEG9iNsYzWqNYl0TMW9FKd4Xj/wrBXuWofRqM+t9
vqCznPf5iBq8x4kWFbLsS90CVBoEFRfQl9GTn1SgRNgwRhNfiWox4G8Gb+Xg
oBwI8rqjAihKTsLO/fEEQPAEKTEoAyZIcSCgrjQECnyYhrRuLNIYgB4wrmme
DL8FIII4E3BcjEODVXHDhg0cK1pnS5utQQot8Ewum8lO6HXu1vhYovq+UPVZ
nsb9Aq072ZrXN+m2p2m0Z2pfz9O/tdngfo7u0wKdDwWCz6c04RiQOmvIDaoX
Dw1dp/oNEfObxkkfLe48ofk8aciF5UNLvJgFkVie8/C0uYNif1WInzF8rQuW
HsDP8OenenHXOnFT5mCZ8xSyfZS2RnCzo7WzYw23xGvli1Szo7Rzo/S2CHmb
fLnpjtia5cw1DryMUIOMAE6mEzNlGWv1EuYaGKQoJy/G4uZjHgunA254+/l6
+/kB4dEbICRD+gRI32kQwA28UQ5xIw5wA7zIcW5QTW3y5pQeE4l7c+M7zBuI
G/SdBVRCo38vaJ9Z0G8qnXyvs+ur0FjTY5gGEZ5IJDFhgdvjZr04Mqqzbvxn
NIEHHfoCDsSN67TCCpX0oDfDos6U9p97pDhkNaM7jpq/2qv/bKvG/fX8thTV
KwlqF+MEF4S8yihBZSS3MpRzLoR9JphzPph12Ve53kep1X/kTb8hT4IV3q36
UZb/4+dTWlB7UyZwNNkDvf5bJslBId8vRplUyQpO83h53pVSLEiHoA41RAzK
SwZECBoLTE3no7QHvjseKQRCdVRbIQMGzg15FzwxiqcJJovgCHd4JsAPwQXE
yDj4N8BJRLa4R3Q00cLWTNaPUIYTPJ9zBtL96p9KBB8Kec9zNR7nadzO1GzL
UG1ao9W0RrNujWZDml5Lms6tdM0nafwP2cqyo1pd1eZQcjSMJtIa0Pk2ARlf
iV8XPqBD9mBh5yXzt7mKba6Dip2VtgUz8yOYhSsUVk8fJJ6rmOKokubFTvPl
ZwTw0oM0MoJ4qW68VX9g65ePyAnhZEeqbxQbZ0u0cqPVsoWamyN1siO4WZ7c
NCds9TL2mpXc9FDDdD9OhgMQGyrJdsyUJYyUpYxVdphknrKr3VxPHx+ADi9f
X5we/y1AADr64QbV1EZvTqGbRfs0ffU2b3y1gx7pDcSNPhed9OkFHUgWtP96
a/8mje+CxtovQUMSHy+KDNueOPPq7p8/NP4Ch2lADvQqs8qFxy/duEG5v4iu
WNJYjmBCdlfJqkd/OmL5aq/es0KNu5n81iR2jYh9Npx3PIRzLJB7OJB9xId9
2Jd92Jt9yId12Jt1woN50o1x1gVrcRz2JHDQ+5QfpYfVYaWAGt6FsiW0Fz+t
8kLebpS6aCZ3FDaRS9Wp6gmVx0AuU0qxICtIlTFEx2VzECDgw8rIPQXQ/m1L
3PVIeyDvaC2ZJqUMHuCPCFaMl6HtDw14bNKNOTbEvDJEDMoXh1IQSBoBiFXq
duxQ+1jI+TtH7Um+2t11Gu1rOI0pWtWJapfjtC7F61yO16hPVG9LFjxNZH7M
Ufp8RpuIU9DodcIxO6GLqlXhaWfZ7VnShvEfy/kPIwfvXTZsWyi7IIZVHMLO
WaCQMHdksgt3rScn1Rtwg5fhByQHLyMQXPDWOHFSV2Ibg9nZ4apZUUabYnQ2
R6tnR2luDNfKCuVlenBTnZWTl7BX23PTg3RSPdlpDqyUpUzAjdVLGKsWM5IW
YuJ5TKelCzy8vT190OkbICRD+gRIjzxqKOBGuBBxQywC74ZxceAVjnND3pzS
w2Tev1m0h3ljgEVYQBUUpyC9gbjxpe1IfRrI+xnY1X/pZGAmje9pce0BDXGs
ZGvkvNYiq1fN8zru/Cm7NUs+KgplPhE3UKLjGpXx+I34MspzLs+L/kyMg2jH
c2611tLz1h/3j/pnn8GzQs1767hNiexL4cwzwYxjfqx9Ppw9nsydrqydLqyd
bvBxtwtjlxNzjxPjwErlSgela75D/lkz9NMBdUCez40T4QSbJnIVC1FAmSSf
xNs8QZ47bSO3sVMMaSbLwU3jiEolVT2hwhnCbYLbJGpxPyo41RYEQMAFYAg8
o2AKAsYXY4jbv5bofCdkBnUIvOBjuxrxhAkawoPmHEKwkLM1mibIfzRUvkGa
CumNK5ayQxqfinkvN/GeZvPvr9O4tprblKxWHat2Pk7jnFBwNlrrnFjjoki1
WcR7HjVCthsD30JuZyAGnxL9KSisQ9HlzRnS9mmfDmm/XD38nOPwIg9OUTQn
TyIo9GOtn6eQbIfBwMRPkOrPAxfp/tw0oDdAwALQ4S/IcGdnBnA2hqptEBpk
iQw2irSA3sgKUd0Qwl/nwlnrCPXGansO4MZaD07qCmbyYmbyEtbqpawkO0bi
QixyLtfBfom7l6e7l5eHt9c3AiSgN0AAN0Cc0hc3VvXiRhadG70nBNJNXz3M
GwMpwqLyK6q9ojgF6Q3EjS+tVPtS6aSfVrX/hUmjf2gA/QagAX6xohhxXvCs
2xt03p0d13l3vvTpcukrN9mzFbI7c+Q98ig8QbhAa0av/0poErnzfGq3muw1
fGxgva307KgPu83+LtN9mKt2O4PbEs+simAe92Mc9FDe66FS4c4pdWKUrGSV
OLKKVzJKVzJLVzBKVzB32KucsR/ZGjDk2dqh7/drdF60xtOJE4lUQzM5r0be
8EJZTMlSCFFIpY1Mp/e8yJvXSEs8+kYkmVqRP4RcigRtotYQGuAA4QEYctEU
oENWYwkXFlSjIeS4NwOfhAwzFaiVFR+hjPIhqIyLmz/HEzNC8S/DsygkN6jy
DVV+IsrQsGb9+bjGp0LWm3XMh+lq11exWxJ51SLV80L26VC1k+H8U2GCU0K1
82H820GKH7MGfT6nTzjkETdaJxOTUVvJXnv8H0t6e07naYM32ayb/j8VLx6Z
I9TLjeEWCgWbXLD0uQopS7F0H3a6Pz81SHWtN5QZaX6CjCDADbV1Qbz1QeCa
tz5Mc32kwfpowyyRziahxoZQ1cwgfrozJ8UeS7JjJ6/kpPprrvXirLFnA26s
sgPoYCYsUolbgIXOETisWOzm6eHm6YnT44sAIRnSH0C6cyMacEMskUjiCW5Q
TW3dm1O6TSTuwY1+zBtfLcL25gb4RlRDQXoDcaOf2TsDrLcOyKTxP4CGODYW
cGND4Pzm1VpPdxi/O2recdpa2jQV0uNvR+lbL9nfK2X3/iBExY3p5PlN7vsi
shy0KAaFOZAbU6TnLD7sNnpeqH13g1r7Gn5THPNiKPOYP3Ovq0q5g3KJA7bN
ibV1hcrW5cwCe2bhcgY8SxjbljKOrRx5LWLos2yld/s1Oi7ZSOthTgDeWS0k
MajqKl3V092klFGcXo3ttqGg21J1/C2YVk1G2oPqtqM2psFiB16IuTRKdtlc
dtEMHKBAZJctZOAz1ThJwEG7TuDyAlxCEBQaR2yKR38PWsRG2GVJrMm5MV6e
sUEekiqjzgrOy7WM+/HM9jh2rZB/Tsg+Fco77s05GKx6xJ9/JEi13pfxKnWw
7JgmnLmBohJUfsWJQbaoILGBb8ittnpXqPo4fsSFFYO3ODE3xdlsjhQUBHPW
OQ1Pnq2weimW5s5I9+Wl+qumenNTfYDkEKwLFKT78TKC+esCVDNCBevDNdeH
a2dGGq6P1suK0NgQLFgHxAmgxDIs0Y4DwpxUP/U1bpzVS1irFrMSFjET7Rix
87GYP7CAGdoODitcPdzx49EnQEiG9AkQPxpAIDeCw7pzIxZxI7EXN9bTudHb
LEo3ffUwbwywgx5EMci5gWwb/XMDhSf9d53009/6JZPGtzq7+ocGnCpMh4ZE
EiUWrQlY0pCk8XCb4bNdRs8rjF8dMXt/wryzylba/ov0HyfpC+fPN2dCFABE
gItbM4G4xff4/NoNF/RxHEiHgNfnKZ13W3gPU4HM4NdEsc8HM+EkTzeVHY7K
25Yr5y/F8u2ZucsYuUvBUcmzU8lZwthqxzhur9gWOeR5rvL7o/oQGnj1gXBQ
UIvJmsbL9QAFjWZylilVxGmZKI8+6AFLCzn9m+p8acNXM6O3eIob1E1NDPOc
QIz3vGIND+AD4EaViewS/lhlCs8lcxkewhAqopl82tRgrhZ8wDgxFpVa9jqR
YAslfpAJjZhKhD/PxjGyI2rv1gy7F6nYGMWrCmWdCOMc9uUddGPs9VXd5ye4
6KnyKH5Ix07WZ7QcCs1dR0FKC8RFF5X8aZssfeMprR/zvlznSTqrPWRIyfyR
eZFGW+PNt4bys4IY6+wVk+cMTV6OrXVRSfdhpQcI1gaorvHhpQN0gCAlUJDh
J1gXLEiP0FgfqZkZor4uRC8zSh9yIwh+TcpydtIyLH4RJ8mTt8ZHkOLOBUoj
0Y4Zv5ARt0BF/CcWPQvzmWGw0tHB2c3NxR0c9x4AIRkyEID4d+eGEHAjmsaN
3k1tPSaZ9+YGfWIPMm980/oDekkFOTdQBRaVX5FhA8UpSG+gCAXlNL6j3vol
k8a/Ag00gacHNKJjYoQiUbLv0tokrXtbDZ7uNnlUZvy4wuRpudHfe0zfHjH9
cNIKVhKvzwAAkf219DPQHoAYt36naY/pRNhyjSy1EDWX3+ANWGn8JkXplphx
JYJTGcg86s3c487c7qBSuEI51045B5xljC2LmdlLmJsWq2QvYBQtwo7bj2yP
GvZ8C/b+sE7HJWtp3Th8kyyyUtDnHk+U1026IYKUE9SfUrEJlRKBIQBt2ljL
BLKHl/ybqS62esrLMZ5csziWbLHBK7MgPKm1kVVbyC6a4uiA9CAiGpQeQRPI
iZYccjoZ+nEQKOTyiWZ5JaIt2uxQVDm6ZNpZrPi3eGhzgHJlIOOoL3efB2u3
O2unK+eUO/OuZPiHMubnC6bw729FoIAjR3CxgesNtOSlZSL4p5Q2T/qwT/95
JvdmvPLZFYOzF4/YHGK4Tai+LYqzPoCbZTd81e9DVy/B1tpjaS7K6d7sNBCt
+PHWenEzfLlAgawD0UqoWkao1oYIjXUgYAnWyYjQWx+htT6Qm+bOBcHIqpVY
vB0vyZuf4sld7cRJsmMmLFSJ/xOLmYuJ5mJRs5U8ZxjaO6x0cnV1dkOHAAjJ
kIEABDIEcSMwBHEjguBGDOJGfC9u9GEy/5Lpq4d5Y+Ad9D1KsaikgoqwqAKL
PBsov9EnN/qpt37r+J3vgwZ9bFcvaMAOoMjoqNXeiy/Fqt/O032yy/hBqfHD
ctPH243vbzd7WmrwbLvhPwfNPhyz+HhpnLR5svTeAukbL9lrD8iKm9Oh9kAM
QcRACRAoS3CegOtL5h8yh973H3HRl3HUg7HHWWW7vUrRYix/odLm+Vj2fGyT
nUr2Elb2IpWcRcolC7CzK4ddFw35u5D57pj+pyrLTgCNxgmy5kkkNEgbKuID
9e7cQuuQpaIVymlG2LcmysUJ5U5HkoNSI1QzCMo5EGkHUuo0kRYO4vafTHwS
n4+BwpPPcBwQXrrF1QikR42lfPErFSX1wF0LDR2UdiK2z4wn8y34J4FKOaPz
aavK04ThzYEjL3oonXQeecEbuxSkeCdO6d12jqzSCP6P8No0bH1FPbBXp3a1
/4xGiACAyO7OA0ry40HDFxt4t5PZDQFDS/8Ylu2hWRKosiWSlSPibfTkrFs4
JGn28JSl2Bp7LNVZJd2TtdaHD5RDqjcn3YuV5stLD1ZPD9VLC9HNDNPIDBKk
BWqmhequA9f+7FQPbtJiZpILK24RL9FbbbUHZ7UDO2ERK34+JpquED0Ti5qH
Rc7DXH83s19p7+ji7Oji4uQKjivJkG8ACOKGf1A3bghFiBvdmmG7N6d80WQO
AgFwq1Kmrx7mjYF30FPWrx7cePLkCcUNEP4gboD/C0puoHQoxY0+Nxf0adL4
qrNrgNDo1RffJzRE4DccESWM81pxOlz15ib1+2VG94oN75WbPCo3ultm+rjU
4K8ig8flRs/B2W32Zt+oDydtO+p/lT53+Hx7NiQG4MaNGWST7G9y+QGpMgOe
pnGyw2qvVw+9HjT0kvuIIysUdy9VLF6gmD93ZO48xU1/KucvUMpdyChYgB1Y
NPKyx9DbScNfFLPfH9P7dMGis3aMtGkSvgOONiCdmuzRSs42p3+GHpVQiQKq
VkJ17jdT841JXyv6GsKjTs7lqxtNJChQVpOgB3lNDBXHkxXI4CFfpjYGSRHo
8KyxJAYKISeqvFxC1lvpIUkz5ZafJI/I5AN5cM95tYX0hO7HfWov8ph/ZSrd
z1R+lMX8u4z3/qCe9LwpfBqtxN4lkhtTIDQQOsDn786V3pjZccrszSb+3WRO
i1ilyv6n7D+H53jxCqK4G8WCjaGCLC8sY4FCwpzhaxZjKctxyeGKpXsDdABu
wDBknT9/XYhmeqhuWqgOUB3rAvEESLBOejAvw4ezxoOftEQ5wZUda8dP8NWN
X8lOtmdDaMwYHj5lRNR8VqQdFv4H5jTDCugNB2cnB2dncL4LID24EfYFblBN
bendudGfWZSa2IPMG/T1BwPphO2nFIvMGxQ3rl27hvKidG5cvHgR6Q3EDZTT
6L8pfoDOroH3xfeCRgwFDSA2wiMjY7zsT0eo3sjRuF1ocCdf+3ax0UPAje3G
D7YZPizSf1hm9KTU8Emp0ZNio6clxu92mUhB4PBoEeQGoAfKeCBcoLwH4gb6
JLg3a207j+u+LeM+zcLupCi1RA+7FDjigvvgc15DTrkMv+A77ILP8CuhCjeS
FJ/ksl7u1nx/yqSjyqKzxlZaPw7uIGidQiiNFnIGF31AOjWdo4VmOG+lZT7R
OzvyZjSRA7KIGJ+0tKF5PtTS1Sv4jD40QryOFB54Ez0hABqo9lhyJQH6sIm2
lRJpA+pr0DIXauFLPbn+spHUQtSUM8QTurKiEjKIb/WjZZetOitNP50yeX9U
/90RvffHjT5Vmkqr8ZRL4ziyxvozjE3aqIND48Z0KbR4Wb/N13iQzG6WcBoj
R+6b9VPqItYWL6XsGIP14WqbgjgbA7DMhYAbI1KXYGuWQcmx1lE53Z2V7sNJ
8+OnBvLTAvmAEqnBeqkhQHIIACtSvflr/DVS/bipnpwUD37CUpU4Z65kMS/B
Tz/ehZu8lCWZh4X9PCJyITd6GU+4nBE6D1s5a+wKByA4HFc6geP0HQBB3PAN
6MYN8D5IcYNqhu3e1PZFk/mXTF89zBtfhUbXwEqxyPGF7F6IG/X19aiSgmqv
vbnRj7Pr32g8GSg0wC85LDJC5Gl/IkrtWrbazQKDW1v1bubp3y/Vv1tidHeb
0f1CvXslsOvhQaHhva2GD7YCcashPa4mfWYve+0pe7IcFx6zCHpQKVPweHsW
keKAzqXx0svWnyrN3p8yfXNQ98UenX/K1Z6WqD4tVX1WIni6jff3DsGrvVrv
Thh9PG/ecdmm8wrcIg1zGi20KUBUaZUYWEoT+dTaBXrEQcwNo+xe9BGF4+Ud
NKgoA30a1niUYU7uMbEm+tmR1wtVURtJaDSSW54byfkhVPzSTO50pqIe+rBl
BBDUCEOsl8KXvDSTM1TRTNS2KfL8BpXlQD8m+AtriElBnZesOi9bd16GOSi5
Kx6VWaHewMUGHHJIqA7wryZtGP+uROdhGr9VwqmOZFZ7DM76RSHFjpkj1MkV
m2T58DN9WZkOKuv/VIibPXztYsgNIDnSvJjpPuwMf056oCA1SDM1UDM1QH2t
v9paP/W13uw0T/Yad+5qD3aKO2u1KzfZlRe3VFnizJes5CX66cW58hIXKcfM
UgyezhAuV41exolYzAiZgy2fPcXewQGHBv0MBCCQIX1yA7yYcW7Qm+ipZtjU
7tzozyzap3ljgEVY9B+9pNK7FNsnN8D/DtVT6NwAQROKUyi9AbiBEqG9TRr/
G2hIekMjXBgZGhEu9lxxKFyjPVvjer7+rQL9W3n6d0qMbm81vFVodC9f5842
IyA8ADRu5xveLTB6kqb2YRuzo3aq9IGd9JmT9EOw7LWX7PHiz7d/h/SA3PgN
x8jvsKRCuQWacGd1w7jOK7YdgCFVlh8vWH48b/HhrNmHylEfz436BIlhDWUG
6v9Cb8Ty/U14FrG1e4qDPkuwhb6wjHwHpxu9kP5Hji+qxop35sJmsQsmnRfh
yJ2OC1Zw0TM61ZZoXh8+cMMGuTIIBdIwluYGn0i4MhqpGePk1pgW2pIC+ayh
ccQNjlrV6sih62jvAyAYMXxsYrefjuolAd8Im/fxOcb1eP6nnr6JaRIy43W1
TyUiFASQ9inSdz7SxgnvKwyeZPDb4zg1QnZ1mNKJRT/EzWZnuHCLwjU3+Kqt
B2Rw4a5bgWX8oSCZNSINRChuWJonI82Tme7HAwfgIi1IsNaPn+bFgdVVAApH
bPVybPUyLBk8urBWu3CT3HiJLqx4V1WJMy/BSyfOhZ+wEBNNVwpewBeuUBMt
44TZMYJnYcvmTrN37M2NAQGE4oa3H8WNkB7coJrouze19Wcy72H6ops3vnX9
QY9SLCqpfLUU29DQgLgBngDFDfCUEDcOHTqEuAGeLcUNFJ78z6DRh9IA0AC/
55DwsDBv5z3B2s1Z6tcK9G8UGtzM1b9ZaHh3q+HNIuPbgCT5ABr6d/MNb+UZ
3QHoWK3+NEv5xR6Ld6cmfDz/c0fLHJgsfeYg/RAge+X++ZEdVBp3536+Mwdm
R6l+FtQoBx5bJsuaJoJ3PWnDBGnjRGn9+M56/Bp8BtwCqHED7bW/SnbEtFPL
WboPTkfv423UyiGyV4UaYEjFMs00S1Ub6fWCPemjOi+P7qw0/3Da4sMZyw9n
rN6ftvxUad551uTTOQs4eAcNHr+M7ylAu5CokePQCIp3mjSOh88Z3bzUtEOq
1ZTaC08MYp1KmMoIJYb8XfjzRGtzAT2aaKPPqJ+XcNZNI4hXP5posmud0k13
wXI5TDfBhAagB7yADJG9dJG1T/uw3+R5ltr1JN6VSPZlIfuSl0Lu1MGSOcqb
/bgFvtiGIGaaOyfDmbXOQSl17mDxLKV0CA1Wuh83zZeX5sNP9eWneHFTPBgp
TtiaFViynWLi/CFJf4xYNX9E/HwscTErGUDDlZ/krb3KnZ3goh7nLpA4C2Id
uLF/YGHTlUOXqwtXakYvY4cuZATOZCyZP+vL0OgDIDg9EEAIbnj6UNwIonEj
ijZ8g2qGXdOdG18xi1Kmrx7mjYGPMR9gKbZ/boBnQnEDPDfEjb179yJuANzR
ufH/TWng0AiH7YReLsV+RrXpqtdyda5tNbiaa3C9wPB2geH1fKPb+Qa38gzv
FhrfzjO8mWt0O0//+ir1u2nYg20mT/faPN9r8+rY+Hcnx3+smd7ROhsC5G9H
qTRC9sL984NFRH0WhC3IyyGPOKiy4yTYskEe4u2yhVynDu6y1imEHbqV7JWj
vp3emAbvmgnylnn56A8yXUAlIanKRa21tHZsJ1A7Bw3e7tZ+s1vrzV7d1/v0
X+83eH3Q6M0R07fHTD+cHvW+0vrjGbN350d/PAcHYX28NLqzygrwhNhigJri
r+Ar4ym3BqquNpEz/ZrIUUItZCTVTK4zoPwkFApQYx0ysyERQqGPWvnaQqZB
6D4xKvgCBzfuyjOibVNk9/6Q3p7z6azNq81qt5N59SLu5ShutZBxcskPayYN
TVqgvNUPK4hQy3BhZTiw17li61wUU2YPipkxcrUHc407b7W/apoPO9UF6ork
ZUqr/hycMnfwqpkKCTMVkmaNSJqLJdoxEpexExw48S78eFe1RG+dRHd2vLNm
nKd6rBM3dikreqZiwFxu6Aq1SHtN0TJWyHyG33Tm4gVzABO+6SCAfIkb8B2Q
4gbZRN+9qa2P5hSKGz1MXz3WLQ2kg77Hf72723qUYvu0cCDfF/Jv9OYGgBvi
RkVFRQ9ubMlD3PhXoBH7VWjAbiBPxwJv0yvrVNtzDNryDFpyDK7mG9zMN7gG
NQaQH4AhgBhG1/NMbuQatCSo3lqjDAKW+xXW93dYPdw9+skem3+OjH99bNy7
UxM/Xvy5o32u9NFS6d9O0k9Bsmf20PJBNLyQ6xLayGnG8lnE3d+mqTkecuvC
ZOJafgPStjhRdqZmyjc1vpublO6LaJ0svfqb9MqYjmOG73eqvyrlvyoRvCwV
vCjhvygFR/BPucbLXdov9+m/Omzy5tioN8fM3p40f3PC/O0pi3enrd4BTXLW
+tMFS0iPGht8Zpctamj9TMVWTdRQsnHkrGPSXUb0woyXSyZq/DiVFEV7o4hB
62SERSkQahoqZW+juvxaye14V6cSmQ3wf7k7V3r3j47ztm9y1e+lCholvMtC
7qUozuXgEbtn/xA7TTF9EYCGzkYv/roVrLWLMRCkpC4cmvy7Qvy8kSnOnLVu
7CRXZrL9sNVzByfOVIifrhD/i0LcL8MlMzHRPBXJYrZ4JV/iyJO48iUuqjEu
6rFuWvHumvGu7DgH1RhPXYkzO24BFv6rYuAiQag94IZ6FODGH8rev3EXL1rw
rdzA0dGbGwGAG0Ghcm70aoZd3Z0bXzGL9pjY08O8MfAx5r1LKr1Lsf1bOJC9
HHnL6dwAlEPcKC0tBXFWD26QK+O/Dxpx/UAjNEIODQBqHy/3bHeLy5lqTZv1
2/KNmrcYNucZXs3Vb8/VuwFiFoAOIDbAZ/JMr+UaNqRoXktSATy5V259t8zq
/q4x97Zb3Su3fVBu9XinzfP9o18eHvvu9KSPVVM62mZJ78yVPrWXvveFnrE7
c2mm9Gm0UIK8dyhQUIM+5LucyDwJNfO/ZaL8NmwmbyUqq0C5SRvH0agCIqBJ
0uZJ0vNmn/ZrvS1k/L1R8XnWiOfZSs82Kz/dhD3LUXmao/IkR/nZVvbzbdy/
t6u92KX1Yjc42i/36r46YPD6sPHrQ4Zvjhi/PWX54Zx1R5VVZ7UNMTUUtaUg
dFAj05HtpIU0nFAMQTEFFVi10bZIoK+nBpI30/Iz1OIGap4zXWxQsMUVGlIa
IGaR/rVUWj/hbaH2g3TV1nh+dRTvYji7KpJ93mXQxkk/JczCNjjz8/34WStV
UhcBYoxI+0MhZaZC4uyh8X8oJdszkxcpxv6uEDN9SOy04THTFaPmMESLeGIH
NbGrqthVS+KuFeepGeupJvFQk7hrxLhrS9x14lzVY124sSsFYg89sTNLMlcx
cAYWsEw91F4jYqWacCkzeC7m+ZvaksV236E3nFxdnN3cXD083L365AZ9aE+P
Ztg+mlPo3Oht+qKbN76pCEtxA5VUvlqK7d/CQXHj8OHDX+JGfn4+yY0cihtA
WeHcGAg0EmIT4r8JGgHBQd7enpkrbS6k8hs367fkmzTnGjXmm7TkGjblGbVu
MbixRQ8w5PoWg7YtxkCQ1KVrtcUxrm/WuV1idXubxd2dY+BFqfWdUqs7JfDx
fqnlk32jXxwe/frEhHcnxkGAtM6U3potfbpC+ilQ9hwokHnySYNEj9U0+RwP
1NuCPoNAQe08pfbao7d1yhBF7W/qOYScbKJvJC6kbVMhNCp4b3IUn68b+mTt
4Eerf3qcOvhR6pAHqUMepg57lDH8QfqwxxtGPt6E/bVF5WkB+1kB63kR959S
3j87VP8pV32xQ/Xlbs3XhwzenBj19ozVu/Nj5GkQmNEdIyNspePkLa6EgZwq
tUyiLBYEIqh8LxrpjLoC6f3F1LTAhtHkJBDaJGc0pJ2CBopTYEZ0CiygtE17
t8Pgr/Vq7YmCGhHvUhSvKpJTFYIdm/+fZFuFpD9U8v04W32Us4DM+HNo2qxB
yVN/kvysIJk9In7eiNh5IyW/DxP+qhT6OyZcwIlezhE7CGLcdSSeuiJ3TXAR
6wGOdqy7ugQcD7UYD034oZMgxlUgWckXu+pEr2SK5mIBM1jB9tqh9tqRKzQi
lkBuuP6ms3TZkm+FhqMLgoY7gAZp3vDzCwwAr2GcG/ThG72bYbuZzMH91afp
q8fEHrp545vGmHf1W4ql5m981cKBrF+oLQVxY9++fYgbILxC3AA/BeLG5lw6
NzZS3CAHC/eAhrwv/jug4R8U6OXlmbp0TOUafn2WTlOuYUueUV2eWeMWo4Zc
k8Ytxs1bjAFPWrN1WnKM2nIM6zK0WmOZ13K0r2+zupZvfqPQ8kb+qBtbLW+V
Wt0qsb5VbHW70OIukB8VVo922z7dbfVsr83LQ6PfHbOFAGmZKb03HyoQHCCy
+3+SiPhF3ttCvfipVSDyyR6T5fTokfmkHF9UlbaBNk8DzzNIW6ZIT+t/3Dri
Zdqgv+J+ugNOzI/7XJXOBIyojxxyxHHoMfdhpStHngwY0RI7/HbykLtrFB6s
G/Zww8hHG0c+zcGe5qo8y2c9z2f8vZX5cofg1UH910dNXh8z/XTWFK5bgvUX
2jDAutGER5RuMaWnZ6ktJ1S5hJoH0k6OL0DufdQBhMCIJAcaaY6W5KJRIWgm
CWpYwzPJsOr60kXaPu39bpNnWWpXVwmuiHk1MfxL0bxzYexz3kPLZ/wQM3ro
2vlYgT8311913YIRqbN+ih8zSDhWQfTr8NhZI2LmDI+cPjJ8BhY+hxn2p0qk
vZrYGQQjahIX9Rh3PZG7thioCzetGKA6XLVjXDQkroAb2nHu6nGOPLGrRqwz
X+woEC5nCmdjfr+zQ1ZohizXilimGmLHDJqFOf9msHzF8m/ihqOLM62S4oUP
GPRDYgNPivZsou/eDLu2Bzd6mEX7NH31MG986w76L3W3DcTC0YMbyMKB/KI9
uFFcXPw1bmT24gZSGgOCBkBxn9AAuPb08lhtN+F0iqA2S6d2i0nTFqMrW4wb
cozrt5g0bDGtzzFuzDNuzNZv2gy4YXAlXatFxLi6WetaoVV73qj2fMurBRbg
EaDjer7FjSKrm1stbpXY3CuzvLvD5mEFECGWD3ZYPt9j+eLQ6DfHxr47M/nD
+SkdddOkN2ZKHy6SvnaXPXfAAfKLfAqQfI/kNHm3Pnrbpb8p05MGVG4EkQdV
OVF+ADdnSlsmA2h8yh/6T9x/7kT+0Bo86JL/8BN+Svt9sAO+2G4PbJsLVu6j
XAYu3JUL/TgFXqz9wUq1McOviwc3xCneShn+cB3QISMeZyn+tXHkszzGP2W8
fyrUQBTz6qjpm0obaaVRx0U8YIEDfKzQglc0lqd7xyuZr6BmlFGVZVR+pZQV
tGn9Jt89gZQVNRsESQ5qyCEyftDIKXvhLL3664cDZn9vUrsJ/mVFvMvR3Mti
XpWQWxnOOmk/eNPkH6Nth6YvxAqcGTnLsdTZCrGjB4WPGRoxAxP+wRTPwcRz
FCNmYiGzsIiF3KilzOiVGtEwAFGNddcSu+uKvSA6ot20xW4wNolx0wHoAHFK
vId6nBNX7KIt8dCIceAIl7GEMzH/OZzgpRqhSwShiziBCxiBv2Mrp5uvIMyi
AzoAGmRawwNAw9PHx9vPj3JuoIk9KEghTV89mmG7mcwpbvQwi/ae2PN95g2K
G71LKj1KsX1aOCjrV5+WUWT9As+5BzfAj0NxAwRiA+TGt+Y0AoKDETTALx/o
jeQlk47Fc2s36NRsNm7KManZYlabDVhh0JRj2rQZSA7T5s1GjZtNm3NML6Vq
NUaptG1SbwfcyLdoy0PcsLiKf9heYHUV0KMA4uL2Nqu7ZSCWsQSPj8otHuy0
ebTT5vFu2+f7bV4csn17fNzH02M76qeClzcUIa/cZM9XwhAGNuxT1lOyz+XG
b90b9sm5he1T5IkR8HidFC1tk+XBC1AazZOkJ3U/Zf/wPPI/N3x/aAoYfDxY
5UQwdsxfaY8Xts8Xq/DASj2VK/ywUm+syAMr9GdtDWIWh/FKw/k7RNyKCPWy
GLUD0eo1CcrXVw25nz7swYaRf2UrPs1T+Xsb98UuTaA93p62eldp03HBAt99
YCFF6EC7mZomkjXTSWSmdBIpqKbIqdhCFpGpAWv0puP2Kd0qSm2T5REZ2glL
5UVbJ8seLpLdmv3plPWrzep31qJcKOeikHM+knteyD0ToLRvwQ/pY38Ktx6W
tUQx3xHLmj8kceJP4bZDQ2YyYxdzRStYcfNh91nEPCzsD0y4mC+0Z0cvFwhd
ASXUgMYASiPGQwc8ijy1RK4a0S7g6Iic1MXOmvEeWvFObJGzjshbT+zAiVqo
Ev7ryMD5vJAlGuHL1MOB2PhTxX8Gtvx3G3tHhwFzA0DDxcUdpTW8UFqDaoOl
ZUSFqIMeBSmoCItM5j240dss2tv01ad541t3SVMllT5LsT0sHF+yfvW2mlPc
AE8ecaOgoIDGjc0UN8DPS+NGGrnRtSc3vuTT6AcaQOwBvbFq2ZSDYv7lTO2a
TQaN2cZ1m03rN5vWbjJuyDZtBJ/ZbNqQbXxlo0n9ZrNzaXp1Ycpt2WpthdZt
+RYteZateYAe5gAj4LEtH3LjaoHVzVKbm8XWN4utbhZa3i6zvltifgc+WsAk
apklwMjTvbb/7LN6fRQPYS5M6KyfIr02XfrIDg79eLocOkDog8Wo2cjt9MFi
U7t5vag0SMtEsqMNCnug1TuPaX3a+H9Pg/+v3f3Heu8h58Oww4HKx4Kww75K
+3ywvT7YDg9sh4/ydm+sxBcr9MOKQljF4ZyyEN72GO7OWNUdEsG+eK0Diaq7
JerbRYI90ew7qUPvpg69nzny8RbG00Lu8x1qL/dov9yn+/qERcdZ44/nLHCA
QEsnqtLKKGcpkAfNtJFBrbQZIHT3O327RI8lVq3UMkryL6H+Qvz3ILsxAxZQ
Lo57k6fxOEujdZWgOopbFcm9EAmUBudMKPuE29DC6T+uHf2TEHDDDstdppIx
/adI88G+tiOjl2gkrOBKlrFj7bDoP7GIuVi4HTtyESfSkS9cyo1y0okCuACg
cNUUuWqKnbXErloiZ7UoV80oJ4HQXiB2VJWAgMWFI3LSFHkZiZ3Z0X9gYdMU
/f/kBtrxw5aqhtmxgmZjPr9hS+f9vNLRcYDc6JELJXtgibQG1ZaCQ4OqwNLX
wlKTRbtxox/T15fMG9+6SxqVVPosxfbopu/fwtGPZbQHN4COonEjq19urOrJ
DbFYKBJ9OTzpBg2Abg9Pj4QlPx+KEVRn6tZsNK7bZHRlk3F9tumVTSZ1m83q
wYcbjS9nGV3cYFydZXI+Xa8acGOTGgTFVsumXItmyA2L1gKrltxRACNt8EPL
6yW2N4qtroOwZZvl7e02t7eZ3yq2ulU46naxxe1tFvdKzO/vsH6w3eLZHsu/
91n9s9/q9WHrd4etPp4f31E7SXprFgTIBz/ZsxUQIFTWlCrEUDkQ9LZLbV4g
ko0TYeAPqNIwBrLopPbHjB+eh/5fu9uP9W4Kp0KVz4Vhh3yxI35KB3ywPd7Y
Ll/Ije3eyiVeysV+DCA2ykK4peG8HSIOgEa5hL83VnVfHH8n3HUoKIsR7JHw
j0hYl0HwkjbsPhAeBZynJYLn21X/2a3z8pDxq+Pmr09avK0c3VllQayex5Me
ZFfLGOI2J+Ksyd0yn2h0ITUQiVotQcxQnSRPgLSRo0LaSIagv+TqNNiB0jjl
3Tbdh+tUr60W1Et4FyOg0jgXyTsdwjkVwjy6bFDWr4NW2fwUZjEkc/6ITYtG
xNv86DVqeMA0LN6TF+PEltgLRHZY+FwsbD4WvpgfYceMdNCMXM6NctASuumL
vHSj3XSiPXSiATRctKKdNKKd4aPQUTXaSSBy0hC7C2IcVKOctSNXsKNmY8GT
hwcvZIcu5oUuYgUvYPnPxDx/wZb8MX2l04C4QeVCSWO5D8qF9k5rUPZy1D6P
MqLI8YU62tDEHmTeoJtF+zR99Zi88a1FWDo3epdUenTTf8nC0cP61adlFLXB
fpUb5JZG+TqDXtyAva6IGwDCdJ8GPaeBoAHQDUJFEDBGL5mxP0L1cqZBzUbT
mk2jLq83hKzYaFKzyezKRqOqDSbgXFinX7XeqCpd92IEozlL0JJr3lJg2ZgL
DkCHZXO+VdMWs6Zcy+Yto1pyLduKrK9utWrfanW90PIW0B5FFjeKLG8WmoOL
W9ss72yzABi5U2Jxv8zi8U6rp3usnu62/GvHqOd7rV4dsHx7fPTHc+M66iZL
bwKALMbLuEugcZ0q0V6lrXFpnyr3kVIyHtw+j5dIwTvvab2PGT8+D/7PVZef
ap0VTvpjJ0NVTodiRwNwseGF7fLEdnphZW5YsYdykSej0JdV4MMpDeFuFwOl
wd8Rw9sby98v4e8S8QA09sSqlknUSmJUi3GGXExWur1G4dHGkY9zlJ7mM56X
8P7Zo/1in+6rQ4avDxu9P2vRcQ5fQF8D544SdZDGcXJRQS+soPwGGrtxjVaD
hsQgTS/NE2lZ4imfybFdcrC0ToYjvK7++q7C+GmW6o0U1cY4KDbOh3Eqw7ln
IninwrjHfRT3zv8xY7pC8rhBwZbDVv8+MmOWQoS5gu9kpeilugmOnHhXpthJ
VWTHCP8DC17ECl/Ej1jKDF+mEeEgiFqpFumsG+WmHeWqI3LTjXbWjHbViHJT
j3ICegOgQxOEKhIHgQiEMy6q4pW88MUc4WzMf9yQoHlYqB03dBEzcDbmPR1z
n6a8+M85ODec+z+9c6F4WiOAapynpTVEtLQGZfei2ucpxxchNsBd1mOdNGX6
6tO88R076Lu+UFLpUYr9koWjt/WrH6s5Gu2FW0YpvyidG+u6cyNlwNwIBYqu
h9IgoeHt7ukZsnh2RYBqVbrexfVGF7NGVW0wqsoyu5BpDDTG5Szjc+uNz2Ua
n1tnUAke12pXRTLq1gvqt5jX51nW51jUb7FoyLVozLNqzDFt2GzemGPWvMUc
YARoD6BJruZbXi+yvr7VEpwbhebXC6DwuFloAT68VWR+r9gcZlBLQfxi+XCH
+aMKy6c7zZ/utHh5EALk3YkxHyvHdIAQpm0azIG8cJY9Xym7Ow+/ZabJxxXS
Z6oDbiDTwp150nNGH9f99DzgP1cdfqpzVDgXonQqCDsbpnw8EOqN/b7YXg+s
3AOKjRIXrNBNOd+TmefD2eLF2hrKKo7ml8bw9sTw98fxd0dzS8T8ili1Eol6
cYzqNpFgWxSvTMTdF8NsjR9yb82gB6mDH2eNeJqrDKstpfyXuzRe7tF8fdTk
zSmL9+dtpWj3KzGJnVyUhvKcbbTYCuZFJ8hpQFk7CDhMpmU/aFXaq6SbDkDj
hbP0+oz3u00BNG6mcJvjuNUiflUECE+4Z4HYiOSdCOUccR5SNGNQ2qyhKZMH
B48eIZ42Mm7sT0E2w4J+Z4u99GIddeIdgLrgixZzwhdhwQvYYQt4ESvYEUsE
EU6aQgeB0FlT6KgtdAVHC1xEOWpCKeIIPqka5aQW5aAusudH2mtHu+sKl3Mi
FrIiZ2EBYxRAbBK6QAWIDb8ZmOevmOs05uL5c5GJq39o4LlQNzdPlNbwQe5Q
Mq0R+uW0Ru8IBe5MQRlRaqwoEhtA8NPXO9In9tDNG9+6gx7917u7rUdX7Jcs
HP1Yv/q0mv+X3ACRXS9uRJJ6g+AGwDUKTwhoeHm5urv72s3eHqB+Kk3vXIbh
ufWmlZmG5zeYnV5ncjbT9MJ6o7Pgk5lG5zMNKzNNzqbpng3BajNVazeb1eZa
XNliUZdrVZ8zCj5uNq3PNmvYbNq42QzokOZc89Z8S5j0KLBqz7dszbOEqY/8
UYAbV/PNrxZA+XFr66jbJZZ3ii0ells92G7+ANFjh/nDcgsAkOcghNln8eKw
zbtj1u8rbT/V/gzLIrfnwG7c5/af8SqM7OECmAO5OR0ecAE7OCZByFSZfswe
/A9QGk4/Va8cejZM5WK0MlAa4BzzUTqEpzV2uittd8PKPLEiZ6zQQyXfm5Hv
z84PYhRF8oDe2B3DOxDD3SvmlYj4OyVAYKgWiwQ7Y/jlYt5uMXt3NHO3mLU7
irEvBDsTPvxWssLDzGGPNox4skX5eQHz70L2iz1aL/fpvDlp/ukivlG6bjQR
hqD8ZztJAFQuoZrgqKQo+iPU3UN8+CttRNJ0ciHFrzAbDPTVa3fpzd8/HLZ4
sVnt9ipmU6TilUjmpWhBtURwXiSojOafCuceD2bttxu06XeFjD+Hpv08KHSM
onjqEKHFIN/xiuHz+WInXrSnecwKfuhKfuQiTsQyleD5nDCAjpWCiMWcMAft
CGeoK4QwmwGutYVOmhEAGg4akY7aiB4gchE78oX26sL/x9x7h0V5pu3/f24U
sD7TK70NZQpYUkxib7HQsWKXPszAMHR7oU2jSlFgCkMTC0XKzNAE1NhiLLHH
2FJ3k81uNrq/33U/owSHorvv7vt+Oe5jjgc0Jos7H87zus7rune4J4fRkgNI
ScinWMUux+L9CcLlhMjF2M5F2JYFtNCggLeKjbFroa9SXqOWNUZ1KK93fP3h
UOC9Zu7AmpOiZpNibqYM39hjEd74l6Dx/w1rqYzfih0rwjFOZHTUqLmZG6+j
5kM58+HcyH29nGc4N/aNyg0wgCO5gYsNBA1QgFu3b4sL+kwrZHfkuncqvDqV
XKOcA9AwKL2MKm5XHteg8OhWenYr3U0q7265a7uUdF7BPF/seaGMf6FE8HmZ
DwDkfKnv58VenxdxPy/mXizmgQ4BbnxRhr+W+147Cv5F8CWqfvDNDVykQ47x
bx/j3Vb7gvD4usb3gZb/TY3vswafxzUC+PRpLf/5cd/vT/o8O4Ho8f1p/o+t
s34+4/NL7/u/nfsAJbi+DkRvlj/vQM2Xm/NffhOEHq7PffHQ/8U5n98qpvyY
/KebWyf2b5lklBBNUmJPMmaQYB3xWEvktJMR2PForHbHNM12TLMTq9iGaaKw
ChGhSkrVJtNrwKTsZpzazTgJSiOdeXw3W7ubrd/FrMugN+6iNqaSjieTjqcQ
jycTG6SEBgnWkIgNpE76cq/V3cMTH+TafJM39XH+1GdlpO/0tj+ecP2lk49C
6Rdmvh5gmfMaHcNu1B0KyQ/dPvPHNXnzX0HGDJBXif3Xfg1XGi8fh7y4u+Lv
ptk/H3V4oqBfT7I5Hz29K5F24bDdtWy7SwdZXWmszmRmWwymX/0n5Wc2cv9J
ufMmpL8/Ke2jiQkCq5jFWGq4e8YaLFU8O3UNQ7KBIQ2iSteS4wMZ0hBy/Frb
pDXUpA0O0m2uKdsckrfCsU8Kc0gOs5NuZCdvsU/eAtBwBHqkAky2slM3sJI3
2EvW0JP8iIkrsYTlmHglJvyMCEpjJxIb2MYFtqGhIW+FxlAt1CLiZR5hG5bW
sChrjHQor8oa8IPY7FCGLqAHh2LupJiTG0MJc3MzxeL6g3+pCWvBjXdvxb5j
ZHQ4N4ai5q9H2/4FbpgvQ7Hgxuu66HjcgL+aLWHrDwbO0ifSDDIXAEWHimdQ
erfLvTtkHvBgUPGMCCC8Tpl7u8zTlOvckkTpz6SfK+KcL+WfO8I9d4T3eSl3
sMTnXDHvXCEXL4l4fV7ic6WUfxksTCnvSikqn8Kn1wAgZfzroD3KeNfLQXvw
bx0TfKX2vV3Bv12FVAfoja/1Pg+0Anj9Rs9/Uu/7wwnB00bf5w38p438Z02+
3572fd7q81OL4KcO35/PfvD38x+8uPrxi3ur0Jbdn7a9+CUSbWK/Nvf3etKf
d/3p7vYJA1sm9UmmdycSe6QEkEnN0dPPxGGnwkFpYA3RmH7LtMrthCrgxg5M
J8aqpbTqJKY+nQF8OL2b0ZhGO7mP3bCXrdvNbtjDatxNR8RIITVIifUSdBok
hLp4rF6M1cdjdfHEWjGhNg47mzbpVtbkB/JJj4qwZ1XM72vtf2rGox0XZr6+
aW7OsCDK3Fel3aGpWLMUMTejh5a13np9DwW+Jf6VPXlVA/n05f1VYMpQA+Wo
47fF9vcPEb+IsuqOo7Yk2V8pcL582PbcfjZAozWB1rxjcuniCbKVk+WBU+RL
39v9vlXGjAmi9zHRStquaLfdwViK5MOUUEbCeiYSGOvpwA1JKDk+1E66np60
wVa6yUUKemOTo3Szo3STgxS+sp4tXW+XtNFBGmabtJkFD7hnYaWso0uCaYmr
iZKVWPxKQtwKYsRibMdCbOt8bMtcbMMCx7VrQ8d1KACN7Ra10NcRL4uyxh9p
DYvGK7xNchWKIYdiXgw4dPGB2aGcPHly+AX0Q2s3hhLmQ+uI/40mrPnDYrpt
rFbsW6NfwyOjbx1ReT3aNpwbitervf64G/p/wo1tO7ZJgxYXr2Of3s1qz3Hs
VLobVRyjyqtNwe2Ao+S2ybkdci+Dit8u92zN9TZlOzclk7v2MQYLnAeKvAaL
PfsLvc4Vew0U8weLeQNFvIFiAaDjfInPxWLviyX8i2BhSgRXy/nADRAeV0t5
V8vBwvCulYH84JuDH7eOCm5VgG0RPADPgoIfgoc1vg81vMe1Pt82CJ4c933a
IHhcx3vWNOP5Kd8nTT6gPX5oFXzfMeOHdp+fjL4/G31/63//94GP/nFt+YuL
s39vsv+rfOLDiAlnN9l0CacPJGNdUlK3FDOIprVGTW+Jmd64Y3pNOFYXiWm2
TDu6lVARQTwaTtLE06oTGdXpjPpdtAbQFenUE3uYDftsARp1r6BBbpACNEj1
CYALQm0CoRZQIyYg4IgxvYigE2FaMaaNJxh2T7l38E8Pc60eF09/rmb+dJrz
j35fVBo1L+O6/rqHMiQYrs97PQWPf9G8YvHBSgSKr/1f/nnHy6eh/7y7/OX3
Yf+899nLRwH/fLD61VI14MbtJS/ur/r93Ie/qF1+KnP8Rsm6FW81EDHtVLLd
gNztyyOuV7Ptzh1gd0oZp4WUxpAJeYusclZOVgRNVa6aeOhjq90z3hPNnCwO
sE3dapcaTExNnJm2liXZwJKuoSauZyYGUBLWUEQBDEkYCxCRuNFeaoZGmFMS
PGy0TdxkJw2zSwxzStzomLTRPnkj/DaHpM1O6B/3JyeswBJWEcUriVFLETQ2
z8M2zUVn7WLO+g3rX8/Fj3KG10KHR7xelzWkr/dsvLWs8ccW4qKSEvhxPHQb
rDlbbp5lG3Io8G4d2kUMb2fznSnmNV9vvdtxrI/hLZWxWrEjIxxjRb9GjYyO
GFF5d24ctOAGiDfwfe+kN8LWZgbyT8QTujOZfbn2XbkuHblunXIXg8LFmAe4
8Dqj4LbLOO0KXpvMsyXHs0PGOZFCN+6m9RW69BRyBwrc+/I5/UVeZwt5/UXe
Zm4MFnIHj/iADjl/hH+h2BswcqUMtAf/cpnPpRLuZcBIKf9qqcDsYq4dNQc/
fAAdKLheIUAAqfa9X8V7VOPzpIb/TYPv0xO+j2t4YFi+bfT55oTPs5OC502C
b8/4Pm/if9su+K6F932b4Mdm3s9NPr9o6D9kT34QZ9W/c7IpFutKJPYlEUxS
kjEBa4+dDkrjVOS0+m3T66IINRGYejt2dDvxWBS5PJJSIaJrU+j6dLpOQtWn
0gAa9ftYNXtscWjQjqeQ6yWkugQiIkY8QS8m1IgI1QAKEUErxDToFX+Ig0NQ
xxIuJE38KuM98CxPjtJ/OOX2Ww8frQ4z642hUZpXsY2hC6TmvLIhgIUb8178
NebFT9tRqfP5xhfPNqAH+PT7zej1z9vNPaaXd5a9eLoGFNdfaz3+UubwvNjh
4SHscpR1WxSxaa/r5/ku14pdL2XaDexjn5EwTuzEdH5/yl1one03JS9kmsLf
+tACq70fTpB8MEUa6pQWxkoNwpLEMxKDWeKN9omhlMQ1TEkQWRzKiA+kxm9w
SAyzS95gmwjqIswBAAKgkG6wT4Svb3SUbIRfBcnhkBJmL13HTtzsKgW9AcRY
QRCtIMQux2sa87GwT7ENn2Bh87DQZbwNrzYSj3LerIW+U1njrY1X85Ye+Ik8
3KHAD+7xHQq8tc1jsP9GcmM4N0adbhs5TT8U4Xhr9GucEZXRRmJVr0fb/rgk
+n/MjQjhusCCUCfDAeZZme1ZuX2/zK4/165P5tiV69QpczUo3DuVID882pFz
8WiVeQBDGlOZhl3U3kLXrgJub5Fnb77X2SIO0KOvyPtsIRz+YKFXfxFYGHTO
l/AHi/iXQXgUeV04wr9Y7Pn5ETAvoEMEV8oEl19hhGfOj4F/QQrkqA+IkDvH
eCijruN/U+vzvNH3Gz2SH88a+I/qBU8afZ418p42+z45wXvSInh2mv+s2efp
cd53tZ5PChgP90y9nDC9Lx7rlRJ7kkg9iZgBNIBoemskKA2sMXxazdbp+gis
OhKr3IFVRBKPxZDLY8hHRRR1OlOTQKuTkhp3AzSYugz2cYDGLmpDMqUukVQr
wgAXSGCICAgUcQRNDKaOIaijCVUxRHUsSR1FqIpCz1XRxFbp9Avpkx7kWD8u
I/3Y6PyPPsFL877BobT50OZhZFs+efH9phfP1qG1abcWoTtrvtv04vr83wbm
/XZ+wd963/9b9yd/65v79955v11c/PuVT5ERu73qxdcBLx4EvDg/89eT3n8u
d/qx1OFxPvtBus3ZmCknY8nGPMHnBU7XC1zPHWT37WaC2KjfNKV08XvZiBtT
lSHTZYFTDy2ftHe+VfxHU8SBtilhoDcwiXBGfCAzbqOTJIQqCWFJgolCeA0B
1WEXv8kJpIUEh4ZkvSOaNwFuwPMGB8k6QIdjIjiXjezkDczEtbbxwQzxCmLc
CkLMMixiCbZtIbZpHoLGhk/RCVzxiXneZDRoDNVCLSNer8saSaOVNd7aeC0x
N17N2zYaGhrMwfIhhwKmwOxQ4M070qH8G5WNkdwYtRU7MsIx1tav4dGvsaLm
I0ZUhkbpR3Ij04IbGf8iNxI2BhbvdGjPYncrnPqUroMql0Gl44DcAU6/wrEX
VIfcvUPO6VRwTHnenYCOXJeWdGZnGtad72LK9+4uBG549hR59+R79hZ69OW7
9xaA6vDoK+QPHOEPHkGv/YXcc0cE55Aa4Z8v9AD58TnSIdyLpYKLR9DzlRLe
1TKfK6WCqyVcs3/58qjvrXLe7UoUEkMp02qfr7VIfjyu5T+s4QM3ntZzH5/w
+eY4/9FJwdMmwfMW3+9O8Z7pOc/KmPcOYBdSiWcTsW4psS+D3J2ItccTOsTT
T4dPq9+O1UdM12+ZrovANOFYxU4MREJlHLFSQq5KZGqSmfUppBMZjMbdYFhY
+nRGYxqlXkqpSyABMTSxSEtoRETEilgABfABqwJoRBMrY0iVMeTKaHglaURk
nZhSK6FektjcSp34pHDaT8cdfx2Y8/LCjFfT/Tfm/7HD8Nail3eWImg8X4/O
txtfPAl98cWnf+v88KcOnx9red+fnv1jE/+7kzOeN878ru3j75s//Evb7D+b
fH/p8P2r4cNfDbN/bvP84ajLj2VO35c6PpQxbsdPNMVMP5XK6i30vVjsfk3l
3L+PZUiiN0SSakMm5i2YeHjRpOzVU5Wh03OCsUN+0/YutRbPxURBdsmbnZOD
gBszE4IZwg3OCWtoiSGs+BCyMIiVsJYWH8qO3+CUsNkJpAU66wEdDvHr8LMG
ntGMfMJ6RzAsSVsck9bRQaIIl2ORS7GdeFlj83xs4yfYujnYRuDGXCxo5aeb
RuPG61qo5bjr8IjXyLTG+GUNi8arOVU+3KH09PSMdCjgIP7nDsX8MXK6zWIq
dtQIx8jo16iR0eFR81G58eYovQwfURmDG3vQbUrvyA3wjzFhwSViFwMIjCJu
j8q1J9+jJ8/1rIpzLs91QOGMGKJw6lc4AUBMoD3knI4s585kRvs+ilHlYsx3
NxZ4dud5dBd6w2tXgXdPoUdvnvvZfLeeAl5/MR9UB3oFEVIEqgNxY7CIO1DI
GyzmnyvwPI83X0B+XCpB/Rd0jiD5MWReQHvcqfS5UyW4o/a5X8UFejypA4bw
nx73eVzjjYTHcf7D4/zHp3yetfo8P879oZbzuIx+/yB2IYM0mEowgthII5mk
hFYx8YwIpTVqtmH14dN1WzDNDqxyJ+HYTqw6nmguh2oTafXplJo0pn4XvXE3
68Q+VmMauS6RXBNP1AE0hATARRWwIpaEg4JcJaRUAS5iyZWxFDg1iTR4rZbQ
aqQ0bRK9RkI1xU+7JrH6RjnlBz371y50jaw5SY7g8NM2ZEnw+4/++dWiF8/W
oxG/R4EvHvi9OOf762ned1Vej+q8HpR7Pz8x60kN93kD2DSfJ6c/en76/e9P
z3zePuPHFv4vrTN+beH91OT+fbnz92XOz47YP8giXY+1ao8ntu53OZfvfqmY
czXXrncP63Q8vW47MimyBVZZyyfl+E1VhGKyNYTsUGzfcquERZgwwDZxg1MS
6Ioo34QQunCdczxwAzTDGqookB633j4+hClZy05Y54C0xFq7+FDb+DVsyQY7
yTq7hLWIHmBYkpD8cErY5CJZQ01YTYpeim1fhG1bgG1dgHAB0Fj7EbbhY2zD
MnLQqvdxbmyzOMNqoZYRr7HLGuPkyf9ovJpHUeBHs3nVhtmhwDvRPP06dDXb
qA7l3yuHDufG+K3YkRGOd4x+WUTNxx1tG86NnP8xN6IBHds3rc/b7tWV62gq
4vXle/UUcvsKPJCEKHDvyeP0q9wGVa6DSucBpWO/0rlP6WbKcew6QG/PZnXm
cTryPDvzOUalq7HAy4S44dVtxgj84ypOb6FXH/xpRXwwL70FvLOFXsCN/iJu
P6qE8AcK0KfninjniwWfF3uD6kCnmAcYuVLK//KYLxp7wYseN48KUOgUT3o8
qhY8qPZ53AC2hfugTvC4nv+gnv/ouOCbZsGTeq/vdG4Pymi3D5POZ5DPphEM
UmJ3MqEzHmuJI7SKsIYdKN+lB40RNr1qO+FYOKk8gnQsiqJLYenTaHUpFF0S
Q5fBqN9rd2IvQIPWkEhExiQG08QSqsyKQgiIoCJQxFA0CXStiKpNpNckMfRS
eo2UrpHS1ckMdRKjSsqoSKK3CLELYpu7B22eV1B+NXDRfUyX30fQ+HYjWvz+
+lqol7cWvngUhHrH91e/+HzW3xpdfih3vl/o9lDvdbec9/T0nEc6r6cNM7+p
Fjysf//pqfe/PT3races78/4/qVl5s8nud+d4nxb7vptiePjI/b39mNfxtq0
SGh9WW7nVPaXgP/7WF27WCfiaDWbpx1d8qfDcxE3wKfkhmCydSR5CLZ7qZVo
KSb2pydu4SStYSRs8RYH02JC7MVrmZIgmiiUFRdIFq5xEK2zl6xhJ6y1lay1
S1hnn7AO6MEWh9qKQ2xBiiSsh6+zkzY6SkOZCWvtJaEM0QpC5BIEjc3zUEFj
3ccIGms+xNaD3ljtumbVvFGhMXLc1SLi9bqskTF+WmNk43UoGmoeRTGPzMOb
0cKh3Llz5z/oUIY+xmnFjhPhGBn9Gr5l1CJqPmK0zZIbb47EvsEN+Daat4m+
CzeiYmPM92zu2LxRtdm7K8sOjMZgPrz3uWfh5Hv0FXj3FnJ7cA6czXMfyOMM
5rkDNwaBD7mOnYgV3p35Xh353E4lAMTDoHQz5nl15Xt25XkY87xNeZ4gP7rz
OD35XkCh7nzvvkJ4AIB4g/xAOqQAVULgeaBIMFjMGywEgPAuoGQ7H+TH1XKf
q6A6ygAdqOhx85jP7aPetyt9HmoE97U+j+tnPK7mPajx+aaWfx+cC4iQE/xv
6jyfV7jfP0L/8gD5fAapP4NgSCKaUrAzYuyUkHg6BqvbNr02AqsOxyo3opRX
+Q5SaQSlJJJSmUzXSqlqMV23i9Gwxw6UxvE0ekMiuU4MxCCqo0FjkAEUQIxj
cfRKMb1aSq+Kp+mkDB2AAnABoEhGpxJOChNORRKjIoVxXEwaFNl8tc/quZr9
S9eM3y/NQRelPQl9eXf5P6+8/+K7MPR8exkSG18Hvriz/MX1+f9odv2pgHpf
6filzPm+nne7nPv1yTkPavmPanwf6QX3a2c9aXz/+enZj9tnfdsx46fWWX+u
83zW6PWs1PVZscPX+exbu6Zdjp3SHM/sPmB7SeVwOce+ezezLZnZEEfTh1rl
L5hwcK511jLrzNXTwKTkhGK5gZNTF0+JWzpNshpLDGVJNzklrHWJC6ZFBbJE
obYJQSRhMFsYRIkLZorXOYrXAi4cgRjwSyKwLcAHYMgathgpEHuQK4mbHVGt
I4QeF0iLWYbXQuehWiiwArgR+iHixtqVjmHLXDaEBFpAY/xa6BhlDcs8+XCH
MlTWGDUaOo5D+Y/0UCw+LKbbRrZix9nCMTLCYREZHR41H3Uk9j/IDTxnbh5q
i92xfYtiHc+UZdud5wlMAJ0wUMjtRwMp3O58blcxv6+I113I60Yhc7celVt3
gbcBUcLDmO8JMqOzkGfI82rL825XeeMVVHeTyswNL2Mhtyvfy5iH7I9J6d5T
4NGd5wV0AlVzthDkB7evkH+2AG/EwCngDhYLQH7AK0gOZF6O8C4Xc6+W8L4o
4V3HA2M30IQ+/06F4FHtjIdqHtiWb2oE9+ANVeNzD1RHjefTo673imlXD1HP
7yH3ZRA6k0iGJKw5DmuIIhyPmF6zdbougqCNwI5twioikNgojyEdE1O0CbQq
EVWfTNFnsGp2oVR5vYQE9kQTR6wS4hpDRKsB65HC0KYwdanM6hSGBnRFClOd
Aq+MqjRWVSqrKo2JHtJY6jSmOo1RlUKvTyCdFU+6r5jyXY3dX7vxa2S/WgKs
QHfYPV3z4vn6l98EoTw8PN9bibaRXJjxm5b05ADh6l7bS4cc7lTzvirzfHh8
9r16lIJ7qObe0c98VP/+s1MffN0683mb4IfmmT+CL6vxflbq8qTY4a6KfWMP
9nnMlGYRrfcg6xqIw70sQxrzZAKzPpqkDZyQO8/q4Hyb7OU2maum5QRMyw7E
Dn1mlbCMGr96uiSQlBBMk2x1EwcxhSGMmFUUUbCdMIgUG8CIAQ4E00UhIDbs
xWvsRKH24hBWwhoWyAxRqB3CC9Bjg4N4LVgVp4SNzvEhNNFqMoiNrfOxTXgD
BaCxZg4W/D4WupC2folt2AixMVotdJTJtXcoa4zZeB2Khprn1/53HIoFN8Zq
xY41TW8R4Rg1MmoRNS97I2o+6ij9cG4cfn3R/DtxAzCOj6i8okf4zm3y9YLO
Q7YgKgZBY6g8+/K8B/Lc+wt4fXlcYwEfREJXAR9kQ1e+d0+eexecAm6XystQ
wAVRYQB65HNBdXTkcduV3h1KT6PSzZDnbVR6oN9Q6NWh4hqV7gYl6BB3k8Kt
Kw8EDPgXHliYXvSHgwjhok/zuSA/ELKKBOeP8IEe548ILhSj7Ace/MC7LSgq
JrhRzgfDcu8Y977G5xud4J5WcK/a524NYMTzm3L3O0WMS4eo/RmkvlSsPYHQ
noCdisb0EYT6SEy3DauOIKjDUcqrIppwTESoBGhI6NoEUm0S+Xg6XZPGPJ7O
aJCQNAlEtYhUFUfRSOhVYkSMmmSGBiiRyqxKZZpf0QFopDIQMeCLaUxNOhwG
QEOTRtckk09FTx+It7mTM+1bHeuvvbN/v70CpMXLh37Im9xcCLj45+XZLwAd
DwPQ+N6txS/6eb8optxLnnY+lXlN5XJby79Z6vmgZubdGsHDmhn3Kz1uqX0e
1s9+euL9e6dmPWkRfH/S53u9+yO155Nip0dFDl8p2dcPkC4mTO1OIoM96d5j
a8xgtaUwG4T02p1Y5ar3Dn9idXChzeFlNodXTMn1m3x41ZSMRVbCpSRhADMh
1CH+symiLZ7gTaJC7KMDafFB9FgwLH6U6BA7YSgbWBEXah8XYhcXahsXyowL
ZsER4UWP+FAQJw7xIDxC7RJC7cQhzNhlWPhiLGwuXgsFaHyExEbQHELop9S1
S/mbN4dZQGPkuOuIskbyOGWNcRxK+etoqHl4bRyHYtFDMa/2+lenUcbhxvCW
yju2YkdGOMaJjI42ojLqKP0rbgyt4HgHbkiAG/g8LBqJHQJIZPiO3FCfjkPs
fvAgBV4DqLLB6wN6AC4Urt0qjy65W7eS06vidOWBAuF1KT3gi90qr84CnlHl
aVB5d6k84cGE0IFUh1HB6VR5meRuBrAwBV4dSm9jPnwFVIqXQeEBDOkC7QEI
AhcDkiYPRAgYIl4vMjJm+QHQABfDP3dEMFjEv1iK+ixXyvCB/TK0WOxGOZqJ
+6rc+26l4Gstarjc1/nc1vMf6L2/Lud8VUi/uI90Ng0zc6MtfvqJKEy7k1Af
jel2oqHXim1YRSRBI6LoxFStlFGdQj6eSqpNoevSGY0ZjIYksjaBWCWmoMqn
iK7H1YUOlEYy4zUuWK+gAcQw4yIN0UOD46ImjVGdTNMlUvRCwqnoaedE1nez
rH9ucvnHwMzfvw56+cDv5b0VL5+sQatWn67957VPXj4KRO3UeyuAG/+oZ367
x/qycGpXHO2q3PmWVgDcuF8987be52HNzHtVXrcqeQ/qZj8+Putew4yHp3yf
N/p8W+X6sMLjmyLHBwX2N5W217KZFzKo3RlM4y7brj2sjjTWCTGjVkiv2Tjp
yJL3DnxsdWiJTebySZmf2WStmHRgqVXCfCx8OSYOZEmCqfGBmGgLNzGYFBXi
GBPCFAeSY4KYMQEkYRA7Boixzi5+rV3cWjthCODCNj4ExAYzbg1THMpOWGMP
PkW8DlU/ABrCAHr0MlQRNSuNtXMQN4I/xILnM9ctsV8TsNLcNxk6o9VCh0e8
RilrjEhrvKXxOjwaah56NS/ZMC8D/K86FPPHqNNt47diR41wjBUZHTmiMtpo
2ytuWKzuGckN/M7oVPONbENz9MBwnB5/ACQ6KjxrzeyWvew+hetAAe+sCqwE
rxve5qAcsm07D1GN+0mmw4yebNsumTN83aTgdIF4UHgAB0B1GBVeJqWXUemF
jInC3YC44QGUMMo5nXnenXnu7fBpHgcUiCHfq1Pp0QFCRcnpQiNybiYV/Alo
5qWrgNedDxjh9eQBr8DC8PoK+APFgoEiPp5XF1wu9blcKgB0oGjHUcGtYz43
yrgoo14huF0huKvzvaXh32/g3i/j3CygXdhH6krCuqSoHGo2KdVRhNoITLsd
U0cQj24jHI0kl0XCu5tem0FtTKfqkyi6NMaJ3czGNJAf5Kp4MogQIIkeaQym
BjcjyI8MyYxXTgThQp1K16TStak0bRK1NplamwKOhqKNJ2mAGxFTB4XWD1TY
j80eLwZ9XjwKRqUMIAYcQMfTNS8f+qMHc0X0/Iy/V2KPEqz6d04xCGmXVS5f
6RAb76hn3NTPuK+fdafS+2Yl775u5sP6Wfdqfe7W+zxp8HlW6Xqv3OPrAvs7
eXbXFexrOazB/ayuPbbNyazODNapJFZDPLMmmqILtcqbN2Hfx9YgNjKXTcpc
bnNo2aSM+VbCBdOj/NjiACIKY4TQhWtcJWtBYDgIAQu4SYkKosYG0oEVwlAH
YaitMNQefApwIy7EFv2eULt4sCohbGGIXcI6B8kmh4RQWtwqcsRSlNYw2xNQ
GiEgNuYx1yykhK6YvQbFy7cM48arWujQuOu/VNYYp/Fqdijmxuvw4TXzRi/z
5mELh2K+cf4/61CGuGHRUnnHVuzwCMdYkVGLqPloo22jr+AYyY10S26gS9nA
J+LT9Gig3gwQM0NiYqKyNnzUvM+uV+ZyFjSGyqtbxetWcAw5dobdhPYYq+b1
fzq91bpVPMWQQTRlsrtybEFyADpMiB7uJjnHpABv4mlScU1ycCLwKccAGkPp
aUDc8OyQuxhUbkCMzjzgCeJGh8K9E7AD5kXublS4GUGc5HG7UE2VD9KlJ4/b
U8DtyUeNmP5C3vkjPhdLUNAUuHGpBEyK4MsyPtpJiEdMr+MYuVM9A346367h
3i3zupZHH9hFMkowQzx2WoidjsXqI4m1MQQ9ng49toNYvpNUFkEtjaZUJ1Oq
xLTKBGpNOqVxN4gNmjaRBtBQi2g1ZpmBFzEqU/GTZj6sqnT4lFGZSq9KpVWl
0NQp1OpUWi3ejoE/UC+l1kjJwA21iHg6Ytq5aKsHyuk/NXF+v774BS4zUB/2
2Tr0/CQUtVcehyBu3F72e5fXz1mTbkRambZO6YxnXc5zvan1vV7q9VWV73Xt
zDvambfVghsV3BuVMx5Uz7hT63tXz/+m0fcxuszXA8TGVyrbazL21Vzb/gO2
hl3sJinzdDLrhJRVJ2JURxKr/N/LmWu19xPrQ0utgRtZy6z3LZ6U/KlNzJKp
wkBbYRCQAZU9RcHs+A2sqCBWLFiVIGpcACUyiBUNvxrEjA1mCYNtgRjCYFYs
fuBZBG4FXAwABDGEhbdXmLEriCA2wKSYoRH0Phb0KSX4E9Kaz7xDQoLCtmx+
Exp/1EJHi3i9tawxXuPVvHPYYnjNfM2BeTPPqD2U/6xDGfoY3lJ5x1bs8AjH
UPRrnMjo2KNteXjU/B25kTGcG/BXAD4Rp4clQISiuAPrFjbtsjeBnFB4dua6
GUBCyF2Ne6kdEZPOrLNRh0yvCJ6mXze5KcyqIxEz7iF35Tp2KdyAGyAtjLnu
CBdyty4VmqI1yT1MMvdXmgTUSD4YGfcOFccod+7MczXkcRA3lO7tcvd2pXuH
3KMDACJ3RVVWpQcaoFN5duXxupB/ASPD7yvg9uO92s9LQHIIPj/C/6JU8EUp
/2bFTLzc4YMfwV3tDHhb3dLzvyrx/EJOHdhDMiRiZ0TYqTjCSSFWF4Xpowm6
CKwKuLGTgA/LE6sS6WoJQ5NArs+g16TTj++i6aV0dQKlUkitFNN1KUwwJnBw
aDDM3ACZAc9qVMGgq1OpVSkUbRJJIyXpUyi1KZQaMDiJFF08sSYeq00k1ogI
bTsnn4uY8Ehp/Vufzz+vfPji+fpXua+b85FJwaPmiBvgU24v/f049VnaxHPb
rJo2TW2XsAdlzteBGCXutyp9rmlm3K6edVPtc10nuH7M955u5p0aX1T0aPB5
VOl2q4RzN9/+psL2Ujb7Uo5t/342KI2mJNZJOInMWjFDv3166WfvZc61OrDQ
5tASq8NgVZZa7Z5vLfnEJsbPNs4fEwcx4lYTRRtd4oPpwjBnIWqI0IEYsQGU
6EBWZCArLpgN0IDX2CAWmJfYIKYomAkwiQlCAMFxAa9scRAdSZTlKOW1/hMs
dA5SGoFwPqGGLHQIDfZbt2H9mw7Fctx1tMm10csa79J4NTsUczR0aHjtf9mh
DOfGqItGR23FWkQ4Ro1+mbkxFBkdY0RlODeUb+PGHgtuwPcfTCJODwuAIIbA
X9O+jctOptgbsh3b5R7tuW7GXLfuLHZvGsEQR2hIYNbsZjdm2tcnsWu3ko5v
n9oimmLIZJlynEwyV1TEgN8PoECs8ADtYQTtIUcPuPZw78rzNOW5d4DSULq2
q9yNSheABuKGjNOh5AA02hReHYghnvCv7pB7IoCAbgF0gIVB3OABPcwNl/PF
/PNFvItH+JdKzHO15vEWwbVSPvxQvnWUf1PDu1HidUXB6NtNAr6djsZOiokn
4tB6DS3eRqkIx9TRmDaeqJHSNYmMmkRyQwajJoNZm06vT6LqEqgAjWNCuh55
k1eWBGmMFAY6ODSqwJKkM3TpNE0iWZtG0SWT9ehQwOnoE0goHibG9Dg36sVY
y/YpA8CNUsavFz7946LJocvX8PAGaqY8CnxxcfbfjhEeiCaYwqxObpremmg3
KHe+hEL4bjeqfK9V+d7UzLpRJbimEXxZCYSccbtu9m3UlhU8rHC7Wex2W2X/
pdz2fCb7XKZt7wF25y5WUzKrUcpqTGTWiBg1W6cULX5v/ydW+xdaH1yMnyXW
aXOtoheSYlcR49c5x4ewRKsnx4a6ikOZMSGO0SGsmAAqECMqiBEdQI8OYkcF
g3Oxiw22jQkE4cFGFQ+kQ4AejLgQZhwSG/aitfZxwbSYVeQdi7GNc7G1H2PB
H2BBH2CBn9IC57GCVy8xbyE2XwyN3w39Ri10rIjX2GWNMfPko0ZDh9ZrDHco
8Cb97/VQLD5GbamMOk0/VoRjePRrZNR85IiKmRtvjraNtZp439CK0SFu4HuJ
0WriNwEiHQII/E2lrFtVH29/JsuxLce9JcvFkON2VubYuZd5eq9tw0E7gEZL
tmvrYef6DLZ2J6Vm8+SOZKx1P8uY7WiUuZlyXYAYBuCG3NMEn5pti9zDTI8u
pVu3wtmQB0AAbnA6Ve5tCo8OpUu7zBVECJiXdpAfcrc2hWebnHNG5omKIXKw
OeB6PIEbvYU8kB+o7pGPhEd/IXewiH+hmHep1OcLfDIOxAZw48Yx3+vlvOsV
3C+PeF2S03vTSR0JWEMkcIPQGIvpwgnaaGJVBPHoTqI6llydQK+W0kAhNKTR
qzOY+gxmYxq9PpGiFtPUCYwa3J6g2oW5oJEG0ABLQq9KQ6+gNAAauhSqBiiR
RNElkmqTSNXJZC3yJgQ1GnNDs7FohiUSa906+Vr6hOca9stBwavVoObNPEOX
Tn75Kb7McNkLg/vPuTbXoyc0rbWqD8PaUhzOKZ0/B2tW4n7jmM/VqpnXj828
ViH4sop7tdwXFMitmtm39D5fVQvulbtdL3S9pXK4JrcbPGzbs49t2sPqTGOe
BG4ksY5LmHrQG2utVAsnIJMCYmOR9f5F1nsX2SR9ah21mBThzxL6k8VrUBw0
dhUm2s4BwRAZbBfuTxb6UyKC7KKDmTGBDNAYQInoQKQ0hEHwKW5MUJUDvYpC
7cy1DrAwUcsJWxfiYuMj5FAC51ACPyH7L/NZs27N0G3yb14oPzLiNXxybZSy
xvh58uGNV4vhtfEdivmag/+GQxnihsV021un6S2294wVGR05ojL2SOzIFaOW
K83N3ABcwzcfH6gfEyAgOZLD/PVxjq2HHc/kcjpkHn1KzwGVe2+ua1uWXVOW
XVuOy5ls16bDDmcO2p7YzayIoJzYNqlJMh1Uh1Hubsxxac9x7cx1NSq8cFZ4
InQAQIAeCjApHl0KV9SZVeCgyOMAGUB4dCjcDCqwJygw1qGATz07FMAND/hV
eG1TeHfK3Ywq1HBB8gMlSXjduG1BYy+FvAso3cG/UoL2AsHr9aO+X5Txvjjq
fbXI85Kc0Z1BaoUf+lGE42JCbRSGNmxEkyqiKeXh5PIYVI5oAKkQT9UkMYAb
J9Jp9YlknYhcl0zXIW/C1KAEF4pvVSbhSiMZJ0YqHXVXU8HC0NQSSpWIpJWQ
a6WkmkRSNTBHQlaLsco4DNBRI8J08Wg1euuWyVfEE75vcH1x9RP84iT8osnb
S/95Y8Grdetwbsx/cXPhi5P0J7utL+2ccDzEug64kWw/qHQ5Xzrj81LOl0d9
r1TOuHZ0xpWjgquV3CtlghsVPrd1M29pwLb4fnWU80WB63Wl42WZ/cAhdkca
syWF2ZrOBm6cTmbVSZi6WKoueELOXKs9H1sfWGx1YJHN/sU2uxZaJ346KWoZ
FrMCEwWQxIFk8QZQC4yYrd5xQbRoMCkBzNhACjiUiCDb2BAWogciBgsYEhXI
EqImLF7xCLEDdMSBSVnLFgVRY/3pO5filY2PcLExhxj0ERYw3y0gKGDjprAh
aLxZCx2KeI1X1hh2qcEbefJRHcpQ49VieO2tDgVMxL899PrWD3NLZdRW7KjT
9O8S/Ro1aj7GaNsb3Bht5dcf3MBPOnzzXwMk7U2AmG+XRlsEJZuCq7YivdGa
DbLBo1vpNZjPHYC3ttwBbEhntlNrlmPHIdum/ewT+1gNu5jazdjxcBvjAboh
19koc2nPdW/PRqoDMGKQe7bnehhlHFxseILSAG4YFByD3KVT4YJqHXI3JDwA
I+jrbqA9ABFIZihw84Kci+cZhVebjNOu5IJt6ZR7IPmRxzPl80F19BagmZdz
KJrOM28Vg4draCch73K595Vi74sypjGddDoOq4kg1MYQqiPR8FpVNPlYNPlo
NKk8nqJJBLVA00opjen0E7vox6XkaglZJ6Xq0pjaVHQ05mDGq3YJoyqZpk6l
ATE0KTRtMlWfTK0BVyIh1iWR9YlkeNAkktQgNoRYpRCrEmM6XHKA3ji1afIX
SVY/N7uh5MZP218+CX35YNWL7zeh/ajXXt1NieobF2f/WkL4Wmp1bvuEuhDr
mg1Ya5Jdv8J5sGTG+RLPq2U+lwAd5TMulftcruChVa6lgpvgXCoF19S+t8pc
r+a7XlM4XcyxB5PSns5qSmE2pbFPprBOpbJqxUxNJLFq9Z8Of4qKoogbiyft
XWyTusBGNG9q+HJ6bABJGMiMWYnFbeGKNzhGBTsJg5nRAbQIf2ZEECMygB4V
AMQAV2ILr2ZiRAcyYvEShzAYnAsrBkdKHNIetOgVpK0L0BwKgsaHGEAjcD7L
f+XC0NDgzcPExvDVf2NPrqGyRtrbyxqjOJShxuvI9Rr/Jw5lODdGtmLfGuEY
K/o1atTcYkRlxCi93GIFx0hu4LeomC9SGQmQNxQIWly8I+zYZqe2TMfmbDeT
0qtb7jFQwOtVuaB2SY5jZ7aD4bB960H2qQPsU/tZx3ezdFGUuq02hgysLdux
W+bcKXMDyWGUebRmuQAumrPcwLYYQXggveHerQBicIwK1065SxdQQuHUqXQH
+dGucOuUuyKxIXfpyHXFueHernhV9GiXu7cpucCQdrknnhyDP4prUnmB8Bgo
4oHqOF/EgwPCA16vokFa3sUy74tFXhez6aY0YlMcVhuN6WOJulhCJRp6JVSK
CFoJSZ9CV8fTdMnUxgyGPoPRmEbVo4gXuVJEr5KilqsmhYlmTKT0qiSkMdQA
DfAgKRQNnHiyTkLSJZJrpOQ6CbEWnuOJ6nhSVQKpMo5QFYupY7CqOEwnxPRx
mDZqemXY1I6wiU9k5N+MM/9xYwWaWXsSigoa34W9/GqxuRX74u6K31tdfsqe
9JVoYs/mCfoQa916rDnRrk/mdPaI77kST6DEhfKZl8pmXCj3vXiUdx7tQeJf
LxfcOsa7WuFzo8ztssrlitzx8xy7wUzbjl2s00nM02lsgMbJJJY2jlGxeVrx
8j/tn2O191OrAwut9i6evGeJjXSuVdQCLHIVMTaIGhdIQrFwP6IwnA+CITrU
ITKIEetPCQ9ghweBSaGDPUGvAYwo+FXwLOYSRwg7BhgSjKocsUHs2ECgDd3c
fg39EOcG+JQFZL8lPoGB/hvCNr5Z1hiqhY4a8RqnrPHHmPz4DmUoGjo0vPZ/
6FCGuDFOK/atEY7xI6Mjb0MYMRJruYJj1NXEgA781jZ0cVv6ruEASR8JEEBH
UsTmss1uZzIdW7JcAR3wru9SoLn4fhWnS+bYnWXfeYjVcsi25SCraS/rZBqz
QUSpCrY2JU82yRw7keRwa8txNsg5wA1Drjv8IaZc0BIo1NGp9OiWOwEfupRg
ZFxNSjej3NmgQKcT/0oHLjnagDzwkOsCuOiUuyNWADcU3ni91LMTJdi9OtC6
Qg+TCiQHtzefd66IB4YFDdgWci8dEVw+wrtQ4nW+gPN5NsOQRjwRi+mj4Yc+
URNNqowi1CYQqxPINcmMapTKoJzIQPt5GtLoNRKyNo5UKaJVJKAMOZ4eB4GB
oAH2pDKVXplEqZSSQW+oUynqBJI2ETVNKuPJGhGhOpGoi8e0YkIVoEOEaYTo
qMUErcgsOQgl27DqIOvrqdN+bOD80vnR3zo/+HvPR+iCyxsLUWDjmxAUMr/8
4W811Ee7bL6ImWDYOEEXZK3ZgJ2S2vfKnAZLZ50v9bpUwjtb4nuhfNb5Mp/z
5WifyeclaGznRjnvchn/y1LXSwqnS7n2n2fb9h1gdexmnUphNaezwKc0JLEq
Y+jla63zFr63Z47V/nlW+xdY7148efdSm4RPrHYuIEauIseGOMQG0sGJCIOY
UWF8YSAlKsguIsg+OoAMlAB0RKD6JysSaQ9GVADQgxYVgHQIXutgxeJ9FmEo
WwjuZhV560I0Ix+CK42QuZj/Qo6/38p1a0NHq4WOjHiNV9Z4M08+XuPVYnht
+ALAsRyK+YKD/55DGfoY3lIZtRU7PMIxfAvH+JHRsUdULG+XHpcb5itiET0s
ATKmAklNFkYUb+a2HHJsyXZryeEYcuFt7j1YwD1/xLtf7nxW7tiZyW4/zG49
yDq9h9mURK0Nx06stepNm9Ijd27PcQR70pbt3JHj2pwJGHED8hhzXVFDFtyH
EtU3DHL3HqVLt8LRpHQ1IWggYhgUTiakPdwMKrd2sCpK945cN9AenbmObXIO
4obcC7jRCaIljwvcaFfxDCrvDiXXqPLuUXmjiFoBt78Qzcd9XswHzwL/tYP5
nPPZzI400vFYTBtL1ArJVVGkoxHkajFND9BIpR7fRalNY9Rm0OszGA2pFH08
WRtLOiZmaFPR1QbImKCiKCIGvAIuqpIpVSkUFNVIJleJiaBYAB0AjVoJVp1I
0MYTdHEYQKMyGkPbOYRom4cWLFIc2vBzNJJQFWjzZcrkJzq3H1rf/2vb7J9b
Zvxq/OjXtll/7/0YXS91ac4Lg8tfCgj3k62vRExoXz9BF2yt3kRoTnPqUToj
bpR5XSjm9RUJBstmnysVDJTwz5WiJa5gXr4s5V4s5V8+4npR5oDERpZt1wH2
mV3ADebxZFZjCqs2nnk0inos2Eoxd8K+j632zbfet9gmY9GkjCXW4k8n7VhK
Re/9AFq0PyEqyDFmvXtUgG10KAuYEBnACkeuBEwKIyqQER0I3oQZHciGTyMC
GRGIHqjPAr8tIgA8C0MYahsbzIhcjm2aj3qvQeBTQGwstvNb9VloSJB56Z/5
vFkLHbrR4I2I11vLGm9tvFoMrw1fUT7coQxPef1Hhl7f+jE03TZqK3Z4hONd
ol9jRc3HGW0bixv4aBuabsMbK2MDZIQCSRbHFG7mnzns2AFeI8ejIxe5jD6l
x2CB17lC936FU1+uvTHLvuOwXds+VquU0h6FGYQTBzOJfSo3owzsjFtrthO4
lTNZzh2oGOLcnOlszOWYZByUKle4mcDvKN265c5GhXMXenU3KtEqwi5U9HAG
bqBCh4qDN1bcO2TOoF7gFakOJZAHuMEzADeUiB6dSi5gpDuPd7aI35vnjcKl
+d6gPS6AbSnknFW5DRxmtKWQaiOxShAbQkpFDKUsklwaSVUnU2pS8WAGKI3d
zJPp5FoJRSskqmMpumSmOo31KjoOMiPFHOuim3MacDSpVFxUELSgWxJJdRJC
nQTTJ+B7AoEbQvh3YZrI1+iIQz4FfqksHKsIsPkiwfrrcoenLR/8pe2Dn077
/oLutZz517b3f22d8XMr/+dGhx+ypt1OsrkYObF13QRNsI16M6EpA74zzv0l
M84ege8/twc0VcmMwSOCviP8/hJBfxHvcqnPFyVc5FmOuF3IdTifbdefaWs6
wG5OZZ1IYdUlMusSWRoRszyCfNR/Yu7HE3d/ZLVvkc3eJZPSF01KW2IV8ym2
8zOgAegEB2GwfawfITLYOTqQEhFiHxWE6hvh/vSdAWzwIFEBTBwa5gOSA2EE
lxzMSPSMFEi0PxUwsnMpWuSFiAF6Yz7V/7MPg4IDwzZvehMalhGv0RbyDJU1
Xt3V+NY8+fDG68jhNfMCQPO9jcMdivnK1/8Fh2LBjfFbsRYRDovolwU3hkdG
xx1RGY8beEvFfDH9EED2vwUgrxVISmJ8/lbftkOORhn6Kd+KqhzcbqVHfx73
XKHXQAG6fckkd+3Mtus+zOraRelIxoyHKAMyVn+eO3zdJEfd2y65W4fMvT3L
CejRdNDBANDAIxzdChecGG4muQuaa5M5mBSgZ3BugE+BPxbkh9ypA8VHXdrh
62Bbcl07lG7tua7tABalB4DCoPJqV3gbcG6Y8DGZ3kJ+b755Mo7bn88dzOee
y+P0Kh3PZjLb0kj18HaOhLcwuUJILheS1Ylot4ZaQqtLp9Wks07sptcl0XSA
glhyZRxNk4xqoepUfL41CZQGKoeq8R6KOoWmTqKok6hqCUkTT9RJyJp4cl0i
EdBRE0/QxGNq+BfFon+XOhYXG0JMh0NDJyYc2Tr9WIDNFbH1gxL7R42zfur8
6LtTM//S+v7PTb6/tL//S8uMX055/7nB7ofsabck1p9HT2xZO6EyyOZYGOF0
uotR7nL2yMyuIs+BAuCGYOCIb/8RQW8RDxjSU8i/UOJzGd+ldq7I/VyO42CW
fe8hW+M+9im8slEnYdZJwaQwjm4nHF393sE5VrvmWO1ZNGnPYpu0hZNTFk7c
MWfKtsVTI1cTo1djwiBGbIhT5GpK9BpboMTOQLtw4IM/NcKPvtOPsdOPutOP
FulPw00KXuUApRHIwKHBxqnCivGnRH5G2rIQZTYCP8QCFhADFvGCggI2hG0c
Bo2xxl2HIl5vL2u8Y+PVYnjNvKIcHAq8Gf+vHMoQN0a2YodPxQ6PcAy/gMki
+jUyMvrGiMrY3MBHVCxW96Ato8PoYQGQtyiQ1KSE/K0z2/Y7mlBx0rMtl9Ou
4HYrPLuUAA1eP5pX9e7N55zNc+tTuHbnskxZzF6F3Vmly1kVpxdFzV3b8dSo
ARkWpzPZrs2HHA05IEUACG5diBVgSVzgtVvlbpQ5oy8qXYwyxy5ULEX1UpPM
GYSHUe4IuOhSuXTIcG4AxGRueCMG+Z12VGX1MqlQCh0N+Ofz0Fwtng07W8Ab
hJPv1a1y6T3Mak2n1MUT1UKCXkKoTiBopdRatGGDVgtKI4OpS6E1JNNqgABC
cmUsVZfM0JmhkYpXRJPp6KTgFdFkapWIrJYCdsga1HYhaRNIegm5NpFUC2Ij
HgPnAmIDQQPERjR+hFh1HH6EGHDjqJ/1Venku6WOD2p9nzfNenpq1vfNH/x0
yvenppl/aZnxlxO8H2rtv82cekNifS5qQlPohPKASWUbsFNpzgaZc3fx+8Yi
tM3AmM/vLfLtK/LpLuSZCryN8L+0xPdiMb+/WHC20KM/y+FspkPXQVvDAbvm
XexT6azqBGa1iFEWRT+6FSte9qd9wI251hmLJu9aPCl50RTpAqvtn2I7VoBJ
oUT5kyKWY5HrOGA3woMdo0Bp+NF2+DF3+jMi/OlwIv1oEf4MeN3pR9+xmhLh
R4nyo0T6m8uk8EuoUgrPO5agKbZgcCjzscC5jv6rPtuwfu0QNCxqoUMRrxGT
a+OnNd4oa4x0KEONV4v1Gv8vOBTzh0VLZaxW7Mjo1/CtXyMjo2NEzd9pJBbQ
gS8oPjwCIAfGBwhOjz2pqcmqHR+3HXaG936ngovi33JvdGeKHM2vAT3O5nEH
UHbCqwtfqdGvcgJidCs8elQeRgXHKAOlgSgBeuBMtktbtnPTYbAtHsZcNzy7
7mqSOQEiumQuqMoB2gOVSeH3OyOegNIAvSFz7lCgkmmHEjQJyB7nTsQNVPcA
sLSDzJADTNxRCl3l3VMAxMAlB9oChJqziBuFgA7vbpVb7yFWaxq1VkzWiijg
RIAYNSn02hRKYxqtcRezOp3RmEqpR7s10HK/KhFNk8Qwiw0kM5KR2EB10WRa
VRIFnUSiJpWiTiaBT9ElkNTx5BoJETVTEDeIIDY0UZguGtPGYjrzEaLiRg1e
Gi3Ziqn9rL7cNf1Oucs9Df+b476P632ftXz4A7pHe+aPJ31/qvP8rtrh2aGp
X8ZbD6LwxsTSwEkla7HjqahqZCqcbSjyRgOGebyuQt+eQgFKsxR5G1QeZ4vQ
hgFwan3F3mezHHsP2yNu7GO37GY1pjB1IkaVkFEcTi9fPyV/8XtgUjLm2aQv
npyxZHLy4qmSudZhc8k7/GyjQDAE20X5kcJXESPWu0WsZkQGsSICaCA2dvjR
UXjDn477EbAtcKgR/kh4IAuDkAKChBrpR432J0esJIPYWPMxFvwxFrLENuCz
+SFB/mGbwgAX5jNUCx0Z8Ro+uTZOWePNPPl4DmVoeO0dHcp/I1I+DjeGWiqj
TsWOjHCMenHbOJHRdxyJxbmBtozi9PjXAILT4xVAwFHKtixuSrXvVboaFB4G
BegN706FN6owwE95Gcek9ALn0puHNnKcLRScRRdBenXiggR+fycYClTNAGnh
0ZLt2pHt0nzIySBzR93YXJce0Bu59l14NQMN5ssdgRVGlatB5miSuZjwEgcA
BNEDdWxdDQAWmQN8sVOGLIxBCdoD/jNQxgOfwefg3EBbO/oLvM0+BecGfxBN
w7n3ZbFb9zBqE+kaEV0rpiFopFNOZtD0afTqXcyTuxmNSWR9AkkrAv1A16cC
NFi42DBHNVA5FH+lIVykkIEYmlSwKmR1PFGfSIJTJyXWSoj6BKJGhFLrAA1d
FCKGHm+/gtKoEWO1KMVBKN6MVflZ3dg3/fYxjztV/Hu1Pg/0gqcnZ39/eua3
J2Z93+j7Q63X4yr7xwemXBVb922doA+xKgmaXLqRqEtwPJPlaCiY3VHobVJ4
dipBY/h2FQi6EDfAsnmARztXxAOh1Vvo2Zvp0H3I1rSf3Y58CgqI6hKYx6Lp
xTupJaE2ioUT0j+w2rVgUsbSyelLpiQvmRr/idXWuVjkSmLUaixiFTEmyCEy
gL4jmBPlR97pD0qDGRHACAd7AupiFTl8tZkPQAykQHYi4QHP9IgAejiwxZ8e
5U8JX4YqGyEfATTowctnBgesWrsmxNw9gTPauOtQxGvMssaoefJ3cShD0dBx
HAq4g/9lhzL0YTHdNlYrduT2nuHRr7Eio2PcvjTqKH0unv7KwXcU/5sAwada
9hzeEnAqxaFP7oiubFNyOmQuBhXaXg7oOCPzOJPr2SHzBJIY5B6dcsQKg8yj
NdutLdejJdejPdvlDFgbVE31aMlyhU+bM53bs11Nco4hx7lH6W7KdeySO3XL
HMCzdMuccfnhZMqxNSJuOIMTAbB0orqHizkehtq7QIwcB5AfBhXQgwP06FR6
4sejO88T7QPBudGV/0pvoIYseh959WWzW/cxa5PoaglVl0pr2EWtSabpkij1
GfSTexgn0qm1AA0xqQpt8aJXJeJiI+21TzGXOJJRLhSdZAqYFDQmL6Vo4kka
cCvxpFq0CoygFaOglzoG08Vg1TGoyoES5q86sIgbGiGhaDNW6Wd1/SB255j7
V2qfOzqf+9X8Ryfe/7bRF+jxvHHGd3qvR0ftHh2Yellkbdo8QRNsVRw0uWQT
SSNyaM5y7sifdSYf4OzdBnIr39eQJzDl8zoLuB0qT2MeD8k/oGi+R89BW9NB
284Dtq172PVSplrM0IqRSSnaSSkKsMqdOyED9MaCSaA3UpdMTVk6RThn6pYF
9IhVjKgAZtRqUsRSLHyjJ4iN8EAmKIrw1ZRtq8CSUCNWk3esIsFr+CrSTnTI
YFJAYOAAYSAjEwAuBthC2bIAW/cJFrSUsnaRW9Cq5WtCgjahcqgFNCxqoW9M
ro1W1ni1/e/NPPl4jVeL4bWhBYCjOpT/1OLQf4Mbb23FWkQ4hm/vGSsyOm7U
3JIbeIlD9poelgDB6fHOANm39/D2oMY4uz6ABqpIuHbKnNHNKXKXNoVHW657
i8zrjIzTmuMBr2dkniAqmrNcm7Lcmg45N2UhSrRko9gGKBP4YmcOfB1VR01y
D7AwPUqwIeBHXLoRLpy75U7AjW6ZozHbrkvmiKwKGJZcx85cB5PMwSBz6EDc
cELh0lyHTuCY0qlD7mbIcwWT0qnkdCrcDXleaNsPyPV8j648FOfAuSEAbnQX
cvtzmW2HaI0ZZD2AAl0lz6iBh9302l2MU7to9VKyXkxElY04WmUsXQcmBW32
YwE9UOILlTiAGIxX3EilalIoujS6NhElvqol5DoULAc9gF/NFoV6KGBMqs0n
DtPjIXN41qELmIjAjQo/qy8OEb6qcr9VybtdO+Nutc/Xx2c/Pe77qNb32YmZ
z6u9HpazH+ydejHO2rBpInCjMHBK8QaiXup8Osu5TeXTokK3bZ4BFacQdKj4
BhW+Vw2+Dyre2Xxur8IN/o66DtkbDti27WGd2sWqTWSq4xhqMbM4kl6wmZi/
cuLhjyemfWSVPn9S2qJJKYunJi+ZFD1n2qYFBBAS4QG24UEOIBh2BnlE+GHb
VjPAnoDMCF9F3raKum0VDV53rKLsXIlDYxUZXrejZ1KEHxmIgRIdgbSdi3Gx
sQALXOIUsnLh2uCAsE0bX0Nj1HHXoYjX8IU8Y6U1xsuTWzRehzsU8wLAcRzK
f2no9a0fFi0ViwXFFq3YkRGOd4+aj8EN1FLBU6PyEQDJeQeAHLIAyN79+w5H
rmkQ2XejNijHqPQEJWBAdU7XDrzI0Jrt3JZj34Jqnk6tOSih0XTYBeeGU/NB
5yY48Jzp0poJDEHRL6BKa5YLupxazukGEOU64l0VFwP4FKCHzB4UhTHHAemQ
XDsTuBiZI1DClOMAX+wAIwMAUTgDQzpBjShdOmXga5xNKlAdaF9HVz5adwza
oyff06jg9KGFpSjIAdzoKuSeVdl1ZrPO7Gc07Wed3sc8sZt2eh+rcQ8Tzql0
Sl0iuVpE1oqoahGtUkirSKBrzKv/ABd43Av1U5BnMWfLqWjoNZ2mQZsDyXop
qS6RWJ1I1CYQQV1oY1HjVWduoODQ0McTwKTUxGN1Eqw8mlCwEavwt7qyH7ul
8bip5t3V+9yt871XN+txg89Dvc+TOt+nVZz7ZbZ39049J7RuD5tYFWRVEDC5
eD1Bn+R08rBjq9K3KY/bBtxQejcpBO15Pu1KbqvKu03lCQzpAWDK4a/G3XjQ
oWMPq3Uv+1QG4oY2gVkWwyjcTs0PwwpWTNj7kVXaHKu0BZNSF6HiRtIim+iP
p21ZRo7yI4avJu5YSdkR4g6s2OrPCF9F2bGavt2PuQO1Uejmg76yGgFk20rK
9pVkYAhYm50riUAPQAcizGJs/TwseCErYPnHoUEB69eEjChrRI2MeI1b1hi5
/c+y8WrhUIaioRYLAMdxKP/VSPn43BhqqYzTirXYwjFq9GvUyOj4o21ylRLv
qijxXRxDAJFZAASnhwVAMi0AgtMDrTU+HBtWG+dslHHaZCAwOG057u1yr06Z
K5oTyXFsPcg+s5/Smk5sO0g7k8luPgxC2qUlxwPRAyQHvGYCSZzhufkwSm4A
WEB+GGUeJrkb3qhFXdpehbNRgVc5ABfgSnLsjfCQYwe46M6168oF24LogSiR
a9sJbJG/5ga85rnhjgb/E/I8u1RuHQoPUOlobi7fqwdpD9SNRa0WlZMxy85w
kN16iNV0gNG8l9Wwj3VyP7t1N+1UMn6DUhxFJ6LVJzPqk1B9Q4vv8tJK8TaK
lKZOoqHp1xSU99AkoWF5fTpVi8QGqSYJ9AaaRtHEo+KGueuqFb2qguoRMdCN
sXVSglZEqIglFG6YXhUw8coh0i2t100d/45ecEfLv1vj+6gev8qh1vdxBedu
Cfv2nikDUVatGyceDUTcKFpL0CW5nMh0blb4nM7ntyJucE/K+WdUiBtNcs8W
lWebEi1kA+XWmuveccChbS+7eTfrZCqzPpWlETEKd9Dyt1Hy1kzPW/pexgdW
aZ+85saSqdIFNpGfUrYsY0WFcCKCXCIDmOErCJv9mVtXs7f7AzHo23GlsXUl
OogVCCbUnatpO1bRdqymbccBsgNUx0pSJGDnM3LYPGztCtaahdw1q5atDQ3e
io+f4Epj9IjX0OTaO5Y13my8julQhg+vjdND+Q9ebfDvfYycbhu52HxkhMMi
+mWxLdAiaj7WiAq+hSMPp8dYAPl3FEhmws66OBeDzP1MjltLrkdzjntrDudM
rhuoi9b9rGYp1hxldTJswokIm2bx1OY9jNZD7OYsJ6BHM0ADaQ93cCtNBwEg
cFybM11bDjl15nI60NwKnviSc3rlqAqK+xTnbpkzrjccunLN9MCfZY7wCvLD
lGPXAc9yhA6j0qkTr6OakHVyNikcTGB8lK4dCs4rBYJW/Xj24f3is4X8ngL3
vhxHQza4FWYzSI79jOb97Pb99JZ06kkQDGJSrRAkB60+hQEWpj6NWZ3K0KWi
2XkNnCR0B4oGpUZpmiQKaAxNCrU6haYDlQIGByW+iNp4olqEZAZAA5U10I3S
r4LlcEBvgENRCwlHowj567CjfhOvZJK+1Apu6QS3tIKvtNyvtIKHtfx7OsHX
ep9HR92/OsK+tWtKX6TVyfVWpQFW+f6Tj2wka5JdGjJdm+Q+J1X8Jhm3ScE9
nsNtlvNb5NyTMo9TCs9WBc+o9AaQtuRw2vbZN2ewQGwcT2PWSpnH4hj526iq
MJIqdFruvAlIbMyzBm6kLJqStGxq4nyrbXOwzcvIEauJ4Suw7X72O/3pW1ez
tq8ib15J34KfrSvIW1aQt60gweuWz+CZsnUFiA0K8izAkFVUoAe8hq8k7VhC
2LiSHrrYPXTFvHWBq8M2rjdDY9Ra6FDEa8RCHsuyxhj7ycdzKEPR0KEV5f+v
OZTh3BirFTt8mn7U7T3Dt379K1HzArAq+GLz/JEAwenx7yuQzBShOsazLcf1
TI5LC17BwEsWTogGu5itUdNPhk1Rh2KadVj9BpuTwqnw47v5kF0LnEynlizn
ZnywBXDRdMgVVx0uLfsd4flMNogEd1Ous0mGEwPEhgzpDROIihyghGP3K1ag
V7Awphx2VzYb0AEaw4R3XkxyMDK2RqUz8jIqZ8AI6tgiI+NmUrkb0JpBz548
j94CNK7SXyToKuKdVTq3Z7HbD7JaDrLaDrINh5nteyjNqeRTEuJxEbk+jlIr
ptVK6MdBcqQza9IYNamMmmS6NpWuxd2KBsVEQXiQNKiZQtFIKRoJ4kZtMkWf
QETFT3MiFI+GamNQMwUkR1UMVhmDoZsfYwmaOOxoDJa3dnqF/8SLh0lfqnk3
qn1uaPm3KrxuVvHu1fDvqHn39T4Py11vFrFupEzqiUDcOBJgpfKfWhxGVkud
6zPdag9zGxT8Uznep2Xe9TncUzLEkBMyrxMyTpPM26DgGmTwbXdr3WPbtJt9
Io1Zn8zUShgl0fS8zWTFBlJe6JTMuROT51glfWqdMm9S0qJp0mVTJXOtNn2E
bV5K2uHH2unHhPf+5gCHHZ+RtqwCdUHaupK4DeTHCnggb4EDD58RN8OvvjoA
E/IOOCtRsXTHZ5RNy7GNK5yDVyxYF+S3ccO6EdCw3OI1NLk2bllj1Dz5eNFQ
i/Ua5hXl/685lKGPkdNtFlOx7xLhGD8yasEN+O7hC3wK3wRI3mgAUVgABKeH
BUCyhwMkc09yVSy3NdMJVTNyOS05rgCE1sOgBFx6MxmdGdSTCBGuJw876GKp
tRunnYqZfjqZBj/QzxywbTls15rl3Jrt0nIY/p/sbqZH8wFgjjs+IetmyHEy
yFy7ZajgiXooOU5o20+uAygNkCKmXCfUqEXtFSdTtp0p27YbRIjcEWyLUe7U
CWBBv2TfLbPvUjoBNwyoOYt3ZJTOaEpOyelBtztxB4vwcZUiwUCha18WuyOT
ZTps25nJMu6ndaSTWpOJTYnEE2LycTGlXkKvE1P/f/beK7qt9EzXvLRdUNYm
iLT3Rs5Moux2qiqHSsrMVE7MVGDOCYEBRM6BmRQpBiUqkACIxCRRwe62+9jd
p8/M6Zmbueq15r7XOhfz/RtVtIqpKJXt43LPXv/CAiGpqoDSfvC+X5xt5jxU
Ew86QHXgj1rY4FlmWjlTrZzJDs5UO3uyNXGyjXW3nT3VzpxCcVEG+JSp+oRp
ChqgMabjfSjV2INa9PxuFULHRCU2RRWRjlYivTGR+8E/Gpj/PHbk3ybS/zj9
w38ZSf3X0bT/c/rIv42l/s/xI//3sOxfPMQfGveulNKeXKD15dAcOYd815nj
TZIHBsWMPu2BLf2ZJfWJOeW+IfWp5cgzC+LGI5P8qSUtZEsLW0R+QLSW90xN
zrYQD1qJO1WcvnK2s5Blu8xw5e/V/fKD5o/3tHyyp/mzA03HsebTh6p/Qbv8
C6zwFPNmJr0kW1iUKyzOJAqzGEUZnNJsfmm2oCRHWJorLssRw2NpjqA4iyzK
IgoyWNfPJCKAnKIXnqQXnaKXZeFlCBr8c6c/upCbeeVc3lfQ2Lrd9euda9uG
Nd5qk/9TPfk3lobuJoey7lD+OiXlO3Njy5TK5m767ab37FwyuqFFhVrchna3
xQFC0WMjQCh6bAQIRY8NALFszuH29naPVPxowSiJWiXgmv3gUAziZZtiDVyG
lR+1iiMmecgkCpiF8wbJdCU+ee7g42psroPwd/IDOmEQjlG8YBDC32T4g36D
HP2V7gXRooyi6RziRYsE0LFoBnsiiZmpbK8JgAB6I04S0aJJgEhChUbRjwgm
fOBMxCpGE5LNABYSaQ+7KGaTLLvEi6gnDqAkjID3ccpX3GgNHLiV176jqwAQ
h2jZxI8aucs6zrKWEWpP9LfS5xroT+oYs43sR034owaWX4U/UROP2/HHHfij
ds6DdvxBK+c+AKSdPd3GBoExDU86OACTmSbGgxbm/Qb6FJUuiXPjfjV2H9WT
U22wVYgY42jxNDZRkzhRTR+tpLsuY+O5H/zWwPzdSPofR478t4mj/2386L+M
pP2P6bR/HUn5H6NH/q9B8R+d7N/V710spT08T/Pl0Ow5h7zXmEM1wnt6+XRv
6n3LkSeW1IfG5OnepFlT2lNTyqwl9YFR8dic6rekBk3CZz3iOTX3iYp81Ebc
ayLu1OK+mxxXIRu44cyldf/yg6aP9jR/srfp84NNJ7CmEwdu/Zx25TNGwWm8
JJsoyWAUZXILMhMLznBK8xWleeKyfGlprqgsT1KaLy3Jl5fmyYrz5MW5kuJs
UUGWoCCDuH6adf1UYkkGu+RUYmEWWXAy7WzW6Ytnc4uKCjeENdZjoV/vXFsf
yLNlWGNzPfnXE6/UTJ7New1241D+coND3/Xa3N22ZSp28xSO7aYFbi41X9++
BOiAjw7OtwHIzgpEb9AN3PrQ3wv3qSRoVaKl8yY5eIoXtqQVt3LVlhS1iBZA
BphlEbP4gZo7dJV+7+reZ234fLdwvlsU0In9ekmwix/QI3ogjBhEQaMczE7U
qgyZpYsWOZigGKKHfNEkRBgBRFjEyMJYRBQugBUS+KUlswD0CdIeCCCCL8Md
gBQTd9EMJAHbwl9xCAEgEbs4BoIETUgWLzvQRuznrtTXfUfXfOlv+lNfOcRr
Zu4LHSOmYYU6mIFWxnwT61kT+0kb8biVeNzEediCz6mJJ2r8sZqYVRMPVUh4
3EcTRzkzHeyZVuYMNbL4XivzYTsc1r2mxOk6anwonHqUNHlQj8VHl6NTix7H
q+l3qhPHqxOGK+n289hYLu23esY/DqX/89CR342m/3E8/Q93jvzr3dR/GU7+
7yNH/ueA6PcW1pvafYsltKlzNG/2HlvOIc81lq9CMNWrnOxJvWdKmzWn3jck
TeoQNx4bQWwk3zcqHhlT5kwpfgPvcafgqYo7207ca8Snm4mxesJ3E/eUcWzX
WC7gxi9ojR/uaQJuHDvYcBxx48aHe658CrKBUXImoRCURgajIJNbmssvziGL
c7jxxyI4ubziXH5Jnqg0T1SSJy7OkxblSotyxECPoix+QY6sOItTeEp8+cyv
wKEUXLkA3gTOhljo+kaDzQN5dhnW2DLxGncoGxKv3wmHEr82pFQ2p2I3dNPv
UPq13XTieOkXoANgCx/dOkAoemwJEM9WAHHuRoGA6hio/LW/SwC3YcQqW7Ap
A0bJolX2AtDhhq9vZcQmXLLKojbJgoE/302Ooq0c++cb6HNdgnm91N8t9vdI
Al1Cf48oqBMsdAuDXbxQrzBglIIOgX9U2CyNoGHpskVUDCZeNEsBL4gYwAqw
LegIYhYQIQIU90ChD0QVBBNED14MIQs9UsEQ/oqVt2wVRNF/kihml8YckiXw
Ow7JikP+gloZ+aIv/bd98pcW8rkeX+1lR1SsYCsr0Myab2I/bcGfNnGeNrID
anxeQzzT4M/U+BMVqA7ObAc4l/hh329nPlCz4PFRG+MxcKOF9aA+YYaq6bpP
oQOUxlQ1UhrjKECagLhBTe9BpwYborgxmv3BP/YyfzuY/vvBI/80kv57UB3j
6X+cTP/DaPK/jhz5P/qE/2RirNXujxTRJvJpbuBG9kH3FabvFveuTj7eqZw2
gLpIndEnTfQoH5rSHumTHxqUM3r5fUPyM1PKMwNvVsub7SAfNOPTTfhkAzFS
g/dXE97buO1KoiuH1vkRreHDvQ2f7G/6/EDdF4cbj++98RHt0q+w4jP0oixW
8ZmEkkxh4RlmYTYZPwXZ3AIwJtncwmwwL3hhJocq6iBLs7nF2bySHAGgoxC8
TEbi9TOiq6d/fjU349qFs3FobDn6b0Pn2npYo2NXYY2v1ZPv4FDWx2vE17z+
zTqU+LWeUtmcin17sPn7lX6tTzUHdABp1+mxFUDi9NgIEIoeGwFC0WMDQGxx
gIDk8N067deCEZBRM3NQxXjQrFgFH2FLXnEqX9gVyw5JxChc6OUudOF3btL9
Z2nRdsxvpIo3AB0Gmb9T5NdJAj0if5c42C0IdQv9OqHfAPQA8yJYsMiiQCSz
YsmKpqDDHwTPsmQRx0zCWFxpWEQxEz9GkQSIsQzcsIjBNyGGWJFtQeFQKuGy
aEYiJGbmrSAvI4raxMtgZ4AeTvmyU7nqUKx50l+7lKtO0Wsb+dLIeaHjrHZz
Yir2QhtnrokTVuERDR7sJOD4tQQABOjxVEXRQ815rMWfaDmzKtasmvNUy55X
AWqYs030hw2oNuNePQZPHjYm3K9LmKpBKde71dSh7MlEfcIEwKSBPlyV6Dif
ANz4jY75m4H03w2m/+Nw+u/gjKT/YSLt92NH/jh85N98wt8aGSs1+4MFtDv5
NGfmHmv2Qdclhu82d7xbNqaRT/am3NOnTPYmjXXJ7vUm39cl3e+VT+lkM73K
J8aUJ3reQw33YTNxrxmggY/XEyP1RH8l7inn2K8ynNk09Ye0uo/31n8K3NhX
98WhplP7b3y05+qvsKIMRkkGvSSDKDyOFeZICnP4RTm8wmxeESIDvzBXjB7h
ZHELqfhGEQAkg1OUiZdmsoqOYwUZwmunfngl89jV/OzN0NiyxGt9IM9uwhob
6sm3Kw1926HEBwCCQ4Hb7W/WocSv7VKxm0s4Nkzh2CU34IMCdIyOjo5QF5i7
twESp8dWAPFtBRD3VgD5Wg7XbLX6yk8HOgWraGhwcsyhDFiUQbOcWnagfOlO
RdMtHPJFIz+sw0MaZqACi96gLRrYQZMsYElG6VejElVx6GRIe+ik/i5RoFs8
b5D49SI4QT1/wSAIGfgBE2qTX7SgilMkMOCYUbaFEiGUNwF6mNEBC4NyKKic
A3W6LSNxwkdWBRWlgw4RRM38ZTN3ycxdtFAhEWRbJFG7AtD33JH8ypX6ypPy
xq147ZKvWfgv9MRKD77cQ6x04hE1PteGP1MRC51EoIsIaPC5TiQ8nsLRsp91
AS5Yj1WMJ/Co5syrmE/aGLMt9EdNCbMN2KNG7HEzNUCsluJGLf1uTULcqtyt
TZiop483JEw0M4ZrmfZzCSM5P3itY/62H/RG+m+HjoJhQfQYO/K74dQ/jB79
V6/gjZGxVLXPf502mk9zZOwxZx1yXmJ6bnPvdIpH1LK7upTJnqS7uqTRTulU
t2K6WzGjk93tkU7rFA/1ybO93Psq7v1WYroRv9tIjDUQwzX4QCXHVcaxX2c6
smkdH9JqP95X9+mBRuDGMazxJHbr57Srv0bcKM7ilZ7ACs9wCjLJwkxewRlu
GSiKTLIoE9QFrxgRAwwLkIRXnCMoRq/AL+GU2CCKTiVdzvgUxEbBpXNfOZQN
7a5blHitD+T5prDGrhKvu3cof+nBoe9xbdndtl03/dvceLuEY3PJaLzUHC6g
B2iztwEyjPixBUAoemwECEWPjQDZMocLx2y1eKsyAxoeSP2ITR6xK0MWlFih
2t6VS86UV+601y7Fmk3w0kLE9PiSlr7aQ4+ZhQso+aJEZefmZL9JMW9K8gM9
emV+PXWMcCSoSKxH4O8F+cEP9AqDRiHVbi8BewLoQO1vcFC8FH5E9KBCpgI0
EQhFP4AYAlRKahFREQ/hkom7ZEVF6RF43cRbMvLglWUzqBFR1AQwkUTNVCOM
Q/HClfYaVaEnPwd6OCSvHJLnFuGygVzSEcs6ItZFRHrIcA8R7sID3USgE/ej
Yg/OfDdnTst8pmX6tSy/mgXceNrKeNKSCLhApzXxSSs8RyM47tejKRzTIDxq
0SNiCFrOQr/bzByuZlryMODGSyP+m76jvxtA3PgN0APOyJHfDqb+bjDtX7z8
l730SMW+J1dow2dp9ow9pqyDjotsdykxqhUPq8R3e5InOhXj3coRrXSiUzbV
JZ/plk50SyZ7lCA/HujImQ7udBMx2UTcqcOHa4nBWtxXwbFdZ9uuJtozaG3A
jV/sq/30YP1n+6u/wOqPH7r5M9rFj7HCDKL4JFZ0ill4ml6YJS44ySk9TZZm
kKVniNIMOGQZ0COLW5zJRRhB6EDyozgHwMItPi27nvHptfys6185lG3aXTeU
eG0Oa2zRJv/1evJvTrzuxqH81cby7P7afSp28xSODaVfwI23F9PDpwT0AGG2
To/NAInT4x0DINvmcK12m68ue66Dv+JMitrlYQdahxS0waMsbE9BG5ScaWvO
5JcOxUu76KVduuYQr9gBL8kLZnnQnBQwy/3wiCpFFagKHWkPGcgPeBGhwyD1
6wQBvWi+RzSvFwV6BUGDMGgSg3kJGQEjopglrj1kSyheKqECHSA8QGlQsVMU
5YBHlF5BmVwjVWKKsjzCRRNvEXGDT1WfwiMvagLjIwC5ErXJFu1JK87kF67U
17701+5kBBCnYs0ufWkVrpp4sV4yoiOjwI1OPKTFFzR4oIs6QI8ujr+LHe5m
hzpZ/g7mfAt9rpX+rCUBznxb4lxb4lMKHY8aEx80Jt5vRNsQZurpID+mGulT
DfSpRqa3JNGcjY3mfn/VSLzuO/rbvvTfDBx9PQCPR14Ppb8ZSPvtQMo/u7kv
urDQzb2zlxE3bIgbh+yXOe5yYkQrGeoQ3e1STmjlo11JQyrBmFo6oZXd1YpB
ikx0ySe7lfe6yalWcrKZHK/HR+uIoTrCd5vjKmGbr7Ctl+mW0x80/ZxWjbhx
oPazg5XHsJovDt4Cbvwi4doxrPQM6/pJOgpynmKXnOAXHZOVZiZTR1mWpSjL
FpdmCAAjCCCZFEYyuSUZwuKTssKs41fyMtFq6PKy+NkUC91Q4rU+kGfbsMaG
evINiddv6VD++k2v33i9nVLZ3BW7ZTf9DlO/1qcFAjrgU5qhrs0AidNjM0B2
CIDsKoLqdPqa8p+2CpfQ+kVqnatdEbIp4e5bsCqj8a2OcJxpq2gZdMqaG436
DNkQNwLWlKAZ3EoKpS4U8e4VvxG1sSBuIJIoUSeLQULVoksBHcCKgEEUNPBB
hAS6uf4uXsgogFt+ER0RGuWBUrfSeG0YiBAqAAKqg+pkobCwYhVGARSgPUwo
SxujMjLwI0gOKogqDAOCQKs4lEtwACCok+UIyI+X7qQ1Sn4A+taswmUTL9JL
hLrxUBcn2IMHu9jBbk6wmxXq4YS6OeFOTrA9MdBO97fT51sTAm0JT5roT5vo
z9oYoDoeNSU+bEp80Mx80EztUmmhT7ckzjTBYQyUJZozD0/kfn/FSKx50YJs
tDeqP/1N/5GXg+mvBtJeD6T8zsV9rsUCN/Y8vEwbpLhhzMJslzm+SqKvQ9rX
xpvqUtzRJo1okwY7+H2twlG19I5aNKIV3dFKx7uUk13kZCs50UjcaSRGGoi+
Ktxzk2Mv4piusM0X6YZTtLqf0So/2lv9axAbh6uOH64+dujmj2kXP8IKT7EL
P8dAaVzPYBV+zis8llqU+SEQoPh8VvHVsyXnM4qzPyzOSC/NSinLkpdlwxGX
ZUmKMn5YmPVZYX5WQcG1t6CxQ4nXLsMaG+rJ/5R43Y1DiY8o/644lPi1zo23
UyrbddNvubhtAzdAhs3OzgI94FN6GyBxemwJkFHq2gwQih7vEEGF/2WerpvP
OlB8gJp3gWZ7oq0EjiTUsWKTL1hAhKCFsEvuIzE7aisLWZGRCVoUQUvSglXh
R25FHgBcGKkYqUEe1Ev8luQA0MOk/KoiXTKPet8kCCO9omCvAD3p5vm7uP5O
0t8JAOGG9XygBygKZGHMVLbFQpV8gPxAIkSC0ivgRKwAE6rYw8SNgUmhYLKE
fAqIE96SmRuxiaNGQQStd5FELajJd5lae73qSHqJ5oOBf0l97pK9sEteWAUv
zNwlPRnVE5FePKJjo9ODR7uJkJa90JEY7GAEVYxAeyIID39roh/Jj8Qnzegg
C9PKeNTCfNTOfNDKuN/KnKxlTtYwB0oYphMHHuZ/b9lIvEAjd44gbvSlv+47
8mIAnqS97E/5Jyd3RY09K9t77yKtL5dmzdhryMSs59jgNfraFH0q/rBaPqhJ
GtYm9auEvhbBsEo6ohYPakSjGsloZ9JEJzHeQsahMVhD9NUQ7tu4pQBxw3SR
rj9Fq/35nopfADcO1hzDak8crjtx6MZPaed/il3/Ais+Ri9AJeW8q79WFGb8
sij31DoK/nTOZ6DHS9kl2T8pOXe6+HxOcXHh13/PFu2u7xTW2CHx+nfpUOLX
blKx203h2FD6BZ8JWBWQYW/TYzuAxOnxTgGQ3URQPfqmp+3JMZts2SVHQ/lc
8ogzNWKXL6DpPTJQFGGrLGyRRtF0DngxJWSWIG6YUYMb/CqCg1mJWmJBYAAx
DPIFeA6/ZFEEED2ovntUiy5FHbVG6ZxOEtAL543S+R4BuBi/jjffw5/vpADS
w1voJiNGYUDPR/FSJDyoyjGTMGaVUbEO8bIVRTzQMfKQFAG3QtWBxCwiyrbw
Y1ZBzMiNWSURsyhkkoRMorAROaDnVsmyTbniUK46U1+i2GnaGsq8iJ/bhGtW
3nMzCQrhhQlf1RPRHk5Uy4yoETRCGsYCoKMtEZ77OxLnOpggOZ62MebUrCcd
zFk1C85DNfthB+dxE/teDct9IcHx+Z7ghe8tmcgXnqOrnnQ0IaT/6GvfkVU0
qiv1uS/lNw5uVIU9Lt07eZ7myaaZM/bpMzDrWZajmO1rlPg6pEMq+RCIDW1y
n1rmaxUMqaTDKsmQVjKslo52Jo91cceauSPgUGrwvlrCV4G7yjmmy2z9BZb+
LNZ7klb/4Z6Kj/dWfYJVH8PqTmL1pw+V/Yx2/sfY5V9jBWeYhadYBZ+RBcfT
C07/rPjq+S248Q1nYyx057AG5VA2hDW2TrzuXBq6YYnSZofyV1i+9i2vt1Ox
G1IqW3bT71D6BZ8JGDeQYe8KkC0VyHumYMy6h63pUat4yS0NO1JibnnElRp2
JC3YlCHghkURsshCZrTrBLTHgkXxZdcbcMMgCRpRaWjQhDZCot4WRI+koF4K
5gXUSBCBBX6nAu1ZgN9jVsYXtXzZ2GIQhc3xtIvArxcGe3h+IEkXiUIiXWRQ
x4sALpCKkCAdYpUiz4JytaIlqpc2ZuQDTxaNgjguqGSuANWBoCeo5CNmgd8g
ipiFUYMwbIDfL4yYZWgvjE22Ylcs25Oeu9NeudNeOpXPUdG7AOixZiKX9Phi
F3tRy4hpGFE1PDJjAJC2xAXQHu1MPzoMv4o51858BgzRsp+oWI872E86OPdq
WbMVDGcuNnTiB4ul31ux8EFvoPWUfT9840Nzup73pb/wpa36kt/YiVD74dni
vePn9riyacYz+/VnDlvPMuxluKea7FcnD2tlY13KAW2KT5Pk7RANqOSDKtmw
Vj6kkY90Jo908kYbucP1xEAt7r2Ne25xnGUcw0VW91lGdx7We+KD+p/RKj7c
W/EpVvE5VgvcOIPd+PiD8z/af/VTrOAEs+AM6/onksKT/1CUexog8K5n+3bX
DQN5Or6Cxk5hjd0nXt8erxF3KHCLfVccSvzaMDBwu67Yzdx4OxUL3IAPBFzb
BnpsCZB1emypQCaoa8sI6m5SME6XY7zpk2AXL2YTRqziRbci6lGGPWngXBZc
yQsWgIAyjOZvAD3EC0h+SAKAAjOqSPebUeN80CRfMIopaYECHQtGKSIG8jLJ
CwgX8pAVsQX1vyC8yOEfAs8XTMABWcCMqtAjJknYJAqBeqGyt/Mo9AEKhBvo
JlFph1GAAiAWMZV5kaBICEq+8JAOAVAY+VS5KepwAZggKYL8CwqWLhlJVPhh
4McM8Jv5EaM4bBKEDeKoSbgC0sWZsmRH216e2xWvnMo3Lvkbp+illfvcwFnS
MRZ7GKvdjNUe5lI3M6RKBOGBtEcn069l+jtZfg1rXst6puU81bCfqjhzKs7T
WubsDWwod/9k1vdXa2irNvGKB3HjZd/RL7nRn76GuJH02soOtB16dH3P2Fma
PWuP4fR+U8ZB2wXMcYvrqSH6O5KGu5WjGsVgp7JPm+rRKAc0in6VckirHFLL
BjRJgxr+cCN3oIaKbNziuG5xrMXs3gssbR6zKw98ygd1P6VV/HJf1acHK7/A
apDewG59Qrt4dP+lDw9fyxIUHmNe+zS58MxHxedyvg003i7x+nrn2vqc4W8M
a/ypnnxD4nU7hxIfrxF3KHCXfVccyvq1gRubU7HfWMIBViVCXdsBJE6P7QCy
cwR19ymYOED6eioeNKX7e0ULJm6MWh8f8R2JgORwp4Zt0qAtKWyV+uFON4uD
aGOCBBkTk2QBzeKQBuDRKFkwiOdNigCQxKQEHYIsjDWZkhzykAUOUilIdSCk
oPpz0B7wegxJF0XUjKrQIybkPkJGPqoZ6+YFergoe9vDC+r4QR0X+AC6gmpm
EVOZFxmVtBWi+EZcloD2AFYYuSgdYxZQ3AA1wl2k6IHytmZ+1IjkR8QIzkW8
ZBIsmKXwrwZuLNvkS3blG0/aa6fstUP4ykKiY8ZfGDirvcwXvcznPYxYFyPW
ywz3MEPosELdzICG4dcCPdh+DXu+mfWsjvmk7PDMlX33zv/gRdP+FZsEuLHm
Pfr6T9yAH1MRNyzs+abDjwr2jJylWbPApByw5h5yXqG7yklvEznazvepkgZU
sjGNok+V7NOketRKeKVfkwzc6Nck9asFg/XcvhrCW4U7b+L2IrbxIhAjUZ2d
2JlH7z1Dq/sJ7caHB6s/P1RzHKs+idWewqo/338pjXbu59jVE/TCz9iFnyoK
T//o3aHxjSVef+pcW1/wul1YY7vE6w7Na+trXr9DOZQN14buth0Gm2/JDbgA
ofCBrANknR7bAWSdHttFUN8pBbMBIB6fr09bfLfxk4dNoBz4ETM/7FTGnEkR
d3IIHh2KqDs5aFPCQW7FBr5DBgIjZBQFTBLUQmuUABD8yI/Ac/QjgCWECJMM
cKD2oSSFQWMgzwLiBBkfpDfMCqRG4J8ArqSbDHXjQRV7oT0xomaEtcxoFzuq
Jxd0XL9RBJ7Fr+MFe7kRA4/yKcIYVfWBhAdFDwomqEUOJWdRKxwvPh0IcYOi
zSLKv3AXjajuNGoUgnxaNvNB3kRMAoQRs3gZ7WhIfm6XrzmTXzukrx3i13bh
axv3jZ372kauGvCXevYLIyeGYqd4WMdZ6GQvaNjBTg4q/2hnP2ti+RsZ4UZs
rvrwXMneNdXhZZtk2X30pe/oa18cHUdexLnhTX5tYc03HnpwlTaSD9zYr8/C
rHmYq5DtqeUMtIi9zdzRNvFwZ/Jop3xILfeqUtza1D5tkk+TAlalTwUMkfTV
kr4awn2TYytim66wes4yNFkJHZl0bS5dl7kX9EYJ4sZhQEfVCaz6FAp0XEun
5fwIu3yKLPyCUXxCUXTmpyUlRe/Eje3aXTd0rm1frfF2WOPLQV67T7x+px3K
+rUhFbu5K3ZLbsRTsYAO4Cd8Gm/TYzNA1umxQwDkIXW9cwBkqxSMD+SizeBt
uTBVe/RJA8+PDAIvjFbJyyJOxbI3OexQRt3ykE2B5l6CPQEhYRIHLGA6xICO
BaOQ6sEX+dEAH1GgF+5KAborzeIotbk+YqVCJWZpmOp3WzAh1xPSkQtqZrDx
YLBq79NSGpwHl74/e502V/z9+Ru0hfpDCy1YuBuf7yRDegGKo3aimWMLOl7E
KARpgUIccXpYZEuo1hSVcFAlHwJkUpBb4cXTuNTrgkU9N4akCLACCZIIFXFd
NAhDSKsIqW4+yYoNTXGn6k5TXjsBIJLXdskLi+CNU7BiItdM+JqZWDbgER0n
3IOHdHioh4h04XONrGATK9yWGGjC/NWH1/QsNPHMnf7Si+KiaAiqF3HjpTd1
xa14bWHO1R96dA1xw5Z9AHHjHN16PdFTR/iqOf1N3OF2Xn+rtE+jGNYq+zoU
XnWqW5PiVacMapP6VAqvSgZiw1OJO8s5lkIOOJSuPIYqK6E9k67JTezK3F//
Ea3044NVn2OVnx+uOI5VnsKAHkU/pmUmY5fPkNePJRZ/xi3O+dU7cWP7WOif
OtfW5wx/Pazx9vS/DfXk35x43TAAcEuH8tdfbfDe15aDRndTwgGSY426tgNI
lLp29i9/rgDIpgjqgMvtdHTWDFScuXsjPdDACqiwmIUIO2QxlyLiTIqiVEty
yKEAD7JAhUlRtsUkpjyLEGmPHnJOQ8y3MeabsSDc8q2H4f6KdHPCZlHESH2/
WxVRqyIM9DDxw12sSN2+QNEHs/kfzOR/MJ5Nm8ilDefuGcjZC48jubTp8z94
eOGDudK9wboDCx2MORU+10GA9pjv5M7rBH4NGdLxY5RPQbFTo5BqbxEiC4PC
p1/maqnhpajMAxV7gFz5UnggRxM1ob4YeB4yCqN6fowKg6AYrF25ZE9ecqQu
W2Uv7MoXzpQVqxQszCu7+IVVuGIVPDfzXli4L1AQlYj0ENEufLWTs6hixzro
kRZ6tB2DX120Jy260lF8w/slN1A2FvSGS/nGwnhae+jJFdpg/h577kFTHma/
nuC8xXbfYA9WMcaaiL5W7ki7YLhNMqBVDmnkvnaFR53m1SYPdKb0qSTeNpmn
AjkUWynHeIndnc/U5CR2ZCa0ZSaqc0F4HK7/GPTGgcrPsMovsNvHsYqTCB2l
P6flJO879xn76glW4Sd40emj4Dt2fb6hxGu7sMbb0/821JNvl3h9J4fyt59D
2XBt6G7boZv+7Skc8PZBdQA81wHyNj02A2SdHjsEQJ5Q15YBkC0Bsl0N6jpA
gB5uq8HdVj5U+OPp8wfmavYtaLCwiYhYeBG01FWx4FSCeEDCAwyLWYHq0k0y
anqPYL6d8ezW4ael+2cvoGLIpwU0f8W+QN2hkIYZ1hFhsyRqkcbQPB9+tO3Q
YsX3H+f9YDxn38QlRl8RNlqIeUsTnEVM+Bp1X2PayxiuK5g35+BwLm3iLO3x
NdrTW/sC1fv9LYmhDjYIFX83198jmO8SBHpQ9COG0rJgTARfFX7EC9fRHEI0
/wfsCRxECR4KqBrJRXSAJzzgRtQgWNJxF3v5EYMgYuCDTEIbb60o7rFsU8Zs
SWjVlD1pySpfsSvXHMpXDtkLmwihw8Z9aeO/NPPWDOQLPb7UxV7Ss56biGUb
2kUF3Fh0HUElHF7EDRTl8KSuOhWvLIlPqw89uUobyNvrOHfYdgHz3ub4qthD
VYnjjZz+ZmKknTfWxr2j5g+3i4ZUskG1zNOe5Nak+sCwqCTuJonzFg4OxXiF
pTvP0uYmqrLp7RkJrRn0jlyGKhNr/AWt9MN9FZ9ht7/AKo9jt09iFaew8k9o
51Jo+R8xrmdyr3/KKj6eXHLt/LeAxm7DGtvUk28xavg9HMpff/nat7x26G7b
biECvHfQWnF67AyQb/Qvf8YAyHYRVJAfNlOvN58/cvbAg8I983X7F1QJITMv
ahMHnSloB7QrOeKU+20pIbvMb04OGqUo/qAi5hqJB9XkwzrunUpypoxzrwh7
UnLIX4OFNIyIgReziCK9JHwjz1/63pNc2lA+fbRdNNFCDjcxBmqZnmq2u4ID
36TOKo6jlmOrIG1VuKOO8FzEBvL3DebuGcv74NFV2tztfaEWLKhhR438eZ0w
2MNf0PP9neQCddcvGngo4oEsDKLHElV9ikyKFe1ciJpRi1zUxAOGxAwgOcjF
eEYG/tv0grABjjBkFIRRDATVfoRQTEa+bE8OmQEglA4BNWJTrAI9XMqXLsWa
S7bmkL5ySJct4hULd83GX3Mql53U2jvnEbQO25mGunQRN4688aQAN16aGU+r
Djy8Qhs4e8B5AXNeZvRXcUbqGXdq2WOt+EgrOdHKudNKjLaS/Y14X7OoT6sc
0MjBp3g703wdUned0FHGMV1l9Zxjdp1jqUFsZNHbMhJaMuht2YmqLKzxU1r5
z/bc/NWhm19Q6AC9kYmVHTtw9egHuUewq6fx658zCz4RlOSf3g03NsdCtyrx
2ims8dbata/Vk7+deN25eW2zQ/mP//iP75ZDWb92n4r9wx/+AOiA9/773/9+
A0A20ONdAbJOj3etANlNBNUDYrLwx95rrMFL2NTVg48K94JtCRnwBbskZJdG
nApkXhxJEZcibE9ZtKehIRj21LAdLMyRiOtI1Jkybztyz5D0qJ73qILtr8NC
Wnaskxluwhau0e6fxwaqiPudoplO6SjcLI2M/gaWpxp3VxKu2xx3PdteTdqr
SEc94ajlWas4zmrCXsrwnMN8Ofsnz9FmC38QbDgU1nLCel6UqlQP9QoCvXx/
FxdcDHAgouNSswcFX1afmkRLVhkanG4VLVoEUUp+RNAfJGMmLgAEccYkCJsF
qPPOCOhAsdOIGfXiLYALM0lRONeqXLAowWct2pRAkhVH0pIj5YUr9RU4EXfq
a3fKa0/qa1fSS0/asuvIIrULO+ZIXXKmvfCgfUkIHe7kVad8zUB/WrH/wdU9
gxcPu67TXUWJfdWsUdAbNew7rdxJFT7ejNZbDzXivkZufzvf245qwPrVco8q
tV8t9VSRtjK2/hKr+yyzM58B3GjPSmzJSGg+g7VmYB25WNMJWsXPaWUf77/5
OQYHrEr1GezmSazoJx+cS6Jd+YJ57Tjz2q85Vz5PKcw9UVJasiM0tghrrMdC
3yussTHxumVp6OYBgN91h7J+bdfdtnkhAqAD3vjb9PhGgKzTY8sAyDcmcLcL
gLxTDaqvv89XcXK4nryj5k5U4kOXGTNF+5817A90sxYsIpAZiy6w8IpFH9oU
v+Q+supOi7nRfOCoMz3sTo+5U2PuH/pdR4OOpCda+YMq/OlNzH/zYKDk4L1C
bLyVd1+f9EwveaAR3GnhjDUzfLUcby3priY99WxnDe64RTjrOc46nr0ad9US
tgqOtRrRw3QDd53HPLn7xi/QntZgYS0OLoOKVEgXTeJ5LW+hF0jCC3ZzI728
YBcZNaCiDlQBYkaSALXIWYQxqwTtojULIyjbguYKLhops2NBgdwgyAwjSBdh
GJ4bhAtG0YJetGCUhi3yBZMMFZ+YlRFbEopgAD2cSSvOtBVXGrXM5ega2iKX
tuo+soSK9lNBeKDXgRsAFm/aG3fSKngcHfa08sC9q/tGrh323KT31zAHKthD
DayJNu6Mmphsxifb2GOgNJqIkRaur1U61M71Nct9GqWnVeFqlgJaLQUs3TlG
z1mmNo+hyklsywRu0JtOYS0ZWNs5VnPG4ZqPaOUf7S3/FLvxBVYO6DiB3Erp
L/deSaGd/TH9+hlOwTHGlV9xrn4mLj4mLzm7tfDYIRa61Zzhbw5rbE68bigN
3c6hgN//rjuU9Wtzd9vmVCxYFRBXQA9441sC5D38y3skcN8pALIOkP7BAV9d
5mgDOd7FH1fz+xqFnmLOnavY5KV9/mYsqGMv2oVLLtlKX+qSOyXmTn/Rd2Sl
76crvvSYKyXsOhp2oKH9C/a0sCM1ZEmZ6ZBOVxFPy+mzN/FHXZJ5o+KpXvqw
W/5ITYy3sgbr2b5aArjhqQOxwXFWcl3gWRpIeyXhbCAc1aQNpEgNaavkOCoI
822O9SLTkXt44uLep5WHF9TsiB6VhqJ8Sry41CyI6HmBHgFoj1AvP9TLDfeS
VPiUasyPBz3QXCBJlCr2iKIXUegjhvK2KC0L3AihPAta2AonaJAsoJox0YJB
FIxXslkUYasiZAGAKBYdyVEb2q4L0mLJmbLsQrhAVHGkvXAlr7lTARovXcmv
PYgbK3bJiy7sWSW4vwPjN7DBCs7dRnykPnGyDR9vJ6fbyXsqzmQTe7AJH2/h
9rXyxlpIXwt/sIXn7Ujqa+V7GkT2YrbpMrM7PxFFRHMZHdmM1szE5tMY4kYO
syOP1ZGDNXxKu/HhnrJfHyj/DCv7DCs/hpUfx4p+dejiEdq59EMFJznXT7Ku
H2cVnWQWfM4uzvxJ6Y0bm88OYY31WOiXnWu7Cmt8LfG6oTT0v4JDiV/fmIr9
93//d0AHcHIzPb4RIG/T4z0CIAHq2jIAsvsSstGRYV/7+bFGYryTd1fDv6MR
31ELh+u5vivsu5f2P644FDGwl13yJdAbXqQ31vqPPvf+aNF7dMmTDnfQgiMt
6kiJOdKC9rSgMyVsTQ6akxcM8oBBPN8reNYj9BtFs52iiXY2aPLBBsJXR/rq
cU8tx1PLBYHhbSJctVxnA8fbwHPWE+5asC0cVyVuqWA7qkjLbdx0mWHLPdyf
v+dBIS3QlhjpATKABwFXIqNqwKiiDlAaFmkIBS54aPIPWBJUfcqjoqMiaoqp
KF6DGt8ZFzWjyR5RExXfMAjCJiGqYkX0EFNuRYy4gZ4DOtDmiAWzArgB2gNZ
GLOMwogyak+O2VEnIBpBANyA40x66VS8cie/cSmW7eLn2oT56kOzN7C7FYyR
any0mTXdAtAgplTEQw0+04aPtHDutJJDbeRYM9HfQow0C7ztor4WmatF4Kkh
LYVs/QVmV34imBRNHhNxA0zKKazpDL01l9WRx1SfZTSfPlDxIa3k4/2lnx4C
bpQcw0qPYUWfYld+AtzYd/XjhKKTeGEGWZSBFx9nFZ5KL7mQtxU0dirx2jBn
+Othje3qybdIvO7cvPb35FDi13YplTg3wKrAOwV6ACd3AMj7+Zf3SOC+UwAk
DhDQHAOdN+/UkRNa7uSX3BDdUQkGW4SeQtbU9UNzTYdiFnLJm7ziTVr2pL7o
++HLAUDHPzz3HFlypy7akhfghrIpQtbUiCU5YlYEjMJ5neBpt+BxFzfYy5/r
Ej7uIu+qEDQG6si+emKgBffUEB5QHc2Ep0nkqse9DaSrHg7XgfQG4a7D7VWE
q4ZwVOCOasJ4jaHPxTzZ+x4U7J1rwMJ6XgxNQpZR2kOC2uLiJKH6atHYUtQH
B/9qLtIVgA7DlzGQJauUGpiMALKMXIwgYuSHe1GDTBSFRsXxcUNAD2rvgySO
kSDoEMQNeRjFPaguHivyL0DIsA1tolwFk+JUvgBouJJeOeWvXco3DrRce1VL
99dhT6oOzzTRJ9s4M83EeAsxo+HeB26oibtobRwx1k6MtpBDrZzhFt5AG+lt
lXmbCXez1HETt1xl9OTTu3Lp2lyKG1n01jMADawhk9WSjfSG6iyzLQer/jWt
5Of7i35xsOzzw2VfYKUnsKJj2LVf7rn6D7SCn2NlxxlFpzhlWWThKX7B6X8o
Pv81buwYC92yc21zWGNjPfmWidctm9c2rHn9u3Eo8WuHQaNgVeBt7pIeu/Ev
cXp8Y/7lz+Jf1gECwmO4t+VODUADn9Jwx1TCMbVoVCUYVYtHO3h9t4h75Yfm
Gw/GHJJFh3TZl7YMVqX/R2t9R5fdR5fc6cuO1FVHyrItadkqg+/xoI4/h/pe
ibAOTb0IdBJPu7jTGnxaTQ7VE4COwVa8r5n0gupoIXzNQk89p6+J9IDSaCKB
Hp46YAjuqAV0EK4q3FXLcdxiW26wbTfZ1nMJ7px9E5f3BJoTw0YxCnSYpRGT
mJoCJEYlYQgLokWbfJEqRw8b+VQ0g4/oYUCRjSWqNmwpPlk9Pt0UJW15YTTL
VBS2oN6ZhbjMQAdsizhoklEwQZ3C8V6/CJrenISGMNtTYvaUZUfSqjMFuAFi
45U7BbjxyqV8jQYpi1e6mMHGhEAzNq9iPekgppo58CE8UpOT7SA2iDsd5HQH
MdpGjrdxRlrIkVbS1yEebeF6m+ETECKTcj6xK4/eiaDB0OQy2zOxljNYcza7
KRNwwWjLBW6w2vMT608cuPnLPaUf7S/+JbIqCB2fY0W/xgp/sa/44wPlJxNK
TtKvZxDFp49cyTxWkJ/1FjS+TVhju3ryr3W8bigN3dmhrHfKrzuUv6nBoe9x
bZdSgfcIquP/oa7dA2QDPf5C+Zd38i9D+ubxenJaS96Br78OEqAxpuKPqcVj
Ku6EijdSxZm6diDYTY/Z+au+lGVPynPvD1/4frjiQ6PF1xzyVYtk1chb6uWG
eshAJz6vZka7ONEeTsTA9Xdz72s4D7XEeCt3uBFuE3ywlehr5PW1EgNt4OKJ
gWbC2wjCA+9vJj2NuK+ecNZRr9TgnjqO6zbLegsMC26twG23ONZ8zJ2zd+zi
nkA7I6wjoxa5Xy+mFj9JYhb5khVtdlhC3BBGbTK0w4Vqqo3FK06pJGy8EgyV
mH65mgFNN42iWR+8CJpMCG5FHDajlhx4EkIMkVGTBJDMoAwLAEQGuACfEnMk
P3elrlIDx0BpILGBuKF45Up645Qs2RE3Qu2MhTZWQIXPatj3VfgTDTmjJh53
4JMq8r6aN67iTbURw4AO+ExU/NFWYV8r7m3iu8pxawHTcJ7ZfZbRdZalzWep
s7G2DKwli9mSzWrLRtxAkiOf1XGW1ZSNVR07cOOXe8t/tb/s14eLP6Gg8avD
JZ8dLP4UKz+dUJDNKzglvXjm11fO5RVcvvAWNHYb1vj6bI31pQYb68m/Srx+
uQzl7dLQd3Uof1OrDd772swNsCpARXiPoKneBsh29Nilf1mnx/vlX97PvwA9
hnorJnVpIJ4nOogRMNotABByVC0aa+dOquCQo4X0+7f3R0zEkkcOkmPFk7rq
TV/zHIV7BBz9c7NguZeMduJhNWuhmRFoTIx1shfNvEgvL6AnH3cRk+1cNIKm
Ax9pJwbrycE2fLid52vi9rWSAy0Cbws+2Ej4Gjl9YFUaSB8ID1Ad9Rx3JdtW
wQa3Yq8mnLWE4zbLfC2hJxdzZO2bvEJ7Up8QMYrn9eJFqzJgpAYgowysbNEi
R4sm7QpwEJSukFD9+FQJejziYeBRY8QoesRHA1moOUJWCXIuFjjiCNrsALZF
guIbFin4lCA1VSCEmoVlEWsSRQ+kNJ6DPXGnvXYnv3SloGSKKwmev3FKl+zS
5zpWsIMR0LIfa1jwITzREvepseozGmJWw5/S8B52kOPt+FQbf0jNG22XjLZx
vK08bxVpL2FZrjB0Z5k95xjdZ1mdeXTEjRwgBhxGWw6zKSOxJZvRksNsy2e1
5iXWZWE3vzhc/hl243MkOUo+RSGOwk+x659g1zPYhVmKS2d+cTEn40peZik1
9283JV5bVmtsapPfmHhdHzW8XWnozg4FbqW4Q/mbWm3w3tfm3W3/L3W9B0De
27+8R/5l9wncu3bVff0PH/fIZroUo83EcD0OjyPwDdgGohp0CG+slhi6jj2t
PQDoWPEol33JK95kMCmvPOmAjldomjHq6VjuYUZb6avdiUvADSCJkTvfQ85q
eZNt5F0VMaEhRpvJ4UbOWDvZ38wbbCOGWvh9bcRgMw+g0d/E9TQRfU2Er57t
q+d4a9j2KtwNuKgj3PWks4LtvMmwlCYaryWaztE9+fvuFu+fVxPPugXgKfxG
WdAgWbTGhYcClZKi0gsFCoTalUtf0kMQb3VZpJpWFr8cd8ylqBI/8T22AjRn
zMSL2KQRK3BDGkIORR5E3b5oLEkQWRXUehOFfx24M2fSGuJG6lfcUL52J71x
yZadijUDM6hLnNez/WiuKfdxD/4MiNGJP9aQ97t4yLCo8Ol2/oSaHOsQj7fi
vg5yoInnKuc4ChmG84mIG2eR5NDmYOpcRkcuuyOH0Z4DkoPZnElvzWE0ZTGa
c5iteYyG3MSKTOx2BnbrNFZ6HCv6Ap3rn2MFZ7Dr2fIrp354KT/7Qk5GwZWL
IDOo885hDcqh6N5uk98h8bpDaegucyjfdYcSv95OqYDkABEF9IA3GAfIN9Lj
PfzLXyL/skML/727448MeY8snz80/nSi58iwJmWsnTfSyh2B+x2F8hA9+m7i
45cPz7Viyzbxkjcl6lZS6ZW0ZeeRF87UV3bpSwv3pYnz0sh8rmOs6gm/Dq2M
D3Tz76n5IM6nOskpFfdOG0gafKiZO9SGj7Tx+4BR7aLBZmKghedrAZiAhWH3
1bF9dWxHLeGpI13okXBXsZ03GNZSpv0W23KTY75FWM7Rvfl7p8oPP23lzHUL
/Gj1JHgN+YIBfEd8X60SMIJWMIBtsckWbcjCULYFNb6BH0HooLIqSyYSznJ8
W5zlywAIKlm3iWN2MWiPsE2MNlVZARdxdMjCtmQgSciqRGlZm/K5M+0VWBV3
2ivPEUpvpLxxypYc8jUbHjCRkR4y2k3O64hnneQzLWe2k/e4m/uwS/RAy5lR
8aY15LhGON1ODqiIwVa+7zbuLGKaLzH05xm686yec6yuPEybS9ecxdV5LE0e
sz2X1ZoD3EB6ozGT0QSqI4/ZnJtYk8OoyE6syEm4mYmVnsGKT2HXASC5ssLT
SVdyMy6dy7t++QLg4m1ofFPn2jeHNXZOvG4oDf0v5VDi1/rAQHhH4FZARL0f
QL6lf9k5//ItAyCTQ33T1voZ06kJ3Y/GNdLJTuGddu5oK363BYU0RxpwNHiq
hD19dW+4k7HsECBuuJOW+tNXQXh4jiw5k9FYLYf8tVuyBg7FSIT0xHwX96GW
/7CTvNdFzKh5U/ANC1aojRxpw8dU/P4WcrSdN9xKDgExWriAjj6wKg2ErxlF
Sr0oJ8sBw+KpZoNDsd1gOSpAgRDWSq6lgjCVsq35mDdn74Pbh5+piblu4Vwv
2nwNJ2qRo4GBZhlCB7WAEs0stVFxD0p4LNskMRta/BT7cvIPbxHQYSDR3hY0
CRnMi2AZzfEQoSHJ8CL1+8OU/KCSKfKILSnOjbA9JYJKwpDYWHOlvXQfeeVM
fuVKA9Wx4pA9d4liev5iD75gJIM67lwX85mW8HeTj7oljzuJ+1r+Iy13Usu9
18EfVRHDHcLhetJ7g227zjJeAL3B6D3H7MlP6MrFtOc42rNsTR6j8xxLnc8C
n9KShcRGQ0ZiQwa9MSuxKTuxPodRm51YnZVQkZlw4wyVVckTlWZKrmV8fOVc
7tXz+WU3ystv3QJ7sotY6JbVGluHNbZLvL5dGrpl89rft0OJX/GUCryd//zP
/3wnery3f/mz1I+9UwBkdhYFOsbd5kFd1Vj3iWnzhzOd0gkNF2726Sb2cA0+
UoMPVRHe89i9wr0xXWLMnbLkSoqhqlFlFJ57lKue1EXUzZH60i6KmrkhHfeJ
hvuok3zYQ85oQHKQ97QEfLHeQVFB7mg7aA/yDkga4EYrb7BDNN5BDjaR4FP6
m7l9rVxPPeGtx321LNcthv0mgoajirBXAjcI6222tYxlKWDacg6PnKc9qk2Y
6+KiYcjxkSAmmb9HFDbKoqAHUHsdFeWwypdtMlREapNThegyqiRMhCrSLcKw
RYiKPazADdSPH7Pwl6n5HkvxeWJW4bKVH3NIYg5xxCaJ2KVhaj5JxKYM2xA3
Fp1pwMwXrrQ1zxHkVoAbzuSXTsUbX/KakYyYiUgvL6TD57vwcA/xRCf0dxEP
teRjrWBKJ7ynFkxpiDG14E4Tt78Gd5ezbVeZpkvM3rOJunx6Tx7WdZbVdY4D
PkWbz+o+x9KcZYLeaMpMrD+TWHcaq0WHXpeRUHM6oT4zoTYDdancPomVZOOl
ucrCzJ9ezc++evFsaWkJsOLGbTi3dhHW6NiuWmO7evINidf10tANzWsbHAr8
hf97dSjrF6AD3s7/+l//6/0Ash093sm/fMsE7s4BEPj/C7LjwdTdO4P9ww7D
eM/ZKe3n093/MKP/0bRWMaJJGa0jh6twbyHTl7Pff+ODmEO05FQu+9LQ3DBX
0pIn6blPsexNgm/55w40ZcvfxX3aRT7RwRcr74GWvA/fsBrUlAGu524HOpNt
5BhgpF040s6fVHPHO7gDTfgAintwB1oFfc3c/nqmp5Lpus30VrNdVYSjEnHD
XsGxlbGd5SxbMVN/ju7IOjB5fd/TdhwNTqemIvuNivleUciIqrOiZjmq50Sg
QNsnQWksWqnwqQUNLVy2ooVxi1Zx2C6NmgVoxLFFBAAB1REz8KkULdUKZxVS
IoS/ZOODc4k5JTG7LGyXocnw9pSwXRlzpq664RxZ86a/9KBZpqA6XjuTnnuP
vHDwo2bJop4I9hLRbnxezwv1cJ/2kPOdgoc93Pta2X0tcaeTP9UhGq0n+m6z
XSUs0BvmKywU3MjHwKf0XOB05jPBoXSfZ3efZ2nyWa3gUDISa0/Rq0+iMV9V
J9HYjfjziuPYjc+wspP08hxZcUb69fzMaxfPlZaVAijggDehlMauYqEbqjW+
MayxOfG6ebzGZocCf///Lh3Khutb0uP95Me3z7+8k395OD15Z8A3atOP9bbd
7bw0rvrFlOZH42rFmEYx0iQZqiY9+dhY1vdCGgwtXvQkL7qSYy4QG7IVp2zV
K1+0SdccshWzOKAjn/aSjzqR5JjtJWY1oDrwByA51Lwvs5AdxKRKNNbBn1Lz
ASNDzeRAm2hExaNGUnCHGpi+SqanguG6hfrgnNWEoxp33OY4ylnucpajlAmS
w1zE0udi/bm0R3WJzzr5YbN83ojGrc/rJSEjKreIWBSLtpQVuyJmRQChxAYc
tHglZpGC8IijI2aXoC5aqxQsSdQijliFiBs28QJqYBFFLMKISRwxiZYtKAYS
swuW7CJUzeKSAjPDdnnUkbzsSoGz4j7ywp360pv+GgVIU5bcac89ySuovp0b
1ZF+IxnqJf16fL6TP9fLfdAjf9LJvdvFnVEJ7zaTg1Uc7w2Wq4xtu0w3nk/U
5dF7z9J7L+O9F9jafGbnWVbvJYobZ1FKBexJ7amE6hNY5Qms4hjCBTy5eQwr
/wQlU8pypeWZ8sK8jIJrl0tKioESt6sq4YA3oaCxbSx0U1ija1NYY72efKfE
69ulobtxKHCDxB3K3/7g0G95/SXkxzuFT79N/mU3/sX/7OlUn2vCYbirb55U
X5jWfDLZfXSyRTDZTrgvJnpO/+Dx1Q8WTcyIWxlD3FAsuyVIfrilKB7okD43
i8DUP0NVo9wnevJpN++BGn8E+lzDndaQs2qUXrmvQcSYUfFnNNw7reRwG++O
ijvSIUYp4AZmfyXTdzvRe5vtq8FdNYSzGnfBnVXJct1kOW+w7DfZtlsc221c
f57pzDgwXX7wSQcx1yud70VbsNHeSb3Eb5RHLPKYPXUJrIpVuWRXIqVhU1Ir
ceWoSAxeR+YFcCGP77aO2cHXSEN2GUrF2sSov94kCZnR2sqQKT5kDG2DQq0u
4GWc4mWXLOqQxuzyRadiyaVYRF1vKYgbHrSA8qUX9QCuOMVRPS9mIhb0gogJ
93fzQ3ryca9wvpN3rxu8m+R+O3eintMP766c5byKWfIO9OZhuvxEwyWO4QpH
fxFwwe65wNZfYfdcZKvzmK1ZiQ1n6LWnE2pOImisN8OWfYoV//JgYYbwRpao
NPvjQrAnJUUVVVVAiYpqeKyKA+Rdwxqb2uTX68m3SLzu0Ly2g0OBGyTuUL6j
JeXveu2SHt8yfPpnqR97D/8CvmX23tSD4f5HDv0jff39zrMP2j6733nUe1Pk
zdkzlEOL1O8L20VRlzLmSQFiLDvk6BF9d4uf21E/SEDHhy/Z+R7BLBgWsPZd
vAdovzMxowaA8B538R6qkYUBwzIK944ajeqdAOfSyB6uZXtr2MMNnMF6wlNP
uusITw3HV8Xy3ma6gRu32A44N9lAD/N1jikHGzy751Edcw6NLpTMGRA30CJs
UxKQZAEtqUQVnlFrEpVbUVCDNZTIttjlSzYpStciboiRi7GJl2ySiEMeQ3EM
OfiXsFkcMQsiZkmIqiaNmoSAETSYCK2W4y3ZRIsOARgZkF7L4F9QcFi5BlYF
rY1LfQU+xZX0ypOyZiPRNGYjEdALo3runFkMJm62G7/XLXmoFtxvxu804P23
Wd7iBEfe3t6MQ515rN4ywnaDsJewTdc5xmscgEbvRVb3eaYql9GcSa8/nVB/
hl5zKgFx4zPkTco/x4p/hRV+xig+yS/L+lHh+dzii2dv3b4FugIoQZ1qCiDV
8PybBvJsrNZYD2tsVU/+p8TrlqWhu8yhfFcGh/55r28vP97Vv3zL/Ms7JXDn
ZiaeDbgfuU33Oosfqk/33xb1XWL25e1/fHlfWI0hke9JWvYqFp3yJQ/ckuIl
h+ylQ7ZqkYYt3JBRMgd2XkfOd/OAHoFOcCj4007usx7eYw35uJOY6SDudPCm
VLw77bxpFXm3mXOnnt1fxxptpIrBGghvAw4M8VUwPZVs92226ybbCecG21HC
dpTi9nKy9xzuzj704NahuV60rmXeqJiHR4PMb06aR6sn5fA8akXrKRepkRoB
k/QreiiW0WQe+ZIjCQHEoQDlsGIDDwIwkcbgR6csagdFAegQR+wyhA6LZMEi
puamCmMmMqbHYz3YYg8j1stasRBAG6DHc5fypTv5pTsJrep2pzz3pr1yK15a
uWEDd1FHBk18v07k13Ee9gjmtMJHbcS9Vnykit1XRvec22M5SdNkYV2XCWsD
6awgHOUcazHHdJ1tvMbuOYemcIBJacqgN5xB3ADJcZviBkCj9BOs+FOs8Di3
9KSkJP9k0bVLN8qKwYmArgBKUOdLgOwmrPH1ao31Nvmt68njidctS0N3n0P5
u3coO1zr9Pjf5V92zr98ywBI4OHMM5fhQW/taN3xvkJy8BI2fh2bL92/bMIX
XfLlvrQYPHoUiw7Jikf+xpP0yildBe9v4Ib03EAP/4mOG+jmPu4i5kF7dHOf
aYlnYFs6iAkV94FWMK7i3VcT062cu/XMoXrmRBNnuBFHOdl6jq+a1QeepZLt
uY2mhLngVHKcNznOCtxxk7DfIC2FpC0n4e4F2rNOnj++dBKtrIWTNI9WT6JF
chEL2mOLbIstyU9ViCHtgSIeihW0GlK5YpesOJUxu2LFhoixYhMv2qRLTsUy
oMOljNqUUackYgXzIg9ZAR0yNLujmxNsxgJlPwgUfeAvp4WbD8Eri2h4oGjV
KXvulL9yp1DbrlPf9AFARKsGXtTCDfaKQjrOIz1/vks4pyIethNTTZyBWwzv
+f32kz/QnMF6rhCOOoGjkUBvsJyaZH6dbbiKuKHJY7RmM5oz6E0ZCWBVqk+i
MV9IbHyGuFF0giw+wS3P/nnRxbM3bpTVNtSDEwFEwIkDJM6QXYQ1NldrbBvW
2DCTZ4fS0PU1r/+VHcrO1185fPot2293718Cs/fve+0TnQWDN2RjZYyxm9jU
FWyxHVuykiteBZj9ZdAbLumiB57LX7qSX8CtZ+ZFDKL5XjLcy3vWTQA6gnq+
vxtIQjwFw6IiQHVMqsiHGvJ+G2e8CRwKa6IFH20hBlvQ9LyhRvZADXugjuOr
wb3V6HjgVBGoZ7aGdFWSrgqe4ybPfI41lLv3WRNzAY37A0QogwAKS7LfKJ8z
IPmBgqWmJPgxZlWi0nQ0K5VCB0WPZUfyqk226gARIl9xAPrAxSDJsQzCw6lA
sV+nMuKURx3SKFDFJg5bZUGjINjOilQcmD2/fzp//+S5fffP0Z4U0yJth6IG
AjW1OWRrYFJQ+WjKmlMGbuWlnRc2S5eN+DMTz98jDGrQJ3C/hTNexxq4dtB+
/PtdpzDdddLRIHI3ih2NpPM27rjBsRWzTQVs/WV29zmmNp8JeqMlk954JqHu
NDVTlOJG2a+xkhN4yXGyPPsnZedzy4uv16BpXQ3UidOj/it61L1XWONride3
Hcr6TJ63S0PXm9e2cyjwV/q/uEPZ4dpAjz+L/PhzlX+8d/2Y/8mjSXvv8K2P
xltF0zXskXL2s+IDS5pDy07Bikux5FYuuxXgVlbcimW74rkduCEOG8moQRDQ
kQu9/DkdWrQU0hN+LQ4C41kn+UBNPOniPlLhIDbut+Nw7rRxR9q4w63kaAvn
TiNnuI4zUM3pq2L7Klm+ara3kuO9xfFU4e7bhLscR6eMY7+Y6Mva+6TiIGqB
NyeHbKnwGEQ7KJWAC+Rc0HLbZKDHIuIGqgqLP4dDpVqSUbDUrlxBSkO6iGwL
/AhvQQ46BBi47FJEgRtOGUiRJSdwA/XsL+vJ+WbObDPxEN5FLXnnInbv/AF/
2d5wK7ZsESzbZKh1xaUAfr5ywp9SvnArXhi4EQsZ0IvDnSR8Ao/a8Jkm1mjJ
IU/mD7pOHO4pIKy1YneT2NUssTdR3IjrjQKO7hyz6yxDexbFN1qzUHyj5uRX
3PgEK/uCUXKMuJHxw5ILuTeKrlXXVIEHgQOiAhABJw6QOEO2hMb2YY31Nvmd
Eq/rpaFvN6/tPofy91Sw8We83kl+vEf49NvnX97Jv4z3uUd6SqZ06ffaeVON
xEQBfaF0/6IxcdUhWUTEkKEoh1sB39Gv3Umv3ZIVuMv0ZFjPC+gFC728QDcR
Qk0rxFw373EXOddFPFVzHraxHrVz4Ey0EWOt5Bg81rMnGjgjtZyhas5AJbuv
GiQHx1eJeysIbxXpqaDObdx7g+MrZ1vPJzjP7Lt3+Qd++FeYFRF72oItZcGe
FjAr/ZZUv1kZABFiTvGbZKAu5g2ymAV5GVRQaksKmhAxgB4xe9IKlXMB4qEp
YaA6bCh2uuyULzskUadi0QU6ShlzK2J2JUipRbtsBaVIuIFeUaAHf9pK3Clh
3L98IHD7wIqeBeh47kpdQwONU1+hqT6KV560V3YybBbGuvnhLuJZB/6gjTN5
G+vP+4Hp1GFdMWlvFDtblJ5WuatZ6mr5ihslbMMVdvdZxI3Os0x1PvNLbpxA
3LgV72U7RZaflNzOP1Z+7UJ1VWVDczN4EDjAh80AeY+wxuZ68rcTr+uloe/q
UL4ry9f+t19/zfDpt8m/7JzAnZ2ZHHNbH/SefmT68WND+kgNb6aQvlB14LmR
vuRE386LnlRKdSiW3XLUMGsVLhl5YbijDaJwD7nQBcTg+nW8OR0quvZ3cp62
M56oOE9U+FQHd6KdHG/DJ5o50y3ERD1ntI4zUsMequUMNuADDUR/FdFXRfiq
SW8111dJ+m5z3IVsd1Gi7TxmP7Nv6uz35zQkOJSwIx2JDWvagjUZuBFAKZUk
+DGI2uHjy6RAhMgDaKqGEl4EeiDtgYKlClRKirYhoPQQEh5gW5xJMYc85pSt
umUrHnkMNJVT8dyhXPGkrVn4YYso3EuGUOCXnNOSE0X06fN7Ys2HV81kfC7H
cyo6+hrg40x57hZEwCXBh6Al4C3P1GBj5z+wndyrv861N/MdzVJ3W5K3Te5C
I7+4X3KjmK1Hu6SBG+BTGF/mU05h1SfQAW6Un+aWnSBuZ39081J+ZVkhAKGx
JX6aKYA0fwWQpjhANoQ1OqiwxlfQ2Dj9b8t68i0Trzs0r21X5fX/O5R3uv6i
8uNbhk93418iC8GHY8MTjt6Z7tOzurRZnWCqln2vFFus3btkI5ddsiV30opb
iVSHJ3nVqXzplL+wyaImEeqQRcN8iAWdAO61YA93oQefU3HApMxpiYdq7rSa
N91BTLfi99rwu42cOw2cUTj1nJEGFCYdqiUGa/CBSry/kui/TQzcYntLEn3F
dF8hZj+HOTL3zeR/b76TQN3u/197V/7V1L3tf7u3vfZWWw8IZGIekpCJ2neH
d+d2vb72Vat1bm21dcABFIGQQBjEgTHJGTMwOc+iokDIPA/ovff9R2+9/T2x
EZMQQgCr9nzWWSxE29Wu5fnk89n7s/cmlHZcMWdU2ON0gctRxQNXOfFaJy53
AHWwZdI5tu4B7OGN8wYOxgQlOrykLMieg0SSA61llvso8CkgpaRBptpN1YTM
yH34zcoIUx3Sl8L/1FwfEKBo9qzwZmPR1Z3rXSfeCxkFIbo2QEmAPZ6yezkC
ZDUqIPeXei8IHeeFj7V5tw6/b9mybnCvgEJKo5JqrzLrpFZdNegNqqOEbhRS
x9At6aHvithFHGiBT9cO4I089RZ0gL4ZfMoWwYkvhKd3/u7Et7tPHT3YBqzQ
qQMDwj7P2eMnAtHGn5droWnLGqlj8i81XhPHUOKN18TwWvYOJXEemnMoOeDV
lE9XEl9PSyDwt8Ljcj64NHqfGZ4cPjxFfDmj33yvX/LkeJ6v58MAUeyjxUFW
0vssygAjeWaRPxtFQythQ4l3APVWfMPF7sFy94DQebZwtpv3oIP/uFd0/6zo
Xo/grob3qIN3t413q5V3XQ3UIbiqEVxpEV5uFl1SF080F080icZPCyca+db6
opEjm8YPY9bvMMu+jaav37+169e2Xj66SEsqQW/M4UqbUTZnkMP3NkQgKjch
d5EKNxn/iRw1Xwyoduoj5CA2wLagXAcheZ4spRR+oA5CEkSvP+iN2gAtRT6F
FofN4phZHjMp0GpivNQzXOoaKrFfFM31Cp80F9zes9518jchUhgyyd0gS2g5
mnqjJPN0FeiWQF+xt0801134oHHD2Lbf6HcUES0VtK6S1lbTwBtdtRZdNa2p
JtuR3iCP8PDDPHRCheWNs7sKOrfn67azvAF64yte45eChi9lDft3Nh45qG5t
Bjbo6OoEA8I+SQTynEMyljVebP9L5MkzN15Th9eydChv7uLQ1wQZ2COH8unK
+y9Z+heXbXr2/q0Hl0bu0b22oe024rPb/b+ztfJ9Q5iXKA+YZUG6JmiRB0y1
4RHF0xHlszFlFK/wDqKDa57+EudFgae3yKErmOsqsvUKH54VTfYKJ3WCxzr+
g3be3Xb+7XbBrQ7BTXArGuF1tfCaWnS5reRqq+jqGeHVM4KRk7yx+sJx0Bvf
Y9cPYqPfbqS++u2NXb+2g4zRS0BgOAiwJ4gubEAg4EpAbxAqN6lw4gon/Bb8
ENU9audw+F0p/BBVRVCXVuoy1PieJ8SkPkqBBltIWQg1WYAMZQF0EqLWB+7D
Io2ZgDqUYUYeotCCU9dAib1X6FBvevjDem/beyGmNGiWu2mpH0gDlAktmUdh
VGmwv9jVK5hRYzd2vzu8Ld9wsopql1C6alJTTmkrWd6oorViWldMn+QDbxgP
8fTfF/bvBd4oPLursOvrPHg0W7DmL/ObtpU2bq1s2v1J44/7W86cAv0AbKDr
7oJnMQLJpqyROia/WOM1NRqaul5jMYfy5i4Ofd2wdv5lJf2XDA1cMC4uu23q
5tWHI9Qjk/4Juf9u28eu9k1evSAIJoWuBtIImGQBqyyEdugpY5Q4RlUEh0u9
A8JAH9/bA6RR6DovnD0nnDonfNQtmO7kPe7kTyKfIrynE97VCW9rRLc0optt
ohua4uuakhstwhttgiun+ZdPFF45tunSD9j1w9jtesy6d4Nhy28v7/i1c7DE
DhICVzpYvTGLerIyG1IX0jnkU+RAKc/FBq6cM8ocyMUoXCRbCdEDRcjnhqu8
hMyHjtuKUb2U3QoYIGuBRoLItojDJlkQ3IdFEbPIYua6CKMMUCBXxH59eWRI
6D9XYGvZ6D1bEDJVB80yPyMNmWpjFmUMBVok6JTkBYGjI39y/7v0Vx8MHRLR
WgmtkzLdUrK9ktRUgE9BegO0R4eIPsEj61m9AbyxD9U3encXdLO80Q68sbOy
aVtl856/nTr0Xcup43HTAWwA36QSyE8contBGkuXNdLkydM2XtNGQ7keyivG
YuyRQ/d25eXTbPxLJBx2zc3OTT+em7x122Sc7vgkcI4fMMlDtBQ+msNMjd8C
8l4csSrQWhurAqgjMiwI9RX6ejb5LvJd5wW2XsETXeGUetOjtsIn7fyH7YLJ
DsE9NftoBHfahPDcbhPe0ghut/BvnSq6drzg2rG864c+vH0Yu38Mu3nkQ9Oe
DYOfrpvc/SufsQLJCfx5fcOmR3oDfdVL5wjgDdScBSnCMgnoDRn6k0YFqocY
ax0gMyjl3HCNE4c/X2M3SPyo7sFWP1DdQxqgZEFSHAS3gqKksrBZEbSogiA5
TCr4XwvTshBR6RsWeQZFfn0p8EbIIguZJGDZYlblPOKNGo+hJthbOHvy/Ylt
64YOiIi2chAbTLvE1CWhOiup9jJzlxTVRTVllPYn3jjCG94f1xsF53YXdH2N
dW7F2neXNn8lat3z59M/ftvSUK8DMug9C1TQhZ6erp5kAmHZI04gyZNracsa
iTx5UuM1aSdP6vAa51B+dmQvP1YxfZpzfiwcRn9nXHb7g8tjc72fB0h5lFH5
jKVhssrHgMeX+K2KkEk6bwL2qH1KiEL9vGAf339RYO8VzHYWPdEWPtEU2bsF
M53AIYIpneBhu+hBh3CySzjZKZxsE9wD3mjm3zxVdLOx4MaJvHtHNt45jD08
gd09/uHE/g349t/Sn77rqn/Hh1ehSy5UHZIQhMqGJIec/QqqQ+kklXYCpAWS
HEAjoDfgd4Fh0APawyhH52CMUvjeaZQ6jRIvWQvmxYcm48ReXOyn5CiaToMx
ATKpQXUPkzxoUQZN8A/KgzT4ERVyN4YqH1kTMNeGGEmIrob/9yiIE7M0Rle7
h0r9mo03v15H7C0i20pIdRmpFTMdEnMnqI4KSlti7pKA3jBrRGSbkDr+XG8M
fxvXG5t6dm7q3IZ17hJotwuad0ibv9/efPzHdq0a7AbwADzdvb2IQHoXJZBl
ljUyNV4T0dAMCwDhb1fqHMpbs5bndcb/scitfLoq8Y9lzb+w5iXy+PKol9wy
b/1zaORPUUYZNJahAJiJ3dFBi5+aFTG8KmoojuqLvX1C5wWB/WzRbEeR56zA
2cW36XgzOv50O/+JRjClETwCAtHwH2n5D1t5d08X3j2Vf68Be9SA3TuOPW7E
Hp7GLh34wLx7Pf75ugfbf+XRbnAZa9yUHCSHl1F5acQeduAH1pLYiDrWpyjh
hyA8gFWQ8GCVic2oADKB33Wjgira4hWiFR5S7qPkbkLiZ1TIp5ASti0rA95g
DUsNSpbSMg9VC9rDa0ITbUFGFjTLw4wkaJEF4EGiqwad0zVJI0xNDBd5zuVP
732X2JVPni4m28qJlgpSXUlrK03gTVi9YeqUWNorLGoB0SqgjvHIo0X44SL9
d4UD+wou7s7v+Rrr+rqg65sqza7Klv3/3VJ/sL21CbwGKAfgAXgWJZAXFiZz
WSM1T56+8ZoUDU0aXuN6KK8PVn32diXl0wz+BdjD6/HYL9M+8uuAZev86Bex
sb/Pj/01TIoDeHmYKEeVUkocI6VRojpiKPX3C5zdPHsHz9vF83QU2XV8kBwz
ncJpreCxRjilFT7uAALhTzYXPThTcOdE3lQD9uA49qgeu1OP3Ty84dI3603b
3rv11Tv+pl+7BoXsiROJg5B7SHijVS5a5SRVDqoOdVjIOg/8klK5SRVwhYOs
c6F2rdJDgQJRAGmg5V2gVQxSF4GWhQJvgPxAm4eB+mh0ItZPK9A3jDzEwC/F
8XKHhxT7GbmTqvXBb6G9Z7VhkzhgkQdZ3giaJH4a2LImahRFL2IPv3+H2ZmH
N5RRoDRaSvDWalxdQ2mqGU0F2Q7epBy0h6W93NzCx1v45EkeeaQIPwS8UcDy
Rt7Z7Vj3QXHH7grNvr+2nDzS3nSylz1PAMoBeCATgfxkYbrTDaEkjcmn5skz
R0MTw2vZOBQusPGzIGf5sfLyafb+Jej3ed1O+yWLY9wQHjsYGtkes3wSHd8y
P/bnmImtAxhE83QlOumOV0aGRcF+gb+X5+/hebv57m6Bo0cw1yO0dQtneoSz
XcLZTsEjNe9Rc+HDpk33GvKmTmJPTmC3j2B3j35wc//6q3vW3d3xruPwr6ND
BW5DlR2X2fFalO/Ca8GVOAl4o1VOAjSG3MVsBh7w0HU+pm7OKHewNOLAlX5a
BXThJhU+dFNexV6AVYDeALERNilRM4VRRRkgDVnArAzRUhAYEbLSS5SDjvIa
Sj3G0iBZ6QI7RkvQBBxSHWilT5CpBl8WoSv9eFnIKAp0vf/kwDp6B2Y8Vka3
VdBtZYS6FPQGpZXQHVJaW0O0V4ECobRik7bM3CLAWwXkcR5xpMj4QyHbT8m/
sAM7u0/Uvbe6fd+f1McOaFpOg3w439cHXgNIgH3iBHIhA4GkLWu8PCafyJO/
1HhN2smTFA1N61DS9lA4h/LzYlXKp0vGP3LwL3ECmY9F/V5PwO/zPb7rumzx
jmrDI3sjI1/NWz+Njn4yb94csqiCRAkQSNRQFh4u9lwUgk/xdfO9nXw3PDqe
S8ef6xDMavlTLUVPmgumz+SDzJhp2Gg/hU0e3zh9fP397zfc2//+7P519mPr
ggMFMbLSTaDkBjAG2yiRopYKAQZENmdUOEmFm67zm+rgK/gXN61yMR95QXvQ
dSFTHaILUsnelFeFKJATiigjD9PyCKp21obNwBvyACWLMJIoIfLpBaHBTa7z
mLdng7Nro73rA+/FPNdwkdcgdJPlHrLUhxe7jMV+QhgwCMMGgbcH8zSue7D3
N8QubPiIiNZU0W1VTFsJoS0l2tgmLFBHu5hor8Y1bJlUU2luFeAtAqq+iDj6
nDcG9uSd38PrPSLv/uHv7U31Hdq2np4uePHBaIBsYNkjKwLJWNYgUsoa6Ruv
mYfX0jqUN/c89FuJ3OTH2pVPFxJI3LlEwmGfx+2xPQlMXndPGJz0vujYjvnR
LbGRz6Ijfw6aVAFaGtQLw/rSqL40MFDsviD0nBP6gENAdWh5trYim7pwrmXT
o2OYowFznQaH8uFsw4bHRzbYT7xvO/m+p2196EJ+wFAeZsCYyF2gLsBrGGVz
uIwta0hRWDROI1QdWBLwIB6mDjyIh/7IyyDPAnIiYKrzkUrQG0AU82wq4yn6
KkO/ZGRRiypmkobIypBBENCuc5/41ZO9v7q7750bu9+9vffdW3vfeXDwNw+O
r5s5vc7ehTm71zt7MeATh26DS/2+s37d5DfrxnZ9SO8r1DeW4GfKiNYKUBe0
pozQguQoI7U1wBV0u4TQVsJPqHaxqaPa3Mo3NvPJ+kLEGwcK9PvzB78pPH9U
eu5gXW/baXj3z1+8AG89PGA0fmKPDATywsK83Hh9UdZ4OU/+UuM1QzR04XoN
zqG8iUjLHtmnT1cYX8/sX/75z2cxtj3ndczZr4wE710Kjvd4LXuj1i3R8a0R
839GTHVBRuE31gQMFRFDVRgl0os954X+c4LAWZAfRc42zN2GeVoxdyvm0WC+
9o1uzUZf94fBrvzIkCBCSb2ExMsoPaQYSMNJyhyE0k4BachtuMJmkKDoF5gX
lNOQu0g0Lesi5C5QHZTSQwFpqPx0XdhcF0R6o26eUTxFu4XRaYOYBV00iJgU
Yaoi0FfkaXzn0a53Jrats3z1HrV9PfX1B/CV2f4+s+23I7s/GN+1/vq3G2/s
33Bz/4Z7B9bf2Lv+yp4Npl0Y8S3feLyYaikhNcV4S4WxuYJGBY0ysqMCOARX
V1MaNMhGaivIDpAfNSZtpbmFZ2ziPeeN7/L1+7CBBtnFQ4q+5sNsGXMw8YDR
WA6BXFiqrJHIk7/UeE0bDU27AJBzKG8olis/Vlg+Xdb4bSwSCbrsT+fnAz6v
/eaEbcTgNh/zWnYGTJ+FLJ9FLX8IWTf78Wq/oSpkqIgZykJDJb5+YaSf5z5f
5D/Piw4WhPry/P2bAkP88KAgZiyJ4JUBWuZHy4GRokCH1Qi5HZfaCaWLApOi
tMejGoTKbpSC/GDvFyAv42BnWFyorKH0Ukqgjoj5oyCtjKLzc4qYuY6lDvAp
ynlGEmHEvmGR48zGyX3vXdqzYWT/RvMPmOk7jPoGI/Zixt2Y4bt8/LAQ/6GI
PFJK/iDCDwktR4WmQ0XkMYH+mIhsKgZXQrcWk20leHOJsbkUeIPWlANREC0l
uLqK0khoLbBHKdVRyXTUmHWgN3iG0yxvHC4wfoMN15f3H6m92LBrcLAfXvYB
/TD6OjwED2iGhQTCskcGAkkta7wYk0/kyRON18UcitPpTHUoi/VQuLU8bxBS
2WMVu7cr9C8sgYQDXo/r4Z3ZK6PTVqOdbHSZ9gbMWyLmv4N/CVl/D6bDB7xh
rAgPl8zjFWFDWZSoieKVQfAjxrIwrQiSUj8pCTK1rDcRuwkxWBKHEX21GSV2
g8RByh14rYNU2BB7KOcIOcgPFwFig42Mwh9AqgP1XMCeBGgl4g1KjvSGWRWz
1MVM4E2UMasqRksjZJXnIn+uaeODBuzGSWziWJ4lzhv7WN7Yi+n35xkbRNRp
gRkMiLqCbhYxbeV0q4hqEhInBXiDiGktoVtEVJsIby41nilBf0ZdTIJVaSkD
BUJpahhtJQV6Q1sO31h01ZbWIuPpIry+AP8hD7TK8DFxf/2fLnS2AT+AQoAH
Xnn2WTaBpDtqkL7xmhoNTbq8xjmUtxhLyo+Vl09z9i/zoUDANed+PDl3bXx2
wjxrHnKaGn2WncGR7fPWTyPjnwWsm0NERYCsCOLlQVNVgEY7yQPwEzTJLgVX
4jNLgDEcdK2LqLHhcpexym6stRur54Zr7OiQq2QOpb9kdhQjl4D28JlUHlLh
pFQuvBbpDUKGMuSMEh62aYL0BtAFsEfEjHhj3vJRGF3NrnQOFXl02GRz3vUG
bPwYZjmIMSxv4Hsxwx7M8P0mY2MJ2cC3tJWiXgnwRouIbuZTp4REgxDxhrqY
Zg/dEk1CY5OIUpcBjZDqYuJMsbGlHHiD1lRR2lJgErq92qKrsbQUGk4XGuoL
jPVgWBTDJ1T9mhPn+y70DfSDrYD3HZ4hgyGFQIZTCSTJwiSlNRbJkz9fNZwh
GpoYXuMcyluMnDeP5bx8LHv/8s+n82GvyzvzyPHgzuzlkRmrcYYZdJn2+Uxf
h0e2xMa/CIz8I2L6CN7rCFHpx0v9VI2brnWziU0XVe0y1jjIGgclnTNKHOgO
I0iOaru+Zg59U4tECClnx+dBgSh9tMJDo8AGeBMXXQccAt+EUTyDbaZQsmhc
ZgCBoOi48qm1LkxJ/Uaxa6jwSUf+7aa8aw154/WY+XuWN76J80aefn++8SiQ
g2BUIzK1lDKaKpO6nGmXU80Cop5HnC6hzwjpJgHdwsdPId6gW0tZGhHhTSIk
PzSVjKaC7qhAvKGptHRUWlryDacL9EfyjK1K40mZvnlXP0sCcYUA7zvLHsaf
2CNBIMNLKpCXyxpJefLnjVcUDb2cJhqaNLyWTQ+FcyhvBzLLj5UP76/EvzyL
RUMep2fqvv3O1dkJk32ccVkveJmdPtNWv/XzgOlvIcsf/aQMHUMZFjmNlT68
wk6g4yZ2vNpFVtkM1U68At2LJ6V2Q7UNl9kNYvgKjOE0grqoBXvippU+Sual
VT4mHuRQoeIGo/LDQ6GMaIRtuQJvILcCX8Gw0GJ04H6gcEqXf/tM/uXG/JGj
mOUAxnyLUXsxfB9m2JtnOC4kDxWauxTWbrmltdTUrjKpK00tVbRORbYKTa0C
Ri2hNTXUGQFxtAA/wadaiulmIdlaTJwWGptLKLAt4GK0IkpTTGurzJoySzOm
P4kNN4vxRrnh9Dajvn9gaAjedPAUoBDgfYcnTiA/cUgSgSxqYRYpayQ3XlOj
oUm3oRPrNTiH8svBQvZ4BeXTZa0P+ve//jUfDgbsM16HzTk7bRslpi1GG91g
p3a46C981i98pr8GQSoQCv9wiVNf5taXOdCd1qo5EB7G8jkkLapRaZSUzhnE
rFsRo7F6XGwnlE4wJsAboDfIWg9T56VR5tzNgCtBHBKkFCEGHWqMojvR7AEU
kB8gbIxi30DR4+7C2835VxvzR4/nx3mDBN74tgA/UkiqZSZtxWjHR+PdH4+0
/t3a/pm19ROr5h/m9r8wuj8wHXW0Wsy01dKddeRpPnFGQDeX0xox0SoiGnj4
KdAhiEaotmJ4aHWZSVuKeKOl2NC2GW/6FO/rBivBrtCh4Bt42YE9EgTCskeq
AtEvpkBSxuRfLPLK0HjNxqHEtw3D3wrutMFbj5WEx3KLfyzDvzx7Nh+L+h7d
dT66Z39we2aUesL0uci9DnqLh/nEZ/3cR3/sp+u8hirvIB/dhgbtQVQ62Psm
brzaCbwB7AG8QQCBoO8dbJTUS0rdpMKD2ANMioLNlquCqBULkkPpY+rAs4To
uFuRo/vyZAWaaOvnPekpmGwD3sgbq2frG98g3kD7CXUKU2PJSHudRbN1pHOX
tafJ0t9p6VVb2g9YuhrMun0W9edMy2cW7V8YoBFNHaWro5tFtLaWaldQ6lKi
iU+1VtHqGlototVCWl1u0lSYmzcZzv6RaPkL0d0EegBUAbgJ9qFY9khDIAkF
ksHCJJU1Xs6TL9p4TTu8tnBFOedQfplY7tmXnIf3l1U+TRDI02gkGgl7bdPO
ezdmJ8zTpqEZvMFL7XLgn/qYT/zmv/iojwJABfpiz3CJ21jmIMVuvMJNSpyG
SqALD1FjQ8IDXAyiEWRbQGPgYhdR6wG2GS71svfavPFpFEoFIgSoI8yokG1h
FDGyymMQBwZ4071F99V5l09g40eQT6GBMfZglLra1CK2qpXj2q0j3Y2jhr4x
vP/SxPgYg48Y+qxD5yzEsLWv03S+3aQ7QWkOMJpdjHYL1fqJSfdHWvcnuvP3
ZPdmVDVVVzIdcqq9gj5TYO5UWfrq8I5PyM7T4CAoEwMPsAf70C8TCJkgEJY9
UhWIYaECebms8SJPntp4TXUoieE1zqFwSELO4bFV9C+L9V/+9exZNOD1g3l5
eHfu8sisxThD9TjpH7zkVjfzP4HxbT7T7330Rz5DBTq7ABxiLEP3oPEqL6qB
VDuM1W6y1mEUOwkpiqPry5z9QudZzNn+oefCJteQ0GuoDKLJVhU7v4aKHgFK
HqaV82SlF68NDBQ96dp0rzXv0jFs/BBm/hbxBn1KaGqRWbWKkY7tI7oD48Pn
rrGAV+/KlSug9uGzGzA2arXQuEXfxwz0mgbPMYPnqPMdlO4Iod5HdOwkOr4k
dP/FnP0z0/0P5uIndKfM3Co2D3xq6GmiCQO810Ad8Qe0QTYEksHCpObJE4u8
UhuvaYfXEus1knooqQ6Fi5T/ArHC7u2a+hdwL2Gvyzf90Hnv2tyEGQhk1jQ0
S33nYbZ6zFsDY595zb8L4FUevciHl3iMJT5K7DZUuYkat7EaNIbbWOUB7XGe
Z2t878nB3zze/970sfec6g2+84WoX0Oi4ZQwO6gSpOEbeYys9holgYHCJ135
d5rzrpzARn/EzN/kMQ08i04xopGNd3xlOae5OtB18+plkPfwYQ2vXloCgU9z
eDdHRq1AA4xxiBq8QBiHSMOQUT9ovNhOXNAxfS30uT3m84dMeAdJEWAfQAzA
q80+5gSHxAnkJw5ZBoGklDWWbrymHV5beESJcygckpBDeCy33ac5+Jd//+tf
sVAgOPPQff+6/dbl6XHTjMVgN2u91A6vaWtg5HOv+WO/pc6PlwTIYj9e6iMq
3IYKL17j1Je7hoptbQWP67F7Dbz7jcLbh3jTBzHHyQ99vXw/Lo5SsiijjJnr
wjT6Zp6s8BilvkH+lG7TnTPYleMsbxzGzL11l7qkYx2fj55rHRvqvTFuvc0C
3rs4eyQIJM4eCQKZ+IlArPDOWi2WEasZyMFsNlutZosZVIDFYrKMjsADSgDe
a5Y9EgRiThAIyx6pCoTKYGEW5skTi7ySJl7TDq8l1mskVpRzDoXDkljJ5uQc
4h/L8y9P52NBX8Ax656Zst2/OTthto1S3tF239jB8Ni22KUvAhN/DVJVPqI4
iAu9RpFDX+68KAr1l8/2l9mozQ5G5Rioe3xK9fCQytEg8vYURfCqCGqmqKIm
JYp+Eei4m3+g6HFnwe0m7Ar4lMOY9ZzicpfsUs/fRy60TAx03xiz3GMBn9Tw
3iURyHUWGQgEXtvRiXFwCuwzBi8y+4yCEsiGQBaxMGkIJF2ePH3jNe3wWmK9
RlLKi3MoHDJgueGxDOXTVYl/JPuXp/Nhn9trn3XbZoBGnNNT7st0cKTed2l/
dPRz//inAZPch4vcBlEEF4eGqnwT//DiMpfxP7wX/ujs3zHVs/f2PoXtCBbW
iyKkOGZWRalalP6iqj2Gau8Ab6o9/2YjNnEUG+uquHZWeb1n88SFw5bhC9et
9AMWk5OT8NLF2SNBILdYLOZfEgQC7LEIgYwmCIRljwSBWBIEwrJHqgKh0xHI
wrJGmsZr9g6F66FwWC5y696uln/JnB/73//99zMW0UgkFAx6Zx87Z6d9l/SB
0R/9Izv9E/8TGPlLiCh5ytQFqI/D9J/8/X/w9O1wG0/Mdm+/+eN/2L4vDJ3H
QmR1FEwKJY2aVfNkjRd4o3/TYy0GvHGpt/RGr+LW2bpbvbtH9BeujFqmWICw
h4/pOHssRiA3WawdgSxiYV4QSKKssXCRV6LxmhoNXTi8tvCIEudQOOSM7Lu3
uQ2/ZF8+TZ8fYzePRSLhUCDgd7vm7t+cuTbuGG1z0TuD5s8C1r9GqC+9hq+8
hgM+qssxcHhG99X9hrrZo/zA+bwQXh4B0iBrwrRinqz0GCq9fflT6vzbnfwb
gx9P9snv9G69YrhwxUw+mrz/hAUI+wR7JAjkPovF/MvCAkjaCiq81AsIZCxB
ICx7JAjEmiCQlyuo5tQKamqePEPjdUmHwvVQOKwEOXRv186/pJ3fRwQSDnlm
phxTk+7LI85xIjjaE74x6r1s9k1ej/g9LvOw/dxuT0+db7A6hFeH8fIoKYmS
1WFKNm8sdQ9XeM5vmjrLu0//7XG/bLL/i5tAGhYaSAM+l+EtA1UPn9GvD4Es
YmFeypMnVg2nbbymrtfgeigc1gJx9lhy9UcO3dvsy6dL9l+iQX8E9IfbGfG6
4DN0PhqJH5ByXB93GluDemXIujlMS6JEaYSQIL2B18zjpe7BMu/F/Gnqo9l+
+ZPB/7xl0F0zEQ/v3LKzmJubS7BHgkDi7LHQv2RZAMmmgpogkOwqqC96uAvK
Gi9WDSdFQ9Ou11jMoXBDrxxWCzlUP5abPl2J/Ei9/wIAJnFeMgfNO/yXvoiM
bY6aKmO4cB4vC+GSeUOpb6A0aFW4BhUO4+aH+qPXzOSDW9fhE9nJAiR9gj0W
yo+FBPKIRdoCyB0Wa1kAedGCSTReE8dQEjt5UofXOIfC4dVjycWnOaRPV1g+
zXz/JRwKBaYm/BPq4OW9oVtfx0Y3z4/IowbePCmP6Yu9Y/8VJjc/oY7duzT6
6O5tFzusAR/K8IotSSBJ/mUhgST5l7UmkKTGa9JOntThtcQCQM6hcHjFWG54
bI3Kp9mcz342Px902X3OudD9oejlxtjNnZGJT55aP4qOfeY1fREy73k8edc2
Mw1MAR/HPhYJ9kgQSJw9MviXhQWQJP+yxgWQkYWN10Q0NO3wWmaHwq3l4fDK
kFt4bOX+JZv+S6IFA8IDXpb5WPTp/HzY/SD8AI+Mn/FZvnGNDAdnbgJNBFgB
H2QB71ecQLwsXn8CWazxmhQNTV0AyDkUDj8vsg+PLXd3UNryaZbx9bTn5wAg
1CORsP/x7YDbGWMB6j3CAj6R4wQSYJFKIKtVAFnFCmpS43Xh1tBENDRLh8IF
Njj8LFhu93ZZ/iXn/ksqgTx79vSfz54tvKAdb8HECSTMIkEgfhYJ//K6EUii
rJHYyZMUDU1aAJhYUc71UDi8VsgyPLas4Zfslyfn0H9ZSCALFUiCPRb6lywL
IAsrqEn+ZXUrqEmN10Q0NHW9BudQOLwRWK3u7VrLj4UN3KcsFsqP3PzLwgJI
kvxYxQLIpUWioctyKFyknMNriCXDY2tUPs2h/5JEINn7l5+LQNJGQ1OH1ziH
wuHNxbKqHyssn74C/7KQQDL4l4UFkCT/svICSGrjNRENXZZD4QIbHF5zZFP9
WFZ4bLXiH2vkXxYWQJLkx8oLIImdPGmH1xauKOccCoe3A1l2b1dYPs0m/rFc
//L6EEjaaGg2DoVLeXF4o5E5u74W5dMc4uur4l8WFkCS/MtyCyAJ/5LYyZOI
hiaG15JWlKd1KFyknMObjuyz66srP1ZePs1BfmTZwF1yhD+xNZRzKBx+4Vh5
+TTL2w05xNfX2r8sl0AWRkNzcyhcYIPD24RszlZm37193fxLNgHUbHaAJKKh
ScNrnEPh8EtGhurHq5cfK/EvGQKoi/mXbEb4E8NrSes1EmdekxwKtziUwy8K
mcNj2ZdPc4t/rJ1/WS6BJPmXxaKh8QWAGRwKFynn8IvCqpdPs4l/rJ1/ySaA
mmGEf+HwGudQOHDIjCXDYznLj5X7lwz7x+ILDLP0L9lM4Cat11h45jWzQ+EC
Gxx+ycgmPJZl+XRV4utrUQDJkADhHAoHDjlj5eXT3OIfK/Ev2Q/QZWjgJq3X
WHjmNcmhcItDOXBYDD+v/Fgt/5J9AzcxvJbqUOA/MtWhcJFyDhwWQ4bmS87y
Y+Xl07TrT9PKjyz7L8tyKNxaHg4cskTm8mmWqwtX3b9kTyBJ/iWJQOLRUM6h
cOCwRsiye5vl8P4r8y+ZG7hJ6zXiR5Q4h8KBw+ri1ciPVfQvmfsvnEPhwOFV
Imf5kUP5dFnxj+zzY3Fk6VC4SDkHDquFtZAfS5ZPVyv+8Yy947Bkyotby8OB
wxphye5tNunTNfUvaQkksV4j7lDg38w5FA4cXjGW1b1defk08/qgbPJjnEPh
wOH1QQ7yY+Xl0+z9S4JAMvdQOIfCgcOrx2LyI8vZ2xWWTzPIjwSBJPVQ4N8c
dyiJ42tcYIMDh58LayE/Mi8fy7L/kupQ4ueh4T+GW8vDgcNrgmy6t6tePs3g
XziHwoHDm4IM3dtX7F9SeyicQ+HA4TVHDvJjdf1L2h4K51A4cHj9sRL5sWT6
NPP0XJJD4U4bcODwxmHl5dMlh/eT/EuqQ+GGXjlweBOxivJjyfIp10PhwOEt
w6rLj9TyKedQOHB4K5F9eGzJ2dtU+QE/iZ824BwKBw5vJZYrP5Ycfkk4FO60
AQcObzfS7l3Pzb9wDoUDh18asi+fLuZfuB4KBw6/WOTsXziHwoHDLxyLyY8M
5VPu+BoHDhziyCw/FhII51A4cOCwENl0b7nTBhw4cEiLDPKDcygcOHDIgLTy
g3MoHDhwyAYL5QfnUDhw4JA94uzxc/9XvG34f4W4CAU=
    "], {{0, 297}, {360, 0}}, {0,
     255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{360, 297},
  PlotRange->{{0, 360}, {0, 297}}]], "Output",
 CellChangeTimes->{3.643570360811248*^9},
 ImageSize->{364, 297},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BlurryEngine", "[", "rad_", "]"}], ":=", 
   RowBox[{"AutoCache", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<AutoCache_Example_BlurryEngine_\>\"", "<>", 
      RowBox[{"ToString", "[", "rad", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"GaussianFilter", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ExampleData", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<TestImage3D\>\"", ",", "\"\<CTengine\>\""}], "}"}], 
        "]"}], ",", "\[IndentingNewLine]", "rad"}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.6435703667636557`*^9, 3.643570366781206*^9}, {
  3.643570423039859*^9, 3.643570438650642*^9}, {3.643570492519144*^9, 
  3.643570493977759*^9}, {3.643570574288744*^9, 3.643570702906076*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"Timing", "[", 
   RowBox[{"a", "=", 
    RowBox[{"BlurryEngine", "[", "10", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6435707061393642`*^9, 3.643570722140891*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztXQdcU+feDiRnJAdta2172957297WuqkDQUDUKIrMMJ1UwYFbQVBERQUF
ZBNmQJZAmIrgwoUKKqKCg1pH66yl16KlioMRON/3nByb4qy9X2+1fvx/qQ2H
k3jO+7z/Z7xvwE+mLrR30xYIBJ40/rB39ZYuWuTq4yDCFyN8vGZMFeKJKf7L
wn/c8//pqI7qqBer1tbWlpYWlmVf9oV01H+3mpubf/75559++unOnTv37t1r
ampSqVQduL9+1djYCJSvX79+7dq177///t///vfNmzfr6+sbGhru378P3NHy
L/saO+oPKKAJZIHy2bNnv/rqq3Pnzn3zzTeXL1/Gkdra2hs3bty6dQstD9wf
PHiA9u/A/a9YQO3u3bs//vjjlStXvv7662PHjh05cgR/njhx4vTp0zhy/vz5
ixcv4rto+R9++AFnov1v376NVwF3iHtbW9vLvomO+u0CUkANdH3p0iW0c2Vl
5b59+3bv3l1aWlpWVnbo0CEcOX78eFXV8erqKpxw4cIFnHn16lXgjlfV1dXx
uEPcIQEduL+yBQmGHIOiv/32W7RwRUXF3r17t2zZsmnTpuLi4m3btu3cuXPP
nj2b8pQlPlOqFkiLVs7auX3rqVOnHiP59uLeYepewQL9QoLRnmjVkydPHj58
GLAWFRVlZ2enp6dnZWXl5uYWFBSkxkYdd+1725u4u0L76rhOEd7zDx48CJJH
s7cnecwWkPx33333mLjzpq4D95dVoFm0HugXLYn2rK6uBny7du3avHkzIE5K
SU5ISkpMTl6fmiIP8jv2ZbfGddrs9nfZHe+qYgVXZ3eq8DQtDl5SlKfct68U
M+To0aNVVVWYLWh2+DrMHIg7T/K8uAN3jbh3mLo/syCpoFm0Hu/EAFN5eTm4
GrydmZkJiGMT4uWxMdFxsWtXrSib1PNBkDa79yP2iC57uBdb1o3d9wm788PW
/DcbgiVfL+y+e9W0zemJu3aW8M0OR4eZA5I/c+YMT/IQdw3Ja8S9A/c/oUCn
oFa0GyAAHIDmwIEDO3bs2LhxY0ZGRmLy+pj4+Ah51LrQkDVec7e5DPjRk2YL
dNiK3mzNEPbMMPa0MVulx1Z+wVb0YQ/2AOjN6Uzdmrcv+Hxx2Ndxm9x/S34O
TB2anXd0IPmamhoNyUPcNSTfXtw7TN0fXmgltBVaDMMOCADH/v37t2/fDlHe
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
O+p1q46O7qg/tv4X0ZI3PQ==
    "], {{0, 68}, {164, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{164, 68},
  PlotRange->{{0, 164}, {0, 68}}]], "Output",
 CellChangeTimes->{3.643570730744239*^9},
 ImageSize->{168, 68},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"b", "=", 
   RowBox[{"BlurryEngine", "[", "10", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6435707356241426`*^9, 3.643570735746853*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
z/kF/856I6pz7nfW71D/D5olflA=
    "], {{0, 68}, {171, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{171, 68},
  PlotRange->{{0, 171}, {0, 68}}]], "Output",
 CellChangeTimes->{3.6435707367462463`*^9, 3.6435709178426867`*^9},
 ImageSize->{175, 68},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", "\[Equal]", "b"}]], "Input",
 CellChangeTimes->{{3.64357092611852*^9, 3.643570926702753*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.643570927317936*^9}]
}, Open  ]],

Cell["\<\
You can set the cache directory in two ways; one is with the Directory \
argument to AutoCache; the other is by setting the $CacheDirectory variable. \
Additionally, the $AutoCreateCacheDirectory, when set to True (its default \
value), will automatically create the cache directory if it does not exist.\
\>", "Text",
 CellChangeTimes->{{3.6435709362443123`*^9, 3.643571050657382*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["BinaryStringFix", "Subsection",
 CellChangeTimes->{{3.643581336316469*^9, 3.6435813383390837`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643581346394429*^9, 3.6435813472269697`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "BinaryStringFix"}]], "Input",
 CellChangeTimes->{{3.643581386522533*^9, 3.643581389419606*^9}}],

Cell[BoxData[
 StyleBox["\<\"BinaryStringFix[{c1, c2, ...}] yields the string formed from \
the given list of characters, truncating the string upon encountering the \
first null character (character code 0).\"\>", "MSG"]], "Print", "PrintUsage",
 
 CellChangeTimes->{3.643581389935511*^9},
 CellTags->"Info3643566989-6300800"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.643581353738448*^9, 3.643581356042259*^9}}],

Cell[TextData[{
 "Often, when importing binary data from binary file formats such as NifTI or \
MGH files, the format will allocate <n> bytes for a character string and will \
signal the end of the string with a null (0-valued) character. A common \
operation when importing binary files in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is cleaning such a sequence of characters into a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " string; this function solves this problem."
}], "Text",
 CellChangeTimes->{{3.6435813928817596`*^9, 3.64358149704766*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.643581501470537*^9, 3.643581502742774*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NeuroticaReload", "[", "]"}]], "Input",
 CellChangeTimes->{{3.643581969665969*^9, 3.6435819721559772`*^9}}],

Cell[BoxData["0.01`"], "Output",
 CellChangeTimes->{3.643581974853981*^9, 3.643582123169911*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"characters", "=", 
   RowBox[{
   "Characters", "[", "\[IndentingNewLine]", 
    "\"\<I have an apple that thinks its a pear. And a bun that thinks it\
\[CloseCurlyQuote]s a cat. And a lettuce that thinks its a lettuce.\\\"\n\
\\\"It\[CloseCurlyQuote]s a clever lettuce, then.\\\"\n\\\"Hardly,\\\" she \
said with a delicate snort. \\\"Why would anything clever think it\
\[CloseCurlyQuote]s a lettuce?\\\"\n\\\"Even if it is a lettuce?\\\" I asked.\
\n\\\"Especially then,\\\" she said. \\\"Bad enough to be a lettuce. How \
awful to think you are a lettuce too.\n\n    --Patrick Rothfus, The Wise \
Man's Fear\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bytes", "=", 
   RowBox[{"Join", "@@", 
    RowBox[{"ToCharacterCode", "[", "characters", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "@", "bytes"}]}], "Input",
 CellChangeTimes->{{3.643581527578601*^9, 3.643581530519677*^9}, {
  3.643581580661169*^9, 3.643581622038117*^9}, {3.643581655988997*^9, 
  3.643581696381144*^9}, {3.643581758101861*^9, 3.643581789617708*^9}, {
  3.643582154061368*^9, 3.643582179966969*^9}}],

Cell[BoxData["418"], "Output",
 CellChangeTimes->{{3.643581761884115*^9, 3.6435817901845627`*^9}, {
   3.64358190177066*^9, 3.643581918249423*^9}, 3.6435819760831327`*^9, 
   3.6435821239693623`*^9, {3.6435821721542463`*^9, 3.643582180615839*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bytes", "[", 
  RowBox[{"[", 
   RowBox[{"1", ";;", "10"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.643581770845804*^9, 3.6435817727450113`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "73", ",", "32", ",", "104", ",", "97", ",", "118", ",", "101", ",", "32", 
   ",", "97", ",", "110", ",", "32"}], "}"}]], "Output",
 CellChangeTimes->{{3.6435817734484158`*^9, 3.6435817914994307`*^9}, {
   3.643581902691738*^9, 3.643581919455709*^9}, 3.643581977403446*^9, 
   3.643582126062565*^9, {3.643582174933272*^9, 3.6435821818728523`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"paddedBytes", "=", 
   RowBox[{"Join", "[", "\[IndentingNewLine]", 
    RowBox[{"bytes", ",", "\[IndentingNewLine]", 
     RowBox[{"{", "0", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "255"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"512", "-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Length", "[", "bytes", "]"}], "+", "1"}], ")"}]}], 
        "}"}]}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"paddedCharacters", "=", 
   RowBox[{"FromCharacterCode", "/@", "paddedBytes"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "@", "paddedBytes"}]}], "Input",
 CellChangeTimes->{{3.643581819993081*^9, 3.6435819267091303`*^9}, {
  3.6435822084972754`*^9, 3.643582249693802*^9}}],

Cell[BoxData["512"], "Output",
 CellChangeTimes->{{3.64358189503362*^9, 3.643581927649253*^9}, 
   3.643581978386224*^9, 3.6435821271034718`*^9, 3.643582187251892*^9, {
   3.643582244265581*^9, 3.6435822498656807`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BinaryStringFix", "[", "paddedBytes", "]"}]], "Input",
 CellChangeTimes->{{3.6435819301502047`*^9, 3.643581938412414*^9}}],

Cell[BoxData["\<\"I have an apple that thinks its a pear. And a bun that \
thinks it\[CloseCurlyQuote]s a cat. And a lettuce that thinks its a \
lettuce.\\\"\\n\\\"It\[CloseCurlyQuote]s a clever lettuce, \
then.\\\"\\n\\\"Hardly,\\\" she said with a delicate snort. \\\"Why would \
anything clever think it\[CloseCurlyQuote]s a lettuce?\\\"\\n\\\"Even if it \
is a lettuce?\\\" I asked.\\n\\\"Especially then,\\\" she said. \\\"Bad \
enough to be a lettuce. How awful to think you are a lettuce too.\\n\\n    \
--Patrick Rothfus, The Wise Man's Fear\"\>"], "Output",
 CellChangeTimes->{3.643581939097693*^9, 3.643581979772307*^9, 
  3.643582128878687*^9, 3.643582188208517*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"BinaryStringFix", "[", "paddedCharacters", "]"}], "==", 
  RowBox[{"BinaryStringFix", "[", "paddedBytes", "]"}]}]], "Input",
 CellChangeTimes->{{3.643582256263451*^9, 3.643582275577149*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.643582264132496*^9, 3.6435822762910643`*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Clone", "Subsection",
 CellChangeTimes->{{3.643579480355166*^9, 3.6435794809045343`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6435794836892433`*^9, 3.6435794844650087`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Clone"}]], "Input",
 CellChangeTimes->{{3.643579498655406*^9, 3.6435794995081873`*^9}}],

Cell[BoxData[
 StyleBox["\<\"Clone[immutable, edits...] yields an immutable object (created \
via a constructor defined by the DefineImmutable interface) identical to the \
given object immutable with the changes given by the sequence of edits. Each \
edit must take the form accessor -> value where accessor is the function name \
for a member assigned using an = form in the DefineImmutable function and \
value is the new value it should take.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643579500046315*^9},
 CellTags->"Info3643565099-3675405"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.6435794872167*^9, 3.643579488457232*^9}}],

Cell["\<\
Clone is used in tandem with DefineImmutable. Please see that section for a \
more complete explanation and examples.\
\>", "Text",
 CellChangeTimes->{{3.643579503018651*^9, 3.6435795185686417`*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["DefineImmutable", "Subsection",
 CellChangeTimes->{{3.643576052527686*^9, 3.643576054653646*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643576057037084*^9, 3.643576057957551*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "DefineImmutable"}]], "Input",
 CellChangeTimes->{{3.643576060465135*^9, 3.6435760631348133`*^9}}],

Cell[BoxData[
 StyleBox["\<\"DefineImmutable[constructor[args...] :> symbol, {members...}] \
defines an immutable data type with the given constructor and the accessor \
functions given by the list of members. Each member must be of the form \
(f[symbol] ** form) where f is the function that is used to access the data, \
the form yields the value and may refer to the arguments of the constructor \
or the other member functions, and ** must be either =, ->, :>, or :=, each \
of which is interpreted differently:\\n * any value assigned with a := will \
become a generic function whose value is calculated each time the function is \
called;\\n * any value assigned with a :> rule becomes a function that is \
memoized for each object once it has been calculated; note, however, that \
memoized values in an immutable object cannot be forgotted by the Forget[] \
function;\\n * any value assigned with a -> rule will be calculated and saved \
to the object when it is constructed;\\n * any value assigned with a = will \
also be assigned when the object is constructed, just as with the -> rule \
forms; however, values assigned with an = form may be modified in the Clone[] \
function.\\nIn addition, the functions assigned using the := form may have \
additional arguments, as long as the first argument is the \
symbol.\\nDefineImmutable[constructor[args...] :> symbol, Hold[members...]] \
is identical to DefineImmutable[constructor[args...] :> symbol, \
{members...}].\\nThe following options may be given:\\n * Symbol (default: \
Automatic) specifies the box form used to hold the type; if no box type is \
given, then a unique symbol is generated to encapsulate the type.\\n * \
SetSafe (default: True) specifies whether memoization performed on :> rule \
forms should be done using SetSafe (True) or Set (False).\\nSee also Clone.\"\
\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643576063650701*^9},
 CellTags->"Info3643561663-3675405"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.643576075454958*^9, 3.643576076772622*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " does not provide a direct way to create an immutable data structure, \
despite the fact that many built-in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions basically do this; for example, Image3D, BoundaryMeshRegion, and \
Graph all construct immutable objects. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s underlying data model is largely immutable itself, so \
immutable data structures are able to take full advantage of the immutable \
data-sharing paradigm. Although DefineImmutable does not implement everything \
that an immutable data-structure-focused language might, it does provide a \
core functionality with a fairly simple syntax several convenient features.\n\
\nKey among the features of DefineImmutable is the control it gives the user \
over how pieces of the data structure may be updated by others and how \
downstream values may be recalculated based on these. Immutable data \
structures may be copied with edits using the Clone[] function. Implicit in \
the definition of the immutable data structure is the information about what \
values may be updated and what downstream values will need to be recalculated \
after such an update.\n\nAdditionally, all immutable data structures support \
lazy programming by automatically delaying the calculation of values defined \
with the :> notation.\n\nIn Neurotica itself, the CorticalMesh, CorticalMap, \
MRImage3D, MRImage, and FreeSurferSubject forms are all defined with the \
DefineImmutable function."
}], "Text",
 CellChangeTimes->{{3.643576131253892*^9, 3.643576279816951*^9}, {
  3.643576864114717*^9, 3.643576982192794*^9}, {3.643577177907091*^9, 
  3.643577257442453*^9}, {3.64357730917144*^9, 3.6435774692539177`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.643577347360093*^9, 3.643577348366804*^9}}],

Cell["\<\
Suppose we want to define a generic Report type for calculations that take a \
long time.\
\>", "Text",
 CellChangeTimes->{{3.643577350174285*^9, 3.643577353262085*^9}, {
  3.643577607775885*^9, 3.643577608168141*^9}, {3.6435779715431643`*^9, 
  3.643577993958082*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Generic", " ", "versions", " ", "of", " ", "these", " ", "functions", " ",
     "should", " ", "fail", " ", "on", " ", "anything", " ", "that", " ", 
    RowBox[{"isn", "'"}], "t", " ", "a", " ", "Report", " ", 
    RowBox[{"object", ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"ReportQ", "[", "_", "]"}], ":=", "False"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ReportFunction", "[", "_", "]"}], ":=", "$Failed"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ReportSubject", "[", "_", "]"}], ":=", "$Failed"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ReportInput", "[", "_", "]"}], ":=", "$Failed"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ReportResult", "[", "_", "]"}], ":=", "$Failed"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ReportText", "[", "_", "]"}], ":=", "$Failed"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Here", ",", " ", 
     RowBox[{
     "we", " ", "define", " ", "the", " ", "report", " ", "itself"}]}], " ", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DefineImmutable", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Report", "[", 
        RowBox[{"runFunction_", ",", "subject_String", ",", "argument_"}], 
        "]"}], "\[RuleDelayed]", "report"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"We", " ", 
          RowBox[{"don", "'"}], "t", " ", "want", " ", "the", " ", "user", 
          " ", "to", " ", "be", " ", "able", " ", "to", " ", "change", " ", 
          "the", " ", "function"}], ",", " ", 
         RowBox[{
         "so", " ", "we", " ", "use", " ", "a", " ", "rule", " ", 
          "definition"}], ",", " ", 
         RowBox[{
          RowBox[{"making", " ", "the", " ", "property", " ", "un"}], "-", 
          RowBox[{"updatable", " ", "but", " ", "accessible"}]}]}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"ReportFunction", "[", "report", "]"}], "\[Rule]", 
         "runFunction"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "The", " ", "ID", " ", "and", " ", "argument", " ", "we", " ", 
           "want", " ", "to", " ", "keep", " ", "updatable"}], ",", " ", 
          RowBox[{
          "so", " ", "we", " ", "use", " ", "an", " ", "assignment", " ", 
           "definition"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ReportSubject", "[", "report", "]"}], "=", "subject"}], ",",
         "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ReportInput", "[", "report", "]"}], "=", "argument"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
           RowBox[{
           "Here", " ", "is", " ", "where", " ", "we", " ", "actually", " ", 
            "calculate", " ", "the", " ", "result"}], ";", 
           RowBox[{"we", " ", 
            RowBox[{"don", "'"}], "t", " ", "want", " ", "to", " ", 
            "actually", " ", "calculate", " ", "anything", " ", "until", " ", 
            "requiested"}]}], ",", " ", "though", ",", " ", 
          RowBox[{
           RowBox[{"so", " ", "we", " ", "use", " ", "the"}], " ", 
           "\[RuleDelayed]", " ", 
           RowBox[{
            RowBox[{
            "assignment", " ", "to", " ", "make", " ", "an", " ", "un"}], "-", 
            RowBox[{"updatable", " ", "lazy", " ", "assignment"}]}]}]}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ReportResult", "[", "report", "]"}], "\[RuleDelayed]", 
         RowBox[{"With", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"f", "=", 
              RowBox[{"ReportFunction", "[", "report", "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"arg", "=", 
              RowBox[{"ReportInput", "[", "report", "]"}]}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"f", "[", "arg", "]"}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Report", " ", "Text", " ", "we", " ", "also", " ", "want", " ", 
          "to", " ", "make", " ", "lazily"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ReportText", "[", "report", "]"}], "\[RuleDelayed]", 
         RowBox[{"With", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"name", "=", 
              RowBox[{"ReportSubject", "[", "report", "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"result", "=", 
              RowBox[{"ReportResult", "[", "report", "]"}]}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
           "\"\<The result of query '\>\"", "<>", "name", "<>", 
            "\"\<' is \>\"", "<>", 
            RowBox[{"ToString", "[", "result", "]"}]}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Finally", ",", " ", 
          RowBox[{
          "we", " ", "basically", " ", "just", " ", "want", " ", "ReportQ", 
           " ", "to", " ", "be", " ", "a", " ", "simple", " ", "function", 
           " ", "that", " ", 
           RowBox[{"doesn", "'"}], "t", " ", "store", " ", "any", " ", 
           "data"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ReportQ", "[", "report", "]"}], ":=", "True"}]}], "}"}]}], 
     "]"}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.643577995327364*^9, 3.643578007031843*^9}, {
  3.643578060309988*^9, 3.643578213370702*^9}, {3.643578246355438*^9, 
  3.6435783046648483`*^9}, {3.643578336536119*^9, 3.6435784770451107`*^9}, {
  3.643578507188202*^9, 3.643578775014495*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"r", "=", 
   RowBox[{"Report", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Function", "[", "\[IndentingNewLine]", 
      RowBox[{"NIntegrate", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Sin", "[", 
           RowBox[{"t", "^", 
            RowBox[{"Abs", "[", "#", "]"}]}], "]"}], "^", "2"}], "*", 
         RowBox[{"Log", "[", 
          RowBox[{"t", "+", 
           RowBox[{"Abs", "[", "#", "]"}]}], "]"}], "*", 
         RowBox[{"Exp", "[", 
          RowBox[{"-", 
           RowBox[{"t", "^", 
            RowBox[{"Abs", "[", "#", "]"}]}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"t", ",", "0.1", " ", ",", "100.1"}], "}"}]}], "]"}], "]"}], 
     ",", "\[IndentingNewLine]", "\"\<Integral-Test\>\"", ",", 
     "\[IndentingNewLine]", "4"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6435787801130743`*^9, 3.643578796532243*^9}, {
  3.6435788377714367`*^9, 3.643579010057084*^9}, {3.6435790756754913`*^9, 
  3.643579076460404*^9}, {3.6435791189479094`*^9, 3.643579150492778*^9}, {
  3.643579186654335*^9, 3.643579244691243*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReportFunction", "[", "r", "]"}]], "Input",
 CellChangeTimes->{{3.643579035296026*^9, 3.643579037160886*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"NIntegrate", "[", 
   RowBox[{
    RowBox[{
     SuperscriptBox[
      RowBox[{"Sin", "[", 
       SuperscriptBox["t", 
        RowBox[{"Abs", "[", "#1", "]"}]], "]"}], "2"], " ", 
     RowBox[{"Log", "[", 
      RowBox[{"t", "+", 
       RowBox[{"Abs", "[", "#1", "]"}]}], "]"}], " ", 
     RowBox[{"Exp", "[", 
      RowBox[{"-", 
       SuperscriptBox["t", 
        RowBox[{"Abs", "[", "#1", "]"}]]}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0.1`", ",", "100.1`"}], "}"}]}], "]"}], 
  "&"}]], "Output",
 CellChangeTimes->{
  3.643579037532886*^9, 3.643579078835507*^9, {3.643579133331628*^9, 
   3.643579153849272*^9}, {3.643579200951941*^9, 3.64357921690655*^9}, {
   3.643579247712122*^9, 3.643579260581842*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReportInput", "[", "r", "]"}]], "Input",
 CellChangeTimes->{{3.643579038282694*^9, 3.6435790482322073`*^9}}],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{
  3.643579048776911*^9, 3.64357908024161*^9, {3.643579134404529*^9, 
   3.6435791549570713`*^9}, {3.643579201712714*^9, 3.643579217709482*^9}, {
   3.643579248692738*^9, 3.643579262820219*^9}}]
}, Open  ]],

Cell["\<\
Running this integral test the first time will take longer than the second \
time, when the data has been cached:\
\>", "Text",
 CellChangeTimes->{{3.6435790156050043`*^9, 3.6435790279011507`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"ReportText", "[", "r", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.643579030006188*^9, 3.643579055607675*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.069434`", 
   ",", "\<\"The result of query 'Integral-Test' is 0.155343\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.643579056633808*^9, 3.643579082317974*^9}, {
  3.643579136007039*^9, 3.643579156488428*^9}, {3.643579203465466*^9, 
  3.643579219379492*^9}, {3.643579250117361*^9, 3.64357926520897*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"ReportText", "[", "r", "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.000025`", 
   ",", "\<\"The result of query 'Integral-Test' is 0.155343\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.643579271180447*^9}]
}, Open  ]],

Cell["\<\
If we then update the query to have a different name, there is no need for \
the immutable to recalculate the result:\
\>", "Text",
 CellChangeTimes->{{3.643579279914028*^9, 3.6435792972939987`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"rDup", "=", 
   RowBox[{"Clone", "[", 
    RowBox[{"r", ",", 
     RowBox[{"ReportSubject", "\[Rule]", "\"\<Integral: arg=4\>\""}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.643579302145587*^9, 3.643579330782103*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"ReportText", "[", "rDup", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.643579333917255*^9, 3.6435793345430813`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.000026`", 
   ",", "\<\"The result of query 'Integral: arg=4' is 0.155343\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.643579335099739*^9, 3.64357934082592*^9}}]
}, Open  ]],

Cell["\<\
However, if we change the argument, we\[CloseCurlyQuote]ll have to \
recalculate the result:\
\>", "Text",
 CellChangeTimes->{{3.6435793554845753`*^9, 3.6435793730921717`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"rDup", "=", 
   RowBox[{"Clone", "[", 
    RowBox[{"r", ",", 
     RowBox[{"ReportInput", "\[Rule]", "5"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.643579302145587*^9, 3.643579330782103*^9}, {
  3.643579393113103*^9, 3.6435793956597757`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"ReportText", "[", "rDup", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.643579333917255*^9, 3.6435793345430813`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.082421`", 
   ",", "\<\"The result of query 'Integral-Test' is 0.139158\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.64357939995207*^9}]
}, Open  ]],

Cell["Non-updatable properties cannot be changed.", "Text",
 CellChangeTimes->{{3.6435794183701572`*^9, 3.64357942579497*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Clone", "[", 
  RowBox[{"r", ",", 
   RowBox[{"ReportText", "\[Rule]", "\"\<no report\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.643579428522517*^9, 3.6435794361158237`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Clone", "::", "badarg"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Bad argument given to Clone: \
\[NoBreak]\\!\\(\\\"unrecognized or unsettable rule: ReportText\\\"\\)\
\[NoBreak]\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.643579440386857*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Part", "::", "partw"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Part \[NoBreak]\\!\\(1\\)\[NoBreak] of \
\[NoBreak]\\!\\({}\\)\[NoBreak] does not exist. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/partw\\\", ButtonNote -> \
\\\"Part::partw\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.643579440450755*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Part", "::", "pkspec1"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"The expression \[NoBreak]\\!\\(\\(\\({}\\)\\) \
\[LeftDoubleBracket] \\(\\(1, 1\\)\\) \[RightDoubleBracket]\\)\[NoBreak] \
cannot be used as a part specification. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/Part\\\", ButtonNote -> \
\\\"Part::pkspec1\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.643579440545867*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ReplacePart", "::", "pkspec1"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"The expression \[NoBreak]\\!\\(\\(\\({\\(\\({1, 1}\\)\\), \
\\(\\({1, 2}\\)\\), \\(\\({1, 3}\\)\\), \\(\\({2, 1}\\)\\), \\(\\({2, \
2}\\)\\)}\\)\\) \[LeftDoubleBracket] \\(\\(\\(\\({}\\)\\) \
\[LeftDoubleBracket] \\(\\(1, 1\\)\\) \[RightDoubleBracket]\\)\\) \
\[RightDoubleBracket]\\)\[NoBreak] cannot be used as a part specification. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/ReplacePart\\\", ButtonNote -> \
\\\"ReplacePart::pkspec1\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.643579440644052*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"VertexOutComponent", "::", "inv"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"The argument \[NoBreak]\\!\\(Null\\)\[NoBreak] in \
\[NoBreak]\\!\\(\\*FrameBox[\\\"VertexOutComponent[Graph[<5>, <4>], Null, \
Infinity]\\\", Rule[BoxFrame, False], Rule[BoxMargins, False]]\\)\[NoBreak] \
is not a valid \[NoBreak]\\!\\(\\\"vertex\\\"\\)\[NoBreak]. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/VertexOutComponent\\\", \
ButtonNote -> \\\"VertexOutComponent::inv\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.64357944075032*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"First", "::", "nofirst"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\({}\\)\[NoBreak] has a length of zero and \
no first element. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/First\\\", ButtonNote -> \
\\\"First::nofirst\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.643579440843158*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"First", "::", "argx"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(First\\)\[NoBreak] called with \
\[NoBreak]\\!\\(0\\)\[NoBreak] arguments; 1 argument is expected. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/argx\\\", \
ButtonNote -> \\\"First::argx\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.643579440915915*^9}],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.6435794409217176`*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Forget", "Subsection",
 CellChangeTimes->{{3.643574100644801*^9, 3.643574101450688*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643574103746654*^9, 3.643574104586413*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Forget"}]], "Input",
 CellChangeTimes->{{3.643574105454564*^9, 3.643574106211981*^9}}],

Cell[BoxData[
 StyleBox["\<\"\\\"Forget[f] forces all memoized values associated with the \
symbol f to be forgotten.\\\\nForget[\\!\\(\\*SubscriptBox[\\(f\\), \
\\(1\\)]\\), \\!\\(\\*SubscriptBox[\\(f\\), \\(2\\)]\\), ...] forgets each of \
the symbols.\\\"\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643574106721321*^9},
 CellTags->"Info3643559706-7008490"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.64357411206666*^9, 3.64357411438608*^9}}],

Cell["\<\
Forget is used in conjunction with Memoize and MemoizeSafe. If you find that \
you need to clear the memoized values of a particular memoized function, \
usually so that they are forced to re-calculate themselves, you can do so by \
using Forget.\
\>", "Text",
 CellChangeTimes->{{3.643574116842278*^9, 3.6435741664655447`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.6435741699688177`*^9, 3.643574170881021*^9}}],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "$MyRandomID", "]"}]], "Input",
 CellChangeTimes->{{3.643574297819594*^9, 3.643574299225116*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Memoize", "[", 
   RowBox[{
    RowBox[{"$MyRandomID", "[", "digits_", "]"}], ":=", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"10", "^", "digits"}], "]"}], "-", "1"}]}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.6435741722220716`*^9, 3.643574181170568*^9}, {
  3.643574215370582*^9, 3.6435742335530577`*^9}, {3.6435742842508287`*^9, 
  3.643574285351819*^9}, {3.643574321561832*^9, 3.643574349694586*^9}, {
  3.643574419499976*^9, 3.643574421387464*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"$MyRandomID", "[", "k", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"k", ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "5"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", "3", "}"}]}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.643574237854034*^9, 3.643574248111886*^9}, {
  3.6435744269727097`*^9, 3.6435744622829447`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"135", "135", "135"},
     {"4962", "4962", "4962"},
     {"38427", "38427", "38427"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.643574248890745*^9, 3.643574259140541*^9}, 
   3.64357430336585*^9, {3.643574424217965*^9, 3.6435744288364677`*^9}, 
   3.643574462616864*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Forget", "[", "$MyRandomID", "]"}]], "Input",
 CellChangeTimes->{{3.643574252714973*^9, 3.643574256792688*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"$MyRandomID", "[", "k", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"k", ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "5"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", "3", "}"}]}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.6435743086054792`*^9, 3.643574311111257*^9}, {
   3.643574432452491*^9, 3.643574433165935*^9}, 3.643574472890633*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"476", "476", "476"},
     {"3508", "3508", "3508"},
     {"85677", "85677", "85677"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.643574311579054*^9, 3.64357443351052*^9, 
  3.643574474366837*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Indices", "Subsection",
 CellChangeTimes->{{3.643574517386334*^9, 3.643574518039877*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643574522848709*^9, 3.6435745245684023`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Indices"}]], "Input",
 CellChangeTimes->{{3.643574525467071*^9, 3.643574526376567*^9}}],

Cell[BoxData[
 StyleBox["\<\"Indices[list, patt] yields a list of the indices of elements \
that match patt in list; this is equivalent to Flatten[Position[list, patt, \
{1}, Heads->False]], but is considerably optimized.\"\>", "MSG"]], "Print", \
"PrintUsage",
 CellChangeTimes->{3.643574526802752*^9},
 CellTags->"Info3643560126-3324954"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.6435745351946373`*^9, 3.6435745363284893`*^9}}],

Cell[TextData[{
 "While ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " includes many ways to search a simple list for the indices of entries \
matching a pattern, it is not obvious how to quickly perform a simple search \
for the indices of elements matching a pattern in a simple list. The \
Indices[] function fills this hole; it has been constructed by comparing many \
possible ways to write the search and choosing the fastest, so it should \
perform well. "
}], "Text",
 CellChangeTimes->{{3.6435745413543053`*^9, 3.643574700925289*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.643574704444633*^9, 3.643574705787718*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"list", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"100", ",", 
     RowBox[{"{", "1000000", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.64357477873778*^9, 3.643574821729239*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Indices", "[", 
   RowBox[{
    RowBox[{"Range", "[", "100", "]"}], ",", 
    RowBox[{"_", "?", "PrimeQ"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.643574824440596*^9, 3.6435748611326437`*^9}, {
  3.643574897162137*^9, 3.643574914539237*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000161`", ",", 
   RowBox[{"{", 
    RowBox[{
    "2", ",", "3", ",", "5", ",", "7", ",", "11", ",", "13", ",", "17", ",", 
     "19", ",", "23", ",", "29", ",", "31", ",", "37", ",", "41", ",", "43", 
     ",", "47", ",", "53", ",", "59", ",", "61", ",", "67", ",", "71", ",", 
     "73", ",", "79", ",", "83", ",", "89", ",", "97"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.643574867172749*^9, 3.643574915178411*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"words", "=", 
   RowBox[{"StringSplit", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ExampleData", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Text\>\"", ",", "\"\<AeneidEnglish\>\""}], "}"}], "]"}], 
     ",", "\[IndentingNewLine]", "Whitespace"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.643574959252767*^9, 3.643574962106193*^9}, {
  3.643575002817534*^9, 3.643575003623343*^9}, {3.643575098413381*^9, 
  3.6435751197243557`*^9}, {3.643575164251419*^9, 3.643575193638681*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", "words"}]], "Input",
 CellChangeTimes->{{3.6435751957245502`*^9, 3.6435751973628397`*^9}}],

Cell[BoxData["106443"], "Output",
 CellChangeTimes->{3.6435751978137093`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"words", "[", 
  RowBox[{"[", 
   RowBox[{"1", ";;", "49"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.643575198599329*^9, 3.6435752208744593`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"BOOK\"\>", ",", "\<\"I\"\>", ",", "\<\"Arms,\"\>", 
   ",", "\<\"and\"\>", ",", "\<\"the\"\>", ",", "\<\"man\"\>", 
   ",", "\<\"I\"\>", ",", "\<\"sing,\"\>", ",", "\<\"who,\"\>", 
   ",", "\<\"forc'd\"\>", ",", "\<\"by\"\>", ",", "\<\"fate,\"\>", 
   ",", "\<\"And\"\>", ",", "\<\"haughty\"\>", ",", "\<\"Juno's\"\>", 
   ",", "\<\"unrelenting\"\>", ",", "\<\"hate,\"\>", ",", "\<\"Expell'd\"\>", 
   ",", "\<\"and\"\>", ",", "\<\"exil'd,\"\>", ",", "\<\"left\"\>", 
   ",", "\<\"the\"\>", ",", "\<\"Trojan\"\>", ",", "\<\"shore.\"\>", 
   ",", "\<\"Long\"\>", ",", "\<\"labors,\"\>", ",", "\<\"both\"\>", 
   ",", "\<\"by\"\>", ",", "\<\"sea\"\>", ",", "\<\"and\"\>", 
   ",", "\<\"land,\"\>", ",", "\<\"he\"\>", ",", "\<\"bore,\"\>", 
   ",", "\<\"And\"\>", ",", "\<\"in\"\>", ",", "\<\"the\"\>", 
   ",", "\<\"doubtful\"\>", ",", "\<\"war,\"\>", ",", "\<\"before\"\>", 
   ",", "\<\"he\"\>", ",", "\<\"won\"\>", ",", "\<\"The\"\>", 
   ",", "\<\"Latian\"\>", ",", "\<\"realm,\"\>", ",", "\<\"and\"\>", 
   ",", "\<\"built\"\>", ",", "\<\"the\"\>", ",", "\<\"destin'd\"\>", 
   ",", "\<\"town;\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.643575202910879*^9, 3.643575221616953*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"idx", "=", 
    RowBox[{"Indices", "[", 
     RowBox[{"words", ",", 
      RowBox[{"s_", "/;", 
       RowBox[{"StringEndsQ", "[", 
        RowBox[{"s", ",", "\"\<;\>\""}], "]"}]}]}], "]"}]}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{"Length", "[", "idx", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6435752250494127`*^9, 3.643575290609209*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.815092`", ",", "2441"}], "}"}]], "Output",
 CellChangeTimes->{{3.6435752403592453`*^9, 3.6435752939969673`*^9}, 
   3.643575390258245*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"idx", "[", 
   RowBox[{"[", 
    RowBox[{"1", ";;", "10"}], "]"}], "]"}], "\[Rule]", 
  RowBox[{"words", "[", 
   RowBox[{"[", 
    RowBox[{"idx", "[", 
     RowBox[{"[", 
      RowBox[{"1", ";;", "10"}], "]"}], "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.643575296762784*^9, 3.643575305896874*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "49", ",", "86", ",", "94", ",", "110", ",", "153", ",", "156", ",", "171",
     ",", "187", ",", "231", ",", "257"}], "}"}], "\[Rule]", 
  RowBox[{"{", 
   RowBox[{"\<\"town;\"\>", ",", "\<\"relate;\"\>", ",", "\<\"hate;\"\>", 
    ",", "\<\"man;\"\>", ",", "\<\"sea;\"\>", ",", "\<\"colony;\"\>", 
    ",", "\<\"name;\"\>", ",", "\<\"chariot;\"\>", ",", "\<\"deface;\"\>", 
    ",", "\<\"fate;\"\>"}], "}"}]}]], "Output",
 CellChangeTimes->{{3.643575298790668*^9, 3.643575306339738*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Memoize", "Subsection",
 CellChangeTimes->{{3.643572376896226*^9, 3.643572377766018*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643572391887557*^9, 3.64357239391726*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Memoize"}]], "Input",
 CellChangeTimes->{{3.64357239473293*^9, 3.643572396093658*^9}}],

Cell[BoxData[
 StyleBox["\<\"Memoize[f := expr] constructs a version of the pattern f that \
will auto-memoize its values and remember them.\\nMemoize[\!\(\*SubscriptBox[\
\(f\),\(1\)]\) := \!\(\*SubscriptBox[\(expr\),\(1\)]\), \
\!\(\*SubscriptBox[\(f\),\(2\)]\) := \!\(\*SubscriptBox[\(expr\),\(2\)]\), \
...] memoizes each of the given functions.\\nThe function Forget may be used \
to forget the memoized values of functions defined within a Memoize \
form.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643572427011302*^9},
 CellTags->"Info3643558026-7008490"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.643572400854855*^9, 3.643572401957499*^9}}],

Cell["\<\
Memoize[] is a convenient function for saving the results of expressions \
immediantely so as not to have to recalculate them. Usually the MemoizeSafe \
function is preferred as it does not memoize the result if a message is raised.

The Memoize function works particularly well with the AutoCache function; \
together they can prevent a calculation from being run or loaded more than \
once and serve as an incredibly easy way to write code that lazily caches \
itself.\
\>", "Text",
 CellChangeTimes->{{3.643572409880496*^9, 3.643572424948884*^9}, {
  3.643572458165987*^9, 3.6435724937390747`*^9}, {3.6435725253621187`*^9, 
  3.643572620023947*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.6435724070130653`*^9, 3.643572407853572*^9}}],

Cell["Memoize is ideal for saving the result of long computations:", "Text",
 CellChangeTimes->{{3.6435725033724318`*^9, 3.6435725223621197`*^9}, {
  3.643572624719393*^9, 3.643572627639491*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleData", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<TestImage3D\>\"", ",", "\"\<CTengine\>\""}], "}"}], 
  "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.643570102738654*^9, 3.643570109278501*^9}, 
   3.64357035648687*^9},
 ImageSize->{315, 13},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
adzpsKtRp+IuR8fHxSYmJGCA/H4M6c4W8hdnCD8P+V+Intu6eKigPFonrP1W
TmjgfitAAxY+EACAQEHD19+PuPwJgPh3BQiXJCQwOMjf2+OE04GUg/Nasicw
KvQ6KnQQE2oMO2ond9yaRH+6gv5oGeqkPFtFf2zEuDe/o3Yq485sgAa6B3TA
+yt1Oyr1GJX6jAp9epkuvUy/vVinLU+rNV+n+Ybmu2StqtPrKqO2pJ06mng6
NP7syWuXLiRcu9qdEtInamrvChmu++x4d3W/VQzp4dgQfh7yz4ueq6BsO+I5
DeScrRPWfiunSaN7aARgaBw7fhwuHz+4/LoyhAQIaxLiF+Dv4+keYr+jxH9a
W6EWo8oAQIFwAZUIJBXwii+oU+7NQx5RSDxQHrKW/nw1MnK8WANfZ9yd3VE3
FX0joAZeq+D9hvCjgCGMqsn0Mj1gSGu+Vkue7ucsnXfJ2k9iZ1ZHbs4Od7l+
0j/xTFj8pQuJBEP+sCSEayHDdY9ML+ypvRZD+Az5Bwf8z8cKje4cGt+qgrK1
Tlj3t+LWCadJA6AB2QIBjUAMDQAFEOOorw9x+R477svBkC5JCLzFx80p3HFr
TahBe4lOR7UhkTboorWPuYEhQEqjhBxabYBuqvSRXxQykCdG9KerUCHzaj39
3VaEi4aZ6LvwzyEAgvKQch1GuS6jTIdeot1epNWWr9mSrfE5bcK7ZP1Hl+dU
nN2THu6VfCog8XxkT0aFfJOa+v0dGT5D+PGd0RNBg4cXlHP2Dtcpf1TrhBUa
nCYNVmgAEChoePsc8zp2DF69fVgB4ssGEHiLt4vjadvV1aGG7cVI3kRrvIpY
7zUGiA8ozTBA9MBfBHSgDEQPfRF3ZhE9ZtAfLkNVDFxQxeBU5PUG+jNjyEPQ
d8HPgSoGpy6VUAHpMtClTy/VoRdpthdqteZqNmdrfUjVen5l8t3zyyEJSY0K
S74Szbul+/sVMlz3yPSiq/utYgjfofpPja9Cg6ugwdVAzrnrpLt+K7tJows0
grpCwxcoAcTwPHoULq9j+GIFCDMJQQDx9Qmz2ljgof06VaetyQhlEShD0O1k
hR5JDHit1CFEDG2ik2KA3oDkUC3s5UB+sBoDRt00etNiRI/Hy0lX2Mt1yONx
fwFUN6iQuTWZ6MXoEf8VPcQcSEIgAynVphdrtxdoteVqtuTqfM7UfJus/yBm
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
9K82F2kMkKoPEr91RDjHRibK3wPSV0hi4QN2hQgMEMyQPzcJoQoZWDKYG7Cm
/o5NWN771L6qgn4rNDj7rezjd3jaQTl3q3FO4GGBhmMvMg0gxpbt27ds3wav
W3dsZwMIMwPZvctkvZHnYvWQuZKXFg/OXP5j/tYfC636lzsMrnUVrfaUqPYU
v3VMotZLstRZIstS7O6uQW2xUvTaaYgbAI37+FpIr53adv2Xt+HiD46K1brS
Kl0lsh1kEyxlrtkqxzvJxzsqXbFTjXVQuuKoGueoGmOrEGuvcsVRPtZaLsZG
OdpG6fx+mYsmUmf3yp02kT17QP6sqdTpPdJn98mc3St1fq9kjKVstKnU+X3S
ly1kISG5uF821kom5oDsFSv5+IOKV2zkYywVrzkqxTspJjgqJVpJpdhIJtkq
pjgqpDnLp9rKA74yDipku8lne6rc9FTLP6qc640qnQJPlWIflRIfxRJftfLj
qlU+CpX+SreCVevC1OrCVW4Hyd8JUbkXpvLgpNrjcIUXEYpvLyq1ZY5GDabG
OciLUtk5bKR2CtlgJSULfOSlPqNhBnNcc5Ue0/SFRVFsDX20nJ414q3HkLo9
QndOjXoeLlPtJ17pIZxkoX4qLAQ+V9FEwGfsMhGYIVyTkAQiuktCONsxPTxB
hrc3FfINeOzCaoIE/m/HDU5BoztbV9+2TrozaXA4u5h20K4ecs598Wxjuzqh
Yd8baGzetrXz2sYJkC5JyK6dJpuM7RdoHNUTil7wc8qyn3LW/lhi0q/YfnC5
07BKl+GVLmI3zEVydgg8dR/anq+JKhSABr6aFtMbfmtPHfEhgnb/mHi9u1iN
i2iJo2iGvUyMiUS0mfwVB/nLtgpRB5Qu2iiet1G+YK18zlz+orXSBRu5aAvZ
iwfkz5gpROyWPr1b6uQu2bCdMhH75U7ukQrfLnlqp8TJbZIR28UvmEhF7pSM
3CGBMLJf9sw+mQumUmf3SJ/bL3fZCv2Qc6Zyl60V4g4qxjkoxe6XSLCWirOW
v2qjkOSgAOyKt1FIdlBKPSSf7qGYflgl0105010pw0Uh87BytptSNhRTXqp5
nioFHoqFfoqFPiqlASNKQ1TL/RUhLak8rnwrQKXGR6H2uFJjoOLHMHF6mTbZ
S2pajIhRrcesUzqdb4z6aUQXeC3p6yB39+iyYES3o5E4+7JU6+NJyQfWQwoP
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
    "], {{0, 297}, {360, 0}}, {0,
     255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{360, 297},
  PlotRange->{{0, 360}, {0, 297}}]], "Output",
 CellChangeTimes->{3.643570360811248*^9},
 ImageSize->{364, 297},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Memoize", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"MemoizedBlurryEngine", "[", "rad_", "]"}], ":=", 
    RowBox[{"GaussianFilter", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ExampleData", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<TestImage3D\>\"", ",", "\"\<CTengine\>\""}], "}"}], 
       "]"}], ",", "\[IndentingNewLine]", "rad"}], "]"}]}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.6435703667636557`*^9, 3.643570366781206*^9}, {
  3.643570423039859*^9, 3.643570438650642*^9}, {3.643570492519144*^9, 
  3.643570493977759*^9}, {3.643570574288744*^9, 3.643570702906076*^9}, {
  3.643572718625091*^9, 3.6435727501579437`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"Timing", "[", 
   RowBox[{"a", "=", 
    RowBox[{"MemoizedBlurryEngine", "[", "10", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6435707061393642`*^9, 3.643570722140891*^9}, 
   3.643572763221451*^9}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
1zmzHS3NUg11vpsleLhR0Bau9WCDVqOr4JiZKHqsOHoCdwsbK95qIg4yokOM
6CgTOt6USjSlD00gLlprf2GrfcVG++/Ogh+XaLWEiNidOpyq5+g89NO+Plkr
dzQRafJ2VHgIih4UJi8vD6UPixARAr0ACxJkx8qEniOqPe/pfHEHDBqlFXTg
kxgfuY8ePYo5xHxmZmYmpSTHyRNUQIcHBm8F0Gs3cNKtAbTbtBnT7SwmJJu8
3ugmaAnSUiZTylRJayR110vru8mCi6bax8aJzkwSXrTRvmSrXWOhfXa89vEx
wgvm2t+7C5RyIbv3TfbgO5zF7+rN7unDJbfyj6DercHCWzO19k8UbTMi15i8
HxEViUaPhYd8iNKHRYgIgV7A78aD3TBueNDzntEXdPAGDY9DsIHZwfgghny3
QolW7ZbwQEeHhIetX79mw/IF6xe5eS+eu3TpooVLFgNol1mzHKzMXEd97Kf3
2k07wf21gvY4sj1J0hqj8zBUcn+j6OF6rfZwAZtDs0WvskWvsDskHYlaLQEq
7ocI2EId9kQ/9qIRW2PCxTDk8EPvsKXvIqe1RYluz9UqtRApRhMRevTCcUPC
IsJj4uNxPMiHaPdYhIgQKIBYkEgUsG8kczSIn3/6zY0Njc3K/970viADBv3o
0aOmpiYkMTQXJDE+ckMM9+zZA7KAOCBRbEJCZHR0wNaggEWfHnPrf2Pta7dC
el/17VMx/8/Z0wYFOBq7TDBcrf9WgpG40IS47Sp4uEn74RayeaP43lrx/Q1k
e7SQS9ewXd58j73PFaviV9kdOjBitrgPe/gv3Je+mshes2ZP9G+PFjX7aN3z
0vpxqdY3M7SOWIiyx5LykaTnJ8w8GyOstwhZFI4H+TAmPg7HhgiBpg+aQ8yR
03AiSB38CbY0NTQ0PaN8NcikAl0XD0V5w28z4c9rdHR0PHjwANbGJzFEGkRu
aCC6FSYNbpienq4COh4TuyVgc+Rs29qFfdsUvTvLB7BnhnWeHNRx5G+thW/d
2/bqjfV0nbv25VnaTYsFD9YJmn21f1gi+m4+2bRM1B6pzSELNea2Tf7IFvVm
86lOBW7izlydzl192P1vc1/6bCR705G9YQdG/zBfcMJceHC8aP84Uf4YYtto
MmEUGaVHrRimM9vWFFFha2hoSHg48mF4FA96DEAHteE4CJOwodbWVv4cG8rT
XHQFUv+SJ+Jdp3CRymt+yzl/LgP1E0LHJzGIHh+5UWEQa+F6ubm5qm0xHmiZ
v/+mBFfza8te6Sh8ndsEg9LWjGIvjuI2ui8YstUG7NnhnacGs1gDR95jC6jm
VVrfz+QqUutWAVv8Cgcx6nOWUBklaA8TtMdqKZNEHZnizh2vdpb8iS3vz1aN
YC+bsdelQLwjTnDVXGvjCHHQSDrAgA4zpGNHUTHGVIge5TOMmW49DuF/c2AA
REYFeghojqyI44TXIEZCl7B0f3pxRFngoptW+wS0K4M9ihtecvXGslcnMSQZ
PnLz3QqWh6gDPYQqqq5oyDZtWJc506RhJdO59y1uH+wLU/aLsT+5XRrLXeC4
NJr93IR7wrG/dmaLlQnarIJi977O7uvL7mA6tgnhy62BAqDfFqvdvo3syOnV
CUafGMC95EtT9utJnIafHPBos6BkjCjYmI4dR8nG0bKxdNRYKtyYChxBrRsm
cbIyQ/jfsGnTRn9/5EOAviUoCByHkiOkHTx4EKkSweOx820qlwWXN3afh0qZ
b3nTbzLjz2OwLAuD5pNYfX09H7n5yxkgBfoLuoxqWyxJdUVDtnHNqsLpw370
p9ijH3CAAo4rEzh8IbmVutzWFvz33DDur+B4F831Oe6f1uUuacGId73WkUkr
5aLWGO2WGGFrvKhtG6nMYjp3v8Ee/Sv3nJMfc2aN1+L9Tw9WxmkhqPuNpENM
qRgbOsqKDp9Ah5hQW/QpnyGMg80ktLzVa9euWb8OoK/ftAmIoxqgDOLIETNq
amoaGx+HtalSJvsfwxrKxm+V8EkMPZSP3OhW+/fvR2dRKBTItKr9T+7S1fp1
a/KnDPlxrYjz09rx7FUrts6C42DFwM683i1h5INNopYgUWcGycXmioHcHhdI
esGIQ7xqOFveD07dWdC7I0vSnk63p1DtaXR7hkSZ07uz+A1O7Y+8i3jWniju
yNDhNsar9NiyDyHyl621Vg0T++nR4eZUuCUdMpEOGEVvHEF76DL2dtae3l5e
q1Z6+/ioQF/jH7AFxh2fmAjfwYkgXuIEHzvxX4K1sr66NE0ukytK6n/Whnpz
eUGaTJZWWa+R/JVN3OXArlHd8M+vtDTUajxcp/n2yqZaBb5pWomGpbTUVVdq
jJqmX+I2SqXy7t27DQ0NSGJ85EZDQbdCpOF3S1TbYtxGNzIPDNFzptMlqc4j
PwH38RKQt3YcR2rcyZbc89b+xkW73ln79hyttlABt6WJ0nRWRXBYOf6sGMwe
/jNb1AcBTKlgQGSlQkeZ+0rHzj6d+xDGPuQE4cBb7VHC+2uFbWFC3Ofy2y6d
u8sFJSai5YPEK4ZJAseLt5qLA8bTm4xo3+G0+6DeDva2S5YvW+rhsXzFCoAO
gvsHBIRHRUKI0BqOHz8OpcI5PnbiPxtrZam/qUAgMHV3l+J/Ao8nmbzmaCn2
4J4n5V6kW1LfBUZztUygMWTVXWBXy0w1HnapUb95S40L911dVN9b1nWgzZW6
mu8i0C3/BT2Sa1jIYyA1whikm+9WfIlW7Zb8C+jgsNANfpsWOkw8aCa+6qp9
z1fUFifmsOMuQH/M5lH3Vgi+naH17TytR8FanTtfZ4+prlFCvdGRQW08B9l7
p06ngu7IEgNruHNHwSudRX25MFb2EUdhPA3Eh5Uni7idE0jHnj4P/bWvOWit
Gyr2Hiz20mc2TxT7m4k3jabXGNArPqEdBvZ1dHZyX7hwweJFi5YuWb7C03fd
Wlg2DhgxcseOHSgROLX79+//p1g3AySpopafasx8cPUzJb6xFBgEV+I5TTJd
ga5/ede71OBtZN2RqZGZ6gZXd3+b+gJ3DnqslIZivKG8RvXSltpgXwX/7Zur
gwUC/yecwDMH5uHWrVtXr15FHgOpkboLCwuRYFVAy9FYwRE0mi1Bgb7r1s2x
m7DLVHzSWXhuOtHgLnywiehIZdjdr3NleXdf6HDHgXc7y/qzpz/pUm/+8yel
73VmEo82CbAe7noL7m8QtIYKlOlER37vLo+GO3d9XsWo6zI31smhd1ojRI2u
gn1jRHMGMqt0gbVkg6l4rYl4tZHYezg9d4DEctDbk6dNdZs7Z477PPeFC0Bt
HCQOFbkiMTkZJwI/gjd1v5r5NKyrZf6PaXhz4z8Vt7FERclnYa3C1L1Oxeba
NBR1WdO/Hg+ua2qsr6vXLPfAWuBb0sg93Kihxy0FLgLd4Er+pXJTgan8sfWg
LHbHg7+4G8KvEb8xIcgwp0+fRpVGHlN9YIz7eAkP9ObAwI3+fitXr55pZ77d
hCmxEx1xIk86ExdmEdcXEne9RQ8DCKWcYote4z5yAEkHxAjn8HHAfeidtgi0
LcEXllrHTITlY4VXrLQaPtW668NVrc7CV9njH7Ln9Tk7QMnCDa+C4B99vz2W
uDNf67ilcJseOXUA4/qxxHO4xMtA4mUk8R4pXvYJLe3PWA15d+qM6W5z5+K2
YPFiaPia9euRw1GxsVZRFeFqaBbdr2aqsO6OWkua1OVp2Uwl5tLKZ8pmPTDQ
lfNP0eTyTzVcV1Hdtcx+ouGm/rVdb67CV8bjq8Jd9lOsVQpTUP+LuyHWPDr1
9evXL126hJmBhqNkwanBCx5rlNZNmzdjDj29vafZmScaMYW2RKEdddCeODGN
ODOTrHIlL84mrs0X/QjQA0nlNgnn5jDr04PZQ39qixTedhMcHS+M0KM8dCUr
hks2GIizjckr1lq3FwmU8QJu//MzQ/byePYrc+6Gpnaif0cS2bRE64xUuHMM
4TtI7PgB4zSQWazHeIxmVoxhPI3oBYPFdv0ZiyEfuMyaOXve3PmLFkLAfdb4
onlhcUKOECn37Nlz7tw5lOvun0jB5Jv6V2o+omys9tUVSB9nUNeoK/bltPTZ
Aq7ailFj3aKp2y2N1V3Rq5kzdPV6qK+pqePeU9lUzam2oo5/WBNrbvn8FOsG
7i1+sYD/Q9WsEVOx+JHN0KkRXEEHxO+kFGAdD+MLCuGxXrfM02OK1dgEIybX
jsi2o3bakgecyaNdFx/Jyk+JKlfi4hyO6T94EQ/8qUfB9P2Nor/P0So3FyYZ
koEj6EBDOtyM3jxOvNJQEqBPfzlJ6/4aVcyDbsPZuf3Sj1HKlCniuyu0PrMX
FpoRqYake3/JxHd15g9hFhkxnmMZjzHMMkPxvMFix/7MhKF/m+nmOm/BgqUe
yyE7KFyBwVsjo2Uw67y8PIRMiFX3cq2eQ4F7mjrlKpvr5O66psGl3djSXOLP
5TJFTTegmxsqyytrG/9FdRWXPepV91W4y7ovDpXVenQjpVIhVeu2JpdbVBqu
KdfN3R7peoeG2pqa6pr6p6dz6BvK9c2bN2tra8EC1Ordu3ejmUIDYxN4rEPQ
WIH1kmXLpk8cmWgiznUgMh2oLClV6Ejum0wdmEIenEoem0aUTycqXEie6Rdm
kzVzyPMziWNSUd4YImYkFTWSko2j4m2oOCsqdAK10kicZ0z8sFjQqeA+h9CR
2aslQvxgM31vDfndEuGFycK9E4jMsWS0HuXWj7H4UGf+CGbxKGbpGGapCbPI
QDJrsMT+I2bciEGz581bvGyZ16pVazdsgFOHRUaiWcODSkpKcDr19fWPHj16
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
mqub2lN+gLpnvGyjh9E949cd/wdU9yYx
    "], {{0, 68}, {164, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{164, 68},
  PlotRange->{{0, 164}, {0, 68}}]], "Output",
 CellChangeTimes->{3.643570730744239*^9, 3.6435727668606033`*^9},
 ImageSize->{168, 68},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"b", "=", 
   RowBox[{"MemoizedBlurryEngine", "[", "10", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6435707356241426`*^9, 3.643570735746853*^9}, 
   3.643572769140464*^9}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
Tn7Bv6tei+qa/a76E+r/AAVhbyI=
    "], {{0, 68}, {171, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{171, 68},
  PlotRange->{{0, 171}, {0, 68}}]], "Output",
 CellChangeTimes->{3.6435707367462463`*^9, 3.6435709178426867`*^9, 
  3.6435727700660877`*^9},
 ImageSize->{175, 68},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"a", "\[Equal]", "b"}], "&&", 
  RowBox[{"SameQ", "[", 
   RowBox[{"a", ",", "b"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6435727733532963`*^9, 3.643572781909037*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.6435727825263166`*^9}]
}, Open  ]],

Cell["\<\
To clear the memoized results, the Forget function may be used:\
\>", "Text",
 CellChangeTimes->{{3.643572918215994*^9, 3.643572926280113*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Forget", "[", "MemoizedBlurryEngine", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Timing", "[", 
  RowBox[{"a", "=", 
   RowBox[{"MemoizedBlurryEngine", "[", "10", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.643572932023972*^9, 3.6435729400326138`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztXQdcU+feDiRnJAdta2172957297WuqkDQUBUFEX2dlIFB24FQREVFRSQ
TZgBWQJhi+DChQoqooKDWkeLirX0WrRUcTAC5/uek0NTqtja+/VW68f/l2oM
SUje5zzrPYF+NHu5rYu6QCBwp/GHrbOn4YoVzl52IvxjnJfHvNlCXDHCfxn4
j7v+P93TPd3zfNPW1tba2sqy7It+Id3z352WlpYff/zxhx9+uH///sOHD5ub
mxUKRTfur940NTUB5Vu3bt28efPbb7/997//fefOnYaGhsbGxkePHgF3UP5F
v8bu+QMGaAJZoHzp0qUvvvji8uXLX3311fXr13FLXV3d7du37969C8oD98eP
H4P+3bj/FQeoPXjw4Pvvv79x48aXX355+vTpkydP4s+zZ89euHABt1y5cqWm
pgZfBeW/++473BP0v3fvHh4F3GHu7e3tL/pNdM9vD5ACapDra9eugc4VFRWH
Dx8+cOBASUlJaWnp8ePHccuZM2cqK89UVVXiDlevXsU9a2trgTseVV9fz+MO
c4cFdOP+0g4sGHYMif76669B4fLy8kOHDu3cuXP79u1FRUW7d+/et2/fwYMH
t+fIi71mVS4zLFy/YN+eXefPn39C5Dube3eoewkH8gsLBj1B1XPnzp04cQKw
FhYWZmZmpqamZmRkZGdn5+XlJUdHnHEefM+TeLBOvXZKjzDPpceOHYPIg+yd
RR5HC0T+m2++ecLc+VDXjfuLGsgsqAf5BSVBz6qqKsC3f//+HTt2AOKEpMS4
hIT4xMStyUnSAJ/Tn/dp2qLO7nmb3fu2IlpQu7BHubtRUeCqwhz54cMlOEJO
nTpVWVmJowVkR67DkQNz50WeN3fgrjL37lD3Zw4sFTIL6vFJDDCVlZVBq6Hb
6enpgDg6LlYaHRUZE715w7rSGf0fB6izhz5gT2qyJwawpX3Ywx+x+95vy329
MVDy5fK+BzbM2ZEav39fMU92JDocORD5ixcv8iIPc1eJvMrcu3H/EwZyCmkF
3QAB4AA0R48e3bt3b35+flpaWnzi1qjY2DBpxJbgoE0ei3c7DfvenWbzNNjy
gWz1KPbiGPaCPlupxVZ8xpYPYo/1A+gtqUz9pjeven12wtt+t9R3Z24WQh3I
zic6iHx1dbVK5GHuKpHvbO7doe4PH1AJtALFsOyAAHAcOXJkz549MOVt27bJ
tgLoGADt67d5i7PV1wt7tcp7sEc/ZU8NZc+NZL8YzV4ax14ez12A++mh7ImB
7PH+7JF/sXveAc2bUzTuB792y/uD6tX6R31n75KF7MrP3l+892Dx3pJ9e4+X
HQXfO4u8ytx5ke9s7t24/1+GN2hQCcuLpYbGQm9BQCTt3NzclNQU2daEyJiY
0AgOaB9Hs+tzNdpzGE60zwznYD01RHkZyp4exjF679ut0WRzKMnmidmjn3TI
+5GPQfP2nW+3be/VkvH6w7jXfwh66+6Wv92LeKsxuvfd4PdqvEec9ptdGu1z
JEV6ZNf2qspKlcg/Ye7doe4/HiwXlo5PYtBSPnLz3QpJOzklBUlMCXR4QFDQ
Ks+VvsaDvpkmfLRZvV2uwTl1hSZbpc2e1eHU+4wS6/3vtW8jFbHqbK6YLX6H
Pfh39tA/OR8Hx3HBQ/a9h+OBLf4bW/Ih9/DzupwUVGq1l/Zr2/ehIu+tBt9e
le4mO3PkT4v80+YOhX/RS/jXGOQfLBefxKCfENLjx4+jW6E+Z2VlJaUkxyXE
I4aFhAPoQJ/Nm1euWjnfRHf3ePEZB+HV2cI7rsKHmwlFgoTd1ZvDEdls37tt
6RotkeTjAOEjH+GD9cIH64QPvIWPNgmbI0Rt22h25xvcAYAL4N7/LvcoSD0Q
hzJAIuD1B//REqZ+c1oPqdcypIXOia5LkYekv+hV/AsMGKFKYqrIjW7Fl+jE
5OTY+Hhp9M9Ar9uwfpXX6lkzpi0f9Wn2aMlBU9ExW2HFVNE1J+H9lcKmYPLx
FvLeKtG1BcRFF/L8HOKsM1HpTFQ5EWedRNXOostzRTcXCu+4Ce97csfAI39R
ayzJ7u7NOTunCcO5K3vfaQlVvztXbb+xRoD7ouLiYigMYgNeWOdEh9rOJ3kQ
vNu7f32wPvA7PomBI+ALuFNaWopuhRItl8vRnWPjZehWIeFh/oEqoL1c3d0X
Ll48ffo0h0mjl+t8EDxMnKhLfmshaFgkuO+hdmee+mkH0T57qngKtduBKrSl
Cq2pQitylxVZbEscciCOTCPLppMnHImKmcTZWaLaeRzobRk9OHaD18A6r8c9
N8FpU2HSmF5BG7wKCgr4DTqAzm/Mgumob+Xl5ajtgBsO/qLX8qUeGDQKLJIY
Ag/CDziCdcMaYj1RopW7JUkxMllEVFRwGA/0JhXQi5ctnbdg/qzZs53mzLYz
NUrW1fhuluDRBkFLqNrD9Wr1ToIjRqLIseLICdwlZKx4i4E4QI8O0qMjDOhY
QyrekD4wgbhgrv6lpfpVC/V/Owh+XKLWFCRit2twqp6l8chH/cZktezRRLjB
exGhQSh6UJicnByUPhyEiBDoBTggQXYcmdBzRLUXvZwv78CgUVpBBz6J8ZH7
8OHDWEOsZ3p6ekJSYowsTgl0qH/gFgC9dj0n3Z2Adp42Y7q1yYREgzfrnQVN
AWqKREqRLGkOp+65q303WXDBUP3IONGpScILFuoXLdWrTdRPj1c/OkZ43lj9
exeBQiZkd7/D7n+fs/gdPdldvbjkVvYp1Ls5UHh7ptreiaKteuQag4/CIsLR
6HHgIR+i9OEgRIRAL+B348FuGDc86EWv6Es6vEHD4xBsYHYwPogh361QopW7
JTzQkUGhId7ea9YvX+C9yNlj8dylSxctXLIYQDvOmmVrZuQ0aoCP1hu3rAUP
1gpaY8jWBElzlMajYMmDDaJH3mqtoQI2i2YLX2cLX2PzJW3xak1+Su4HCdgC
DfZYX/aCHlttwMUw5PAD77MlHyCntUSI7sxVKzERyUcTYVr0wnFDQsJCo2Jj
8XqQD9HucRAiQqAA4oBEooB9I5mjQTz/22+sr6tvVPz3lvclGRj048ePGxoa
kMTQXJDE+MgNMdy1axfIAuKARNFxceGRkX5bAvwWfX7Eud/NtW/cDup5zatX
+fx/ZE4b5Gen7zhBd7X2u3F64gID4o6T4NFG9UebycYN4vtrxQ/Wk62RQi5d
w3Z58z3yEVesil5n8zVgxGxRL/bgP7kvfTWRvW7OHuvXGilq9FS7767241K1
b2aoHTIRZY4lZSNJt8+YeRZ6ON7CpBF4PciHUbExeG2IEGj6oDnEHDkNbwSp
g3+DTQ11dQ2/Ur7qpFYCTUdXeVndn7PgL2ra2toePnwIa+OTGCINIjc0EN0K
iwY3TE1NVQIdi4Xd7LcpfLbl5YW9W+Q928v6s6eGtR8f1Hbok+aCd+9vff2m
N13jon5llnrDYsHDdYJGL/Ufloi+m082LBO1hqtzyEKNuW2Tv7GFPdlcql2O
i7g9W6N9Ry9273vcl86NZG/ZsTetwegf5guOGQv3jxftHSfKHUNsHU3GjSIj
tKgVwzRmWxoiKmwJDg4KDUU+DI3gQY8C6KA2HAdhEjbU3NzMv8e6shRHTYGV
b3GXeNfIHa1k1X/mmr+QQf2E0PFJDKLHR25UGMRauF52drZyW4wHWurruzHO
yfj6stfaCt7kNsGgtNWj2AujuI3u87pslQ57enj7icEsjoFDH7J5VOMqte9n
chWpeYuALXqNgxj1OUOoiBC0hghao9UUCaK2dHF7/uvtxX9ny/qxlSPYK0bs
DSsg3hYjuGastmGEOGAk7adDh+jS0aOoKH0qSIvyHMZMNx+H8L/J3w8iowQ9
CDRHVsTrhNcgRkKXcOj+8uSIIs9RM+VyF2hXBLoW1b3i6o3DXpXEkGT4yM13
K1geog70EKqoPKMh3bh+XfpMg7qVTPvud7l9sC8N2S/H/uJycSx3guPiaPYL
A+4OR/7VnilWxKmzcord/Sa7pzebz7RtFcKXm/0FQL8lWr11K9mW1aMdjD7W
n3vIJUP260mchh/v/3iToHiMKFCfjh5HScfR0rF0xFgqVJ/yH0GtGyaxNzNC
+F+/ceMGX1/kQ4C+OSAAHIeSI6Tt378fqRLB44n321AmDSyrf3odKqReZQ1/
yoq/iGFZFgbNJ7Ha2lo+cvOnM0AK9Bd0GeW2WILyjIZ0w5pVBdOH/ehLsYc/
5gAFHFcncPhCcis0ua0t+O+ZYdw/wfEOmmtz3D+pyZ3SghHveKMtnVbIRM1R
6k1RwuZYUctWUpHBtO98mz38L+4+xwdwZo3H4vlPDlbEqCGo+4ykgwypKAs6
wowOnUAHGVCbtSnPIYytxSS0vNVr167xXgfQvTduBOKoBiiDeOWIGdXV1fX1
T8LaUCGV/j/DGsrGb5XwSQw9lI/c6FZ79+5FZ5HL5ci0yv1P7tSV97o1uVOG
/LhWxPnp5fHsNTO2xoTjYPnA9pyeTSHkw42ipgBRexrJxebygdweF0h6Xo9D
vHI4W9YXTt2e17MtQ9KaSrcmUa0pdGuaRJHVs73obU7tD32AeNYaL25L0+A2
xiu12NI+EPkr5mqrhol9tOhQYyrUlA6aSPuNojeMoF01GRtrczcPd/dVKz08
PZWgr/H12wzjjo2Ph+/gjSBe4g0+8cZ/F9aKxvrqsqKiiudLaw2X81JkUpm8
uv6XHtFYWyyXSaWy4qrOz6OorS5R3r24plNRaKq7XKGaqpqfn0hRX1GEZ5Hl
lVz+vU6jUCju3btXV1eHJMZHbjQUdCtEGn63RLktxm10I/PAEN1m2l+00njs
I+A+XgLyXh7HkRpXMiX3PdS/cVSvdVC/M0etJVjAbWmiNJ1WEhxWjj/LB7MH
/8EW9kIAU8gZEFkh11Bkv9a2vVf7HoSxPpwg7Hu3NUL4YK2wJUSI61x+26Fx
b7mg2EC0fJB4xTCJ/3jxFmOx33h6ox7tNZx2GdTT1sZyyfJlS11dl69YAdBB
cF8/v9CIcAgRWsPRo0ehVHiPTwLy3Fg3VcsEytEMrPrtBW2scuTuauVoyP1V
rLL+xmoX7gaXQF/ubxd5R/yryePubuXiasV9BxdVgqiSGgp+Hsdq/nZFjZfy
hbi4Kr+Jb9lz48wNGhbyGEiNMAbp5rsVX6KVuyU/Ax0YErzeZ+NC24n7jcTX
nNTve4laYsQcdtwJ6AFsDnV/heDbGWrfzlN7HKjWvv1N9ojyHCXUGx0Z1MZ9
kL23a7TL6bYMMbCGO7flvdZe2JsLY6WfchTG3UB8WHmiiNs5gXTs6vXIV/26
rdq6oWKPwWJ3bWbTRLGvkXjjaHqNDr3iM9p2YG87B3uXhQsXLF60aOmS5Svc
vNathWXjBSNG5ufno0TgrT148OCJN/47eK1oqG9oKAvUfB6s68t8AV0VB02D
VFMg+AmOxiopbq9WIl8tA7BS/ps01VZXXFZebSjD3QMrOr53tdSwi2/XWAGI
i5WvurbIi/tGv2PPgBusw+3bt69du4Y8BlIjdRcUFCDBKoGWobGCI2g0mwP8
vdatm2M9YYeh+LiD8Mx0os5F+HAj0ZbMsDvf5Mryzt7Q4bZ9H7SX9mNPftah
3vznT0o+bE8nHm8U4Hi45yF4sF7QHCxQpBJtuT07PBru3PF5Fb2O09w4Tg68
3xwmqncS7BkjmjOQWaUJrCXrDcVrDcSr9cQew+m5/SWmg96bPG2q89w5c1zm
uSxcAGrjReKlIlfEJybijcCP4E1Pn818FtZVUt8u/brrxe/i4YYCw5Smnx4i
0OzAtLEqUCBwrVVeR61TYd35BYHJsupG1bcTeBXX19fW1NZ30uqm+rqOx9WX
+P4HWMOvEb+xIMgwJ0+eRJVGHlN+YIz7eAkP9CZ//w2+PitXr55pbbzNgCm2
Fh2yJ487EOdnETcWEvc8RI/8CIWMYgvf4D5yAEkHxAjn8HHAfeD9ljC0LcGX
pmpHDIRlY4VXzdTqPle758lVrfaC19mjfdiz2pwdoGThgkdB8A9/1BpN3J2v
dtRUuFWLnNqfcRogcRsucdeRuOtJPEaKl31GW/VjzIZ8MHXGdOe5c3FZsHgx
NHyNtzdyOCo2jlVURdgdmsXTZzOVWD8NalOKlWOXWFc9H9ZK/moWwXqbanwB
nqGsA40mpfxauQb6uuJvr+Lazt80z0sp4QKZCrpfaLih7+UnMFXUcM/ikvd7
z8fjmEenvnHjxsWLF7Ey0HCULDg1eMFjjdK6cdMmrKGbh8c0a+N4PabAkiiw
pvbbEMemEadmkpVO5IXZxPX5oh8Buj+p2Crh3BxmfXIwe+DvLeHCO86Cw+OF
YVqUq6ZkxXDJeh1xpj551VztziKBIlbA7X+e02WvjGe/MuYuaGrH+rUlkA1L
1E5ZCbePIbwGie0+ZuwHMou1GNfRzIoxjJsevWCw2LofYzLkY8dZM2fPmzt/
0UIIuOcaLzQvHJyQI0TKXbt2nTlzBuX66U+kABRD34pfrF99lZemwErWNaDP
iTUIJ3fV7ASTrOPAaVD6uKOXVMph7pjS+akUtVVl8kDOx1OqO+7eWFtdXcNd
VzRU4QuO8prO3yKFey6vrrYHfmPQrBFTcfAjm6FTI7iCDojfCUnAOhbGFxDE
Y71umZvrFLOxcXpMtjWRaU1ttyT3OZCHO04+khWfE5VOxIU5HNN/cCce+lKP
A+kHG0T/nqNWZixM0CX9R9D+unSoEb1pnHilrsRPm740Se3BGmXMg27D2bn9
0gEoZYok8b0VaudshAVGRLIu6dJPMvEDjflDmEV6jNtYxnUMs0xXPG+w2K4f
M2HoJzOdneYtWLDUdTlkB4XLP3BLeKQUZp2Tk4OQCbF6ulwrp6kIi+iSokpP
isYamYumYWBJl/n2GQZaV1FWcbn+SSVtbGhoaqzlqOlVwt9SWwwi+vJANpQB
7sCnw34KJD+w4smb/0cht+p0ewN3QCKW1XTxKhV1l6urq6prG56Z0KFvKNe3
bt26fPkyWIBavXPnTjRTaGB0HI91EBorsF6ybNn0iSPjDcTZtkS6LZVhRRXY
kXsmU/umkPunkkemEWXTiXJHkmf6+dlk9Rzy7EziiJUoZwwRNZKKGElJx1Gx
FlSMGRU8gVqpJ87RJ35YLGiXc59DaEvv0RQmfriJvr+G/G6J8Pxk4e4JRPpY
MlKLcu7LmPTRmD+CWTyKWTqGWWrALNKRzBossfmUGTdi0Ox58xYvW+a+atXa
9evh1CHh4WjW8KDi4mK8ndra2sePH3f1vhtSHDUdpcW/XHNFnqNjyZPZrLG+
ob7YS1MTBoqY9vM5kSZliBaoTPnnRzTV5XGQGKrsgNd2Za1qLPbVFGjycl2f
5+srL6luaGqqq8rT5FSZ529DRVFxVU19k0Lxi9v5MC8wLKqurb1c4uroVd2Z
2o0VvO4XP3vfDxUblQRCh25SWVmJkoIcnpWVhbYVHReHTv0T1t5Lli11NNJO
MKCzLYksGzLTmsy2pXLtqe0OVKEDuXsyCdAPcqCTpTPI444UyH50MrHHVJQ0
iowE1gZUjCkVbU5FmVFRJpT3aDpBh7w7T9ASrt4iJe57Cq/NIy7Mpc7PpU45
EiUWokxDImEU6a1Jz+orsRnCzNNhFgJlA2aBHjNXSzJtoMSqj4aZ8TjEb5gL
IpnP5s1BoSHwneSUFEgTOsXVq1cbGrreGUFYMuxKk5/OZnXFXp3qzy9EvkKq
BLuTb6oKmkDTtay2MxLQdpUFG8o7tLqpJNDqZ733KvrpO9d3tmurwGJeOBpV
T94xLp2xRgLhniTw14oYvIyvXV999dXZs2dLS0tRrrOzs+F3MTJgLd0S3IE1
NNxxkr5MX5w+iUg3JjJNiBwbIt+eyrOncuyofDuywJ4E6HumkPumUgenUQem
UXvtiFxjQqZPhutTUcZUjDkVbUpFTeKur9EXF+mJGhYjk6s99lW/M1utxIo4
OoM6PpM6PIUoMiUSx5DROuTCARLbPsyU4czckYzLKMZFn5mrw8wcKrHtyxgP
6zPL2cnVfYXnmjVKmw6KiIpCzEBhhBPx6v2szx09I5v97n2zJxO+oqm+vq7+
KVXvuHNDfV3dEzsseAT3cc36p069NTU2cLc3Pq8rlwVyWbCki27xi3n48CFq
F3rouXPnUEj37t2bm5ublAKsZfA+JdabYYUwREfL8fDrlElEvBG1zZDINiPy
7EhgnWtH5tiR+dx17p87HKiiKVTRZGq7DbltAhE9ilNvDmgzJdATqcgJpLu2
+OAoIXj9YI36PTe1r+zUMg3JHQ40jpBd9qR8IiEbRYZoUU79GNNPNZy0mTmg
sz4zR5dxGsFMGSSx7N/b1sEOh98qL86m/bZsgQTFJcQjaezbtw8CBfVWncd8
el65PdJGNLnn2V2Bo6F2oWLz2ylYK+5H7VJS0K+VWKNcB/j6+WFJZ9lbxOlp
ZJgTKdZUojElNyVybchcOyXWttyFhx5kz3GgsuypdGsqYSIZNZ6KNeOwhnSD
0VETyUgjctlwyXZd4qyD+iUn4QVH4WETkWwUlWlH75hC5ViTiUZkpC61aQg9
/VPGZFAPZx3GWY9x0mVm6TAzhkls+79uNmHM4mVLPTw5m0YlDAkPg+OkpqYi
bJw4ceJX1JufVw7r5x2+dvEVGwu1f//+/Pz8lFRgHY+iimWED4LdfgEBLtMn
x+j2zDIjsmxJuQWZZUXmAmI7igPapgNusBsmnudAZTvQabZUvCUVZ8FFMl69
Iyd2YL1kqCR7JFFmIyyfJjpmL9plJAoZSafYiOX2dIoFGWtIhmhTnoPFkz9h
zDU1ZmkzuMzUZhyHS+wH9TAbOWyOy7wVK1ciMUJzAkNCImOiETC2b9+ObPnF
F19AvX/9J7z+32Ld0tKC2gXRwyqdPHnywIEDWDRwBJKI2oWuCsQRyIPDwpbO
mRml2wt+LTcnM0wIhLQcxDMl1tk2SriViOcq2Q24MwE3sLOl462oODMqmuM1
GTWBjBxPLhwiSdch9lmKDjkQxdairLGEv4443kqcZEPLTKmI0VSAFrUAZv0x
Y6HJTB/OTBvOTB3K2Gu+YaU9cOr0aa7u7qvXcjaN6BgRFYmShTyJV/6b6s3P
s7Huet/slRmFQoHa9c0336BiV1RUHDx4sKCgYNu2bWBKfOJWII6QhnwrjY5a
7bokXP/tbcZEigWVbExlmiKecRoOs8aVznDnIa05ULmT6ezJdLo9nWpLJVqD
42ScGRnDqTq5dKgkUYfYYSEqsiPyzYkkA9JHWxxrKY6zomHowbqUz3DauZ/E
8kPGdABjP6Q3LnbD3rHWHWI32X7ZCrdVXl7rlTaNgxBek5aWhvpQXl6OhPnr
6s3PM7EOdMmrfZU/q4CwytcuVOzTp0+XlJQUFhYinqFlYw1h3OjaIA4k3c9n
4xbDf6UhhNtRqZZ0hjmlRJbiLp2A5miurGOgdh7gdqBB8Aw8hEOcTLAgZROB
LC3TJeVmBNw53ZSI1SXXjZBEWogjzekwI8pfh1o3lJ7Rl7H4gBnf9y3r0Vo2
RnrWFhMcpk5W2rTnug2cTUNqoDyIkTg40RZ59cah+5tvuaEssMvPKtQVuf7e
80d/ueFrFyLNmTNnUFhg2WheaKkQ85ycHIRb0BxLCnavtB+XOFqchYptS2XZ
UNnWHMrZ1px3yy2ITFi5KZFtAQQJjt1KuHOVl2w+rdlR22zJrZZUtCGVMI5E
zJNbkYnGpFSH8hohCbOQhJmJg8ZROBI8h9BT+zJWHzG6/f8J0eZPcCi3TWDT
3rxNw19QsvAKoUVVVVVQb3SK53m7MkPNZ/C3gdud1rSSFtd09dVXYbBEYAQE
ECsGGUcaB00OHTqETA5tBM2R1lC609LTgjf7eI7uk6JPyE2ILGsy04pKNyPB
9FQjNGIiQZeQaZP4M20c18g4Vbfj7Dvfnsyx5zJbjj2VaU+B48mWVJo5lWlN
AWtk9QgdynekJMRMEmxC+4+hvLVoN03xlL6M9ceMQd+/2U+dojxrudTNw2P1
2rUblTaNjgB/ycjIQElEzMCLf/ozCU9PTVEgtxMlK/sV8qPzPnev/esNX7tq
amquXLkCJUTRBsGxgKjbSLZgTXFx8a5du7if68mUey5buOSzXrEjyLTxRJoF
kWBGxY6nUZH8R9BLPpM4azKLhkh8h9MJekTmJCXBlVaea0vk2hF5StCBODie
ZUdl2yl72SQyYhQVNIYONeE+c7JJj/IcRi8eLJ7ej7H5FP26t5WNJbBWbpt4
rffhbTocKQJlAcdhWVnZxYsXcaw+z0/nAcemV9mQf3uam5vv3r2L5bp169aN
GzfAkUuXLqGCnT17Fg6OIlZaWsr/DiuQKCYudtXEoau1mNARVJoRkWFLJtmJ
oy0k4RPE4YZUmCHlb0i76UrctCSykSTghsJzBLcmsq0IIJ6nRJzbgYGwg+O2
1FZzKnoCJZ1AhU2kAsdyAu4xVLxwsPjzAdz+mFX/3jZ2NsvcXFeuVtl0aGRM
DFJEXl4exAcvEur99AcSuqfLQRtFy8ZyIcTW19fDu2/evHnt2jU4OML5hQsX
0GVU2g5VD/X3jjDv7zVCQ6ZDZJoTOQ6U3IFOtKXiLKkoUyrclAqbRK01ELsN
FyfoE9nmnJgDcQ5ua+56Lifs3OZqrlLSt9lSCajheOA4aosu5T2cXjGEw3rm
AIl9P8Zce6DznDkenqt+sungiKgoZEVER6gNXtVzqnf3dB6WZSGDKKf3798H
zW/fvo1wDsp8/fXXiOidtR2qnhAfGzDDyn9EzxRDItuWyHSgUKUT0I6tqWgL
SmrGkdRNWxIwlAb3c5QQK/VcibsyvWdbkTlWBAxdjohuQ8lMyQgD0k+LWjVU
7A5ea4pnDpTYD+w9eYrDipUrvdat3bgJNh0YJpWiZCEr7ty5Exbz/OrdPV0O
aA5VB83Ru+/cuQOao31fv379CW0vKizY6Ggbq98jYxIHWZYDneZAJ9lxOycx
ZlSEEbVZR7xgoCRlNJHDqTffwQm+kcGs0yypdBMSspBpQ6Zak/ETiVBtasVn
4pXDxR4dWPewMx7r5uHuuWaN0qYDQsLDo+O4koWCgG6IY69bvf+Q4WmO2Aaa
QyQR3urq6lTaDkKdP3++qCA/bJ5DwoTemWYwXxLFisvY1qTMhIoeTwXp0l5D
xEmjlTtsnQp4NneuhHPqFHMuxqOsbUPFHkWu0RTPG8as1abB6/mDmcmjNJe7
uUK6123YAJsOCoVNcyULjQAF4dSpUxCcbvX+Y4enOXrZvXv3QHNVhOO1vfTo
EVnw+qQpWhmWveXWTIaVONmcTphEyxC3RlNRelSyEbAmO/ZReXYjrVkRmRZE
himRakzgDjJ90m8oPWsY4ztKvE6bdhsinqP1z8WL5kO3N/j6wKa3BMOmI+MS
EtLT09EIkBwQJCA4LS0tL3p5Xs1RKBSgeWNjoyrC8doOYS/euSNF6pu62C5l
qlay7YdJpr2TjCUJxuTWSSSYiyau3F7j6naWDZVhQQJfxLY4bTJqBBmmRbkN
kczXYvwMJb5j6bUj6OXDey9ynro5IAD1CoxW2nREjEyGklVQUIAaCPWGwnSr
93972tvbwSae5p0j3NUrVyrKjxdlpyeH+2xdYJts98k2Ew25OQd0NkdqfkOV
zLThpDvWkPLRoucNZhYNY5aOYLxGSrYY0v5GtI++2Eu799LJlgGBgcFh/Cm2
4JBwbi8UJSs3Nxe9D1EBktL9qxL+zAHN+abGRziVtn958eKRg/sz4iKTF9un
2X2cYdYj24LKgmKbcZuomZZEmiUZN4GM0KP8RvbeNNnIz9nW38HQ30Jzs0nf
DebDPOdODQwOgjVDtJG6QyPCpdHRKFlyuXzPnj0o+7x6q37Mtnv+tOFpzje1
zhEO1APNt29LSt64bJujQYrNhwnGbyWP65k+kdpmQibAzce8uWmWnWwrLFj5
ay2jI8NCg8PCQ6NjY3FjbLzq/Fo0rqNkFRYWQr0RCPHkv+v3JHTPHz6/QvNj
R48UyFOTokOiXT9PsB+SaP53meXHYfMnpyQn8buv/JZ7Tk4Of3INvqw8o5rI
g56YnJyXl4dSj3bPq3f3LyF8GQYodKZ55wiH0H7ieFluahJAT4qNLNyex2/E
oSnzu687d+7csWMHf56FP7mWnMKBnpWVha9CvRECu9X7JZzOTU0V4fh6zv9v
X1R7MvxJFv7MGn86FaAjb4PLAD0jIwP/LC0t7Vbvl3xUGzKqpta5nl+5coXf
k6mqqjp16lR5eXlZWRl/Zo0/nVpUVATQcQyo1Lv71w++/NOZ5p0jnGrrVbXf
zp9kUZ1Zg6HjGODVu/v3x/6Fhqf5ExGOr+c1NTWq02qdtR1Mxy04KhAAXvTL
757/ZJ5oaqoIp9p6VWl7ZWUlDgOod/f/6OGvPqqm9nSE47W9W71fsVHR/OkI
163er+rwNFc1NUQ4eHq3er/CA5qrmtozfoC6e1616WZ09/yx878E/R+B
    "], {{0, 68}, {
    164, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{164, 68},
  PlotRange->{{0, 164}, {0, 68}}]], "Output",
 CellChangeTimes->{3.6435729423147507`*^9},
 ImageSize->{168, 68},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MemoizeSafe", "Subsection",
 CellChangeTimes->{{3.643572376896226*^9, 3.643572377766018*^9}, {
  3.6435728113488693`*^9, 3.643572811754694*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643572391887557*^9, 3.64357239391726*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MemoizeSafe"}]], "Input",
 CellChangeTimes->{{3.64357239473293*^9, 3.643572396093658*^9}, {
  3.64357281342817*^9, 3.643572813788069*^9}}],

Cell[BoxData[
 StyleBox["\<\"MemoizeSafe[f := expr, ...] is identical to calling Memoize \
except that it uses SetSafe instead of Set to memoize values, so of the \
evaluation of the expression fails or generates a message, the result is not \
memoized and $Failed is yielded.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643572816733914*^9},
 CellTags->"Info3643558416-7008490"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.643572400854855*^9, 3.643572401957499*^9}}],

Cell["\<\
Like the Memoize[] function, MemoizeSafe[] is a convenient function for \
saving the results of expressions immediantely so as not to have to \
recalculate them. Unlike Memoize[], however, the result is not memoized if a \
message is raised and instead $Failed is yielded.

The MemoizeSafe function works particularly well with the AutoCache function; \
together they can prevent a calculation from being run or loaded more than \
once and serve as an incredibly easy way to write code that lazily caches \
itself.\
\>", "Text",
 CellChangeTimes->{{3.643572409880496*^9, 3.643572424948884*^9}, {
  3.643572458165987*^9, 3.6435724937390747`*^9}, {3.6435725253621187`*^9, 
  3.643572620023947*^9}, {3.643572819653141*^9, 3.643572894937396*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.6435724070130653`*^9, 3.643572407853572*^9}}],

Cell["\<\
MemoizeSafe is ideal for saving the result of long computations that may \
produce errors:\
\>", "Text",
 CellChangeTimes->{{3.6435725033724318`*^9, 3.6435725223621197`*^9}, {
  3.643572624719393*^9, 3.643572627639491*^9}, {3.643572899728745*^9, 
  3.643572904672469*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MemoizeSafe", "[", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "This", " ", "function", " ", "calculates", " ", "the", " ", "average", 
     " ", "size", " ", "of", " ", "the", " ", "files", " ", "in", " ", "the", 
     " ", "cache", " ", "directory"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"AverageCacheFileSize", "[", "]"}], ":=", 
    RowBox[{"With", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"files", "=", 
        RowBox[{"FileNames", "[", 
         RowBox[{"FileNameJoin", "[", 
          RowBox[{"{", 
           RowBox[{"$CacheDirectory", ",", "\"\<*.mx\>\""}], "}"}], "]"}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"N", "@", 
        RowBox[{"Total", "[", 
         RowBox[{"FileByteCount", "/@", "files"}], "]"}]}], "/", 
       RowBox[{"Length", "[", "files", "]"}]}]}], "]"}]}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.6435731700955133`*^9, 3.6435732350336237`*^9}, {
  3.6435732940319643`*^9, 3.643573386605873*^9}, {3.6435734194128637`*^9, 
  3.64357345922867*^9}, {3.6435736002433662`*^9, 3.643573600416897*^9}, {
  3.643573656960284*^9, 3.643573703090674*^9}}],

Cell["\<\
If we call this when the cache directory is set to a file instead of a \
directory, or to a directory that has no *.mx files, this would cause an \
error to be saved in the cached value, but because we used MemoizeSafe, it \
instead returns $Failed and does not memoize the result:\
\>", "Text",
 CellChangeTimes->{{3.643573518088604*^9, 3.643573577207226*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"$CacheDirectory", "=", 
     RowBox[{"NotebookFileName", "[", "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"AverageCacheFileSize", "[", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.643573395630548*^9, 3.643573398732045*^9}, {
  3.6435734790918007`*^9, 3.643573515378508*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Power", "::", "infy"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Infinite expression \[NoBreak]\\!\\(1\\/0\\)\[NoBreak] \
encountered. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/infy\\\", ButtonNote -> \
\\\"Power::infy\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{
  3.6435735784755507`*^9, 3.6435736105809097`*^9, {3.643573675312696*^9, 
   3.643573709557302*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Infinity", "::", "indet"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Indeterminate expression \[NoBreak]\\!\\(0.`\\\\ \
ComplexInfinity\\)\[NoBreak] encountered. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/indet\\\", ButtonNote -> \
\\\"Infinity::indet\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{
  3.6435735784755507`*^9, 3.6435736105809097`*^9, {3.643573675312696*^9, 
   3.643573709613899*^9}}],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{
  3.643573578535574*^9, 3.643573610647039*^9, {3.643573675385901*^9, 
   3.643573709618729*^9}}]
}, Open  ]],

Cell["\<\
We can now evaluate it with the correct cache directory set and observe \
correct behavior:\
\>", "Text",
 CellChangeTimes->{{3.643573614766226*^9, 3.6435736323990192`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AverageCacheFileSize", "[", "]"}]], "Input",
 CellChangeTimes->{{3.643573582277562*^9, 3.643573585559166*^9}}],

Cell[BoxData["7.5141485`*^6"], "Output",
 CellChangeTimes->{
  3.643573586026325*^9, 3.643573634179646*^9, {3.6435736769103937`*^9, 
   3.643573712327404*^9}}]
}, Open  ]],

Cell["\<\
Forget[] can be used to forget the memoized values, as with Memoize[].\
\>", "Text",
 CellChangeTimes->{{3.643573724693569*^9, 3.6435737417714376`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"AverageCacheFileSize", "[", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "This", " ", "call", " ", "succeeds", " ", "despite", " ", "the", " ", 
      "wrong", " ", "cache", " ", "directory", " ", "because", " ", "the", 
      " ", "memoized", " ", "version", " ", "has", " ", "already", " ", 
      "been", " ", 
      RowBox[{"memoized", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"Block", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"$CacheDirectory", "=", 
        RowBox[{"NotebookFileName", "[", "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"AverageCacheFileSize", "[", "]"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "Here", " ", "it", " ", "fails", " ", "because", " ", "we", " ", 
      "forget", " ", "the", " ", "memoization", " ", "before", " ", 
      "recalculating", " ", "it", " ", "with", " ", "the", " ", "bad", " ", 
      "cache", " ", 
      RowBox[{"file", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"Block", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"$CacheDirectory", "=", 
        RowBox[{"NotebookFileName", "[", "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Forget", "[", "AverageCacheFileSize", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"AverageCacheFileSize", "[", "]"}]}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"AverageCacheFileSize", "[", "]"}]}], "}"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.6435737439613943`*^9, 3.643573910161215*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Power", "::", "infy"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Infinite expression \[NoBreak]\\!\\(1\\/0\\)\[NoBreak] \
encountered. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/infy\\\", ButtonNote -> \
\\\"Power::infy\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.643573841727783*^9, 3.643573913882568*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Infinity", "::", "indet"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Indeterminate expression \[NoBreak]\\!\\(0.`\\\\ \
ComplexInfinity\\)\[NoBreak] encountered. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/indet\\\", ButtonNote -> \
\\\"Infinity::indet\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.643573841727783*^9, 3.64357391395002*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "7.5141485`*^6", ",", "7.5141485`*^6", ",", "$Failed", ",", 
   "7.5141485`*^6"}], "}"}]], "Output",
 CellChangeTimes->{3.643573841790666*^9, 3.643573913956287*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["NormalizeRows", "Subsection",
 CellChangeTimes->{{3.643579558689629*^9, 3.643579560215363*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643579564390954*^9, 3.6435795652952433`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "NormalizeRows"}]], "Input",
 CellChangeTimes->{{3.6435795737745523`*^9, 3.6435795755046186`*^9}}],

Cell[BoxData[
 StyleBox["\<\"NormalizeRows[X] yields a transformation of the matrix X in \
which each row of X has been normalized; this is the equivalent of (Normalize \
/@ X) but is significantly optimized.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643579576388764*^9},
 CellTags->"Info3643565176-3675405"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.643579567898693*^9, 3.643579569719363*^9}}],

Cell["\<\
NormalizeRows[] can be used to efficiently normalize each of the row-vectors \
in a matrix.\
\>", "Text",
 CellChangeTimes->{{3.6435796060960693`*^9, 3.643579628485087*^9}, {
  3.643579936190577*^9, 3.6435799535018587`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.643579571239037*^9, 3.643579572135201*^9}}],

Cell["What would a shell, flattened to a sphere look like?", "Text",
 CellChangeTimes->{{3.643579657014398*^9, 3.643579681996394*^9}, {
  3.643579957525391*^9, 3.643579967157617*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"shell", "=", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Geometry3D\>\"", ",", "\"\<Seashell\>\""}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.643579792621098*^9, 3.643579800034371*^9}}],

Cell[BoxData[
 Graphics3DBox[
  {EdgeForm[None], GraphicsComplex3DBox[CompressedData["
1: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
+XmbNf7kuYis8ad/cd+NL7sgPhv+beT8/x5QQoE=
    "], Polygon3DBox[CompressedData["

1:eJw13FW0FWTbRmEJEbHolu7u7u7u7u7uRulW6VTpVOlU6VTpVOlU6dSfd3zX
f/COe+5nrqN5uMcaK3mLrjW6RHznnXemRHnnnUhvN8LbF/7+fw4b2e3dty8K
jsKF23tvX1QclQu399++aDgaF24fvH0f4g+5cPvo7fsYf8yF2ydvX3QcnQu3
GG9fTByTC7dYb19sHJsLtzhvX1wclwu3eG9ffByfC7cEb19CnJALt0RvX2Kc
mAu3T9++JDgJF1mnpDhsMrfQKTlOzkXRKQVOwUXVKSVOyUXTKRVOxX2oU2qc
mvtYpzQ4DRddp7Q4LRdTp3Q4HRdbp/Q4PRdXpww4Axdfp4w4I5dQp0w4E5dY
w8w4M5dMpyw4bFa30CkbzsYl1yk7zs6l0CkHzsGl1Cknzsml0ikXzsWl1ik3
zs2l0SkPzsOl1Skvzsul0ykfzsel1yk/zs9l0KkALsBl1KkgLshl0rAQLsRl
1akwDlvELXQqioty2XQqhotx2XUqjotzOXQqgUtwOXUqiUtyuXQqhUtxuXUq
jUtzeXQqg8tweXUqi8ty+XQqh8tx+XUqj8tzBXSqgCtwBTWsiCtyRXSqhMNW
dgudquAqXFGdquKqXDGdquFqXHGdquPqXAmdauAaXEmdauKaXCmdauFaXGmd
auPaXBmd6uA6XFmd6uK6XDmd6uF6XHmd6uP6XAUNG+AGXGWdGuKwjdxCp8a4
MVdFpya4CVdVp6a4KVdNp2a4GVddp+a4OVdDpxa4BVdTp5a4JVdLp1a4FVdb
p9a4NVdHpza4DVdXp7a4LVdPp3a4HVdfw/a4PddIpw44bEe30KkT7sQ11qkz
7sw10akL7sI11akr7so106kb7sY116k77s610KkH7sG11Kkn7sm10qkX7sW1
1qk37s210akP7sO11akv7su107Af7sd11Kk/DjvALXQaiAdynXQahAdxnXUa
jAdzXXQagodwXXUaiody3XQahodx3XUajodzPXQagUdwPXUaiUdyvXQahUdx
vXUajUdzfXT6DH/G9dXwc/w5N0CnMTjsWLfQaRwexw3UaTwezw3SaQKewA3W
aSKeyA3RaRKexA3VaTKezA3TaQqewg3XaSqeyo3QaRqexo3UaTqezo3SaQae
wY3W6Qv8BfeZhl/iL7mxOn2Fw850C51m4VncOJ1m49nceJ3m4DncBJ3m4rnc
RJ3m4XncJJ3m4/ncZJ0W4AXcFJ0W4oXcVJ0W4UXcNJ0W48XcdJ2W4CXcDJ2+
xl9zX2j4Df6Gm6nTtzjsUrfQaRlexs3SaTlezs3WaQVewc3RaSVeyc3VaRVe
xc3TaTVezc3XaQ1ewy3QaS1eyy3UaR1exy3SaT1ezy3WaQPewC3R6Tv8Hfe1
ht/j77mlOv2Aw250C5024U3cMp02483ccp224C3cCp224q3cSp224W3cKp22
4+3cap124B3cGp124p3cWp124V3cOp12493cep324D3cBp1+xD9y32n4E/6J
26jTzzjsXrfQaR/ex23SaT/ez23W6QA+wG3R6SA+yG3V6RA+xG3T6TA+zG3X
6Qg+wu3Q6Sg+yu3U6Rg+xu3S6Tg+zu3W6QQ+we3R6Rf8C/ejhr/iX7m9Ov2G
w550C51O4VPcPp1O49Pcfp3O4DPcAZ3O4rPcQZ3O4XPcIZ3O4/PcYZ0u4Avc
EZ0u4ovcUZ0u4UvcMZ0u48vccZ2u4CvcCZ1+x79zv2j4B/6DO6nTnzjsVbfQ
6Rq+xp3S6Tq+zp3W6Qa+wZ3R6Sa+yZ3V6Ra+xZ3T6Ta+zZ3X6Q6+w13Q6S6+
y13U6R6+x13S6T6+z13W6QF+wF3R6S/8F/e7hn/jv7mrOv2Dwz50C50e4Ufc
NZ0e48fcdZ2e4CfcDZ2e4qfcTZ2e4WfcLZ2e4+fcbZ1e4BfcHZ1e4pfcXZ1e
4VfcPZ1e49fcfZ3e4DfcA53+xf9yf2n4H/6Pe6hT+OfnQxshwv9uoVNEHDa4
RzpFwmGDe6xTZBw2uCc6vYvDBvdUpyg4bHDPdHoPhw3uuU5RcdjgXuj0Pg4b
3EudouGwwb3S6QMcNrjXOn2Iwwb3RqePcNjg/tXwYxz2I+1Cp09w2OhuoVMM
HIOLqFNMHJOLpFMsHIuLrFNsHJt7V6c4OA4XRae4OC73nk7xcDwuqk7xcXzu
fZ0S4ARcNJ0S4oTcBzolwom4D3VKjBNz4RYafoo/5aLrlASHTeoWOiXDybgY
OiXHybmYOqXAKbhYOqXEKbnYOqXCqbg4OqXGqbm4OqXBabh4OqXFabn4OqXD
6bgEOqXH6bmEOmXAGbhEOmXEGbnEGmbCmbikOmXGYbO4hU5ZcVYumU7ZcDYu
uU7ZcXYuhU45cA4upU45cU4ulU65cC4utU65cW4ujU55cB4urU55cV4unU75
cD4uvU75cX4ug04FcAEuo4YFcUEui06FcNjCbqFTEVyEy6pTUVyUy6ZTMVyM
y65TcVycy6FTCVyCy6lTSVySy6VTKVyKy61TaVyay6NTGVyGy6tTWVyWy6dT
OVyOy69TeVyeK6BhBVyBK6xTRRy2klvoVBlX5oroVAVX4YrqVBVX5YrpVA1X
44rrVB1X50roVAPX4ErqVBPX5ErpVAvX4krrVBvX5sroVAfX4crqVBfX5crp
VA/X48prWB/X5yrp1ACHbegWOjXCjbjKOjXGjbkqOjXBTbiqOjXFTblqOjXD
zbjqOjXHzbkaOrXALbiaOrXELblaOrXCrbjaOrXGrbk6OrXBbbi6OrXFbbl6
GrbD7biGOrXHYTu4hU4dcUeukU6dcCeusU6dcWeuiU5dcBeuqU5dcVeumU7d
cDeuuU7dcXeuhU49cA+upU49cU+ulU69cC+utU69cW+ujU59cB+urYZ9cV+u
g079cNj+bqHTADyA66jTQDyQ66TTIDyI66zTYDyY66LTEDyE66rTUDyU66bT
MDyM667TcDyc66HTCDyC66nTSDyS66XTKDyK663TaDya66PhZ/gzrr9On+Ow
Y9xCp7F4LDdAp3F4HDdQp/F4PDdIpwl4AjdYp4l4IjdEp0l4EjdUp8l4MjdM
pyl4Cjdcp6l4KjdCp2l4GjdSp+l4OjdKpxl4Bjdawy/wF9wYnb7EYb9yC51m
4pncWJ1m4VncOJ1m49nceJ3m4DncBJ3m4rncRJ3m4XncJJ3m4/ncZJ0W4AXc
FJ0W4oXcVJ0W4UXcNJ0W48XcdJ2W4CXcDA2/xl9zX+n0DQ77rVvotBQv5Wbq
tAwv42bptBwv52brtAKv4ObotBKv5ObqtAqv4ubptBqv5ubrtAav4RbotBav
5RbqtA6v4xbptB6v5xbrtAFv4JZo+B3+jvtWp+9x2B/cQqeNeCO3VKdNeBO3
TKfNeDO3XKcteAu3QqeteCu3UqdteBu3SqfteDu3WqcdeAe3RqedeCe3Vqdd
eBe3TqfdeDe3Xqc9eA+3QcMf8Y/cDzr9hMP+7BY67cV7uY067cP7uE067cf7
uc06HcAHuC06HcQHua06HcKHuG06HcaHue06HcFHuB06HcVHuZ06HcPHuF06
HcfHud06ncAnuD0a/oJ/4X7W6Vcc9je30OkkPsnt1ekUPsXt0+k0Ps3t1+kM
PsMd0OksPssd1OkcPscd0uk8Ps8d1ukCvsAd0ekivsgd1ekSvsQd0+kyvswd
1+kKvsKd0PB3/Dv3m05/4LB/uoVOV/FV7qRO1/A17pRO1/F17rRON/AN7oxO
N/FN7qxOt/At7pxOt/Ft7rxOd/Ad7oJOd/Fd7qJO9/A97pJO9/F97rJOD/AD
7oqGf+G/uD91+huH/cctdHqIH3JXdXqEH3HXdHqMH3PXdXqCn3A3dHqKn3I3
dXqGn3G3dHqOn3O3dXqBX3B3dHqJX3J3dXqFX3H3dHqNX3P3dXqD33APNPwX
/8v9o9N/OGz4Au3fOkXAYf9zC50iRvwfhw3ukU6RcNjgHusUGYcN7olO7+Kw
wT3VKQoOG9wznd7DYYN7rlNUHDa4Fzq9j8MG91KnaDhscK90+gCHDe61Th/i
sMG90fAjHDa4d3T6GIf9xC10io6jcxF0ioFj+ExEnWLimFwknWLhWFxknWLj
2Ny7OsXBcbgoOsXFcbn3dIqH43FRdYqP43Pv65QAJ+Ci6ZQQJ+Q+0CkRTsSF
W2iYGCfmPtHpUxw2iVvolBQn5aLrlAwn42LolBwn52LqlAKn4GLplBKn5GLr
lAqn4uLolBqn5uLqlAan4eLplBan5eLrlA6n4xLolB6n5xLqlAFn4BJpmBFn
5JLolAmHzewWOmXBWbikOmXFWblkOmXD2bjkOmXH2bkUOuXAObiUOuXEOblU
OuXCubjUOuXGubk0OuXBebi0OuXFebl0OuXD+bj0OuXH+bkMGhbABbjMOhXE
YQu5hU6FcWEui05FcBEuq05FcVEum07FcDEuu07FcXEuh04lcAkup04lcUku
l06lcCkut06lcWkuj05lcBkur05lcVkun07lcDkuv4blcXmukE4VcNiKbqFT
JVyJK6xTZVyZK6JTFVyFK6pTVVyVK6ZTNVyNK65TdVydK6FTDVyDK6lTTVyT
K6VTLVyLK61TbVybK6NTHVyHK6tTXVyXK6dhPVyPq6hTfRy2gVvo1BA35Crp
1Ag34irr1Bg35qro1AQ34arq1BQ35arp1Aw346rr1Bw352ro1AK34Grq1BK3
5Grp1Aq34mrr1Bq35uro1Aa34epq2Ba35Rro1A6Hbe8WOnXAHbiGOnXEHblG
OnXCnbjGOnXGnbkmOnXBXbimOnXFXblmOnXD3bjmOnXH3bkWOvXAPbiWOvXE
PblWOvXCvbjWOvXGvbk2GvbBfbj2OvXFYfu5hU79cX+ug04D8ACuo04D8UCu
k06D8CCus06D8WCui05D8BCuq05D8VCum07D8DCuu07D8XCuh04j8Aiup04j
8Uiul06j8Ciut4aj8Wiun06f4bCfu4VOY/AYrr9OY/FYboBO4/A4bqBO4/F4
bpBOE/AEbrBOE/FEbohOk/AkbqhOk/FkbphOU/AUbrhOU/FUboRO0/A0bqRO
0/F0bpSGM/AM7nOdvsBhv3QLnb7CX3FjdJqJZ3JjdZqFZ3HjdJqNZ3PjdZqD
53ATdJqL53ITdZqH53GTdJqP53OTdVqAF3BTdFqIF3JTdVqEF3HTdFqMF3PT
NVyCl3Bf6vQ1DvuNW+j0Lf6W+0qnpXgpN1OnZXgZN0un5Xg5N1unFXgFN0en
lXglN1enVXgVN0+n1Xg1N1+nNXgNt0CntXgtt1CndXgdt0in9Xg9t1jDDXgD
941O3+Gw37uFTj/gH7hvddqIN3JLddqEN3HLdNqMN3PLddqCt3ArdNqKt3Ir
ddqGt3GrdNqOt3OrddqBd3BrdNqJd3JrddqFd3HrdNqNd3PrNdyD93Df6/Qj
DvuTW+j0M/6Z+0GnvXgvt1GnfXgft0mn/Xg/t1mnA/gAt0Wng/ggt1WnQ/gQ
t02nw/gwt12nI/gIt0Ono/got1OnY/gYt0un4/g4t1vDE/gE95NOv+Cwv7qF
Tr/h37ifdTqJT3J7dTqFT3H7dDqNT3P7dTqDz3AHdDqLz3IHdTqHz3GHdDqP
z3OHdbqAL3BHdLqIL3JHdbqEL3HHdLqML3PHNbyCr3C/6vQ7DvuHW+j0J/6T
+02nq/gqd1Kna/gad0qn6/g6d1qnG/gGd0anm/gmd1anW/gWd06n2/g2d16n
O/gOd0Gnu/gud1Gne/ged0mn+/g+d1nDB/gB94dOf+Gwf7uFTv/gf7g/dXqI
H3JXdXqEH3HXdHqMH3PXdXqCn3A3dHqKn3I3dXqGn3G3dHqOn3O3dXqBX3B3
dHqJX3J3dXqFX3H3dHqNX3P3NXyD33B/6/QvDvufW+gUfkzgL/uvW+gUIdL/
OGxwD3WKiMMG90inSDhscI91iozDBvdEp3dx2OCe6hQFhw3umU7v4bDBPdcp
Kg4b3Aud3sdhg3upUzQcNrhXOn2Awwb3WsMPcdjg/tPwIxz2Y+1Cp09w2I+0
C52i4+g+E0GnGDgGF1GnmDgmF0mnWDgWF1mn2Dg2965OcXAcLopOcXFc7j2d
4uF4XFSd4uP43Ps6JcAJuGg6JcQJuXALDRPhRNzHOiXGYT91C52S4CTcJzol
xUm56Dolw8m4GDolx8m5mDqlwCm4WDqlxCm52Dqlwqm4ODqlxqm5uDqlwWm4
eDqlxWm5+Dqlw+m4BDqlx+m5hBpmwBm4T3XKiMNmcgudMuPMXBKdsuAsXFKd
suKsXDKdsuFsXHKdsuPsXAqdcuAcXEqdcuKcXCqdcuFcXGqdcuPcXBqd8uA8
XFqd8uK8XDqd8uF8XHoN8+P8XCadCuCwBd1Cp0K4EJdZp8K4MJdFpyK4CJdV
p6K4KJdNp2K4GJddp+K4OJdDpxK4BJdTp5K4JJdLp1K4FJdbp9K4NJdHpzK4
DJdXp7K4LJdPw3K4HFdQp/I4bAW30KkirsgV0qkSrsQV1qkyrswV0akKrsIV
1akqrsoV06karsYV16k6rs6V0KkGrsGV1KkmrsmV0qkWrsWV1qk2rs2V0akO
rsOV1bAurstV0KkeDlvfLXRqgBtwFXVqiBtylXRqhBtxlXVqjBtzVXRqgptw
VXVqipty1XRqhptx1XVqjptzNXRqgVtwNXVqiVtytXRqhVtxtXVqjVtzdTRs
g9tw9XVqi8O2cwud2uP2XAOdOuAOXEOdOuKOXCOdOuFOXGOdOuPOXBOduuAu
XFOduuKuXDOduuFuXHOduuPuXAudeuAeXEudeuKeXCudeuFeXGsNe+PeXDud
+uCwfd1Cp364H9dep/64P9dBpwF4ANdRp4F4INdJp0F4ENdZp8F4MNdFpyF4
CNdVp6F4KNdNp2F4GNddp+F4ONdDpxF4BNdTp5F4JNdLw1F4FNdXp9E47Gdu
odPn+HOun05j8Biuv05j8VhugE7j8DhuoE7j8XhukE4T8ARusE4T8URuiE6T
8CRuqE6T8WRumE5T8BRuuE5T8VRuhE7T8DRupIbT8XTu/wA5Okzc
     "]]]},
  Boxed->False]], "Output",
 CellChangeTimes->{{3.643579793003039*^9, 3.643579801600679*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"coords", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Geometry3D\>\"", ",", "\"\<Seashell\>\""}], "}"}], ",", 
     "\"\<VertexData\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"polys", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Geometry3D\>\"", ",", "\"\<Seashell\>\""}], "}"}], ",", 
     "\"\<PolygonData\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "@", "coords"}]}], "Input",
 CellChangeTimes->{{3.64357968610334*^9, 3.6435797327414207`*^9}, {
  3.643579771830415*^9, 3.6435797779110403`*^9}, {3.643579835242886*^9, 
  3.6435798713290653`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"915", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{{3.6435796933964767`*^9, 3.643579733088695*^9}, {
   3.6435797750654783`*^9, 3.643579778749566*^9}, 3.64357987221358*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"normalized", "=", 
    RowBox[{"NormalizeRows", "[", "coords", "]"}]}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{"Dimensions", "@", "norms"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.643579884320241*^9, 3.643579915327293*^9}, {
  3.64357998123799*^9, 3.6435799824391212`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000546`", ",", 
   RowBox[{"{", 
    RowBox[{"915", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.643579916296934*^9, 3.643579983945064*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Function", "[", "\[IndentingNewLine]", 
    RowBox[{"Graphics3D", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"GraphicsComplex", "[", 
       RowBox[{"#", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EdgeForm", "[", "None", "]"}], ",", 
          RowBox[{"Polygon", "[", "polys", "]"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Boxed", "\[Rule]", "False"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"coords", ",", "normalized"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.643579989440179*^9, 3.643580043487421*^9}, {
  3.643580090915813*^9, 3.6435801148355503`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
+XmbNf7kuYis8ad/cd+NL7sgPhv+beT8/x5QQoE=
     "], 
     {EdgeForm[None], Polygon3DBox[CompressedData["
1:eJw13FW0FWTbRmEJEbHolu7u7u7u7u7uRulW6VTpVOlU6VTpVOlU6dSfd3zX
f/COe+5nrqN5uMcaK3mLrjW6RHznnXemRHnnnUhvN8LbF/7+fw4b2e3dty8K
jsKF23tvX1QclQu399++aDgaF24fvH0f4g+5cPvo7fsYf8yF2ydvX3QcnQu3
GG9fTByTC7dYb19sHJsLtzhvX1wclwu3eG9ffByfC7cEb19CnJALt0RvX2Kc
mAu3T9++JDgJF1mnpDhsMrfQKTlOzkXRKQVOwUXVKSVOyUXTKRVOxX2oU2qc
mvtYpzQ4DRddp7Q4LRdTp3Q4HRdbp/Q4PRdXpww4Axdfp4w4I5dQp0w4E5dY
w8w4M5dMpyw4bFa30CkbzsYl1yk7zs6l0CkHzsGl1Cknzsml0ikXzsWl1ik3
zs2l0SkPzsOl1Skvzsul0ykfzsel1yk/zs9l0KkALsBl1KkgLshl0rAQLsRl
1akwDlvELXQqioty2XQqhotx2XUqjotzOXQqgUtwOXUqiUtyuXQqhUtxuXUq
jUtzeXQqg8tweXUqi8ty+XQqh8tx+XUqj8tzBXSqgCtwBTWsiCtyRXSqhMNW
dgudquAqXFGdquKqXDGdquFqXHGdquPqXAmdauAaXEmdauKaXCmdauFaXGmd
auPaXBmd6uA6XFmd6uK6XDmd6uF6XHmd6uP6XAUNG+AGXGWdGuKwjdxCp8a4
MVdFpya4CVdVp6a4KVdNp2a4GVddp+a4OVdDpxa4BVdTp5a4JVdLp1a4FVdb
p9a4NVdHpza4DVdXp7a4LVdPp3a4HVdfw/a4PddIpw44bEe30KkT7sQ11qkz
7sw10akL7sI11akr7so106kb7sY116k77s610KkH7sG11Kkn7sm10qkX7sW1
1qk37s210akP7sO11akv7su107Af7sd11Kk/DjvALXQaiAdynXQahAdxnXUa
jAdzXXQagodwXXUaiody3XQahodx3XUajodzPXQagUdwPXUaiUdyvXQahUdx
vXUajUdzfXT6DH/G9dXwc/w5N0CnMTjsWLfQaRwexw3UaTwezw3SaQKewA3W
aSKeyA3RaRKexA3VaTKezA3TaQqewg3XaSqeyo3QaRqexo3UaTqezo3SaQae
wY3W6Qv8BfeZhl/iL7mxOn2Fw850C51m4VncOJ1m49nceJ3m4DncBJ3m4rnc
RJ3m4XncJJ3m4/ncZJ0W4AXcFJ0W4oXcVJ0W4UXcNJ0W48XcdJ2W4CXcDJ2+
xl9zX2j4Df6Gm6nTtzjsUrfQaRlexs3SaTlezs3WaQVewc3RaSVeyc3VaRVe
xc3TaTVezc3XaQ1ewy3QaS1eyy3UaR1exy3SaT1ezy3WaQPewC3R6Tv8Hfe1
ht/j77mlOv2Aw250C5024U3cMp02483ccp224C3cCp224q3cSp224W3cKp22
4+3cap124B3cGp124p3cWp124V3cOp12493cep324D3cBp1+xD9y32n4E/6J
26jTzzjsXrfQaR/ex23SaT/ez23W6QA+wG3R6SA+yG3V6RA+xG3T6TA+zG3X
6Qg+wu3Q6Sg+yu3U6Rg+xu3S6Tg+zu3W6QQ+we3R6Rf8C/ejhr/iX7m9Ov2G
w550C51O4VPcPp1O49Pcfp3O4DPcAZ3O4rPcQZ3O4XPcIZ3O4/PcYZ0u4Avc
EZ0u4ovcUZ0u4UvcMZ0u48vccZ2u4CvcCZ1+x79zv2j4B/6DO6nTnzjsVbfQ
6Rq+xp3S6Tq+zp3W6Qa+wZ3R6Sa+yZ3V6Ra+xZ3T6Ta+zZ3X6Q6+w13Q6S6+
y13U6R6+x13S6T6+z13W6QF+wF3R6S/8F/e7hn/jv7mrOv2Dwz50C50e4Ufc
NZ0e48fcdZ2e4CfcDZ2e4qfcTZ2e4WfcLZ2e4+fcbZ1e4BfcHZ1e4pfcXZ1e
4VfcPZ1e49fcfZ3e4DfcA53+xf9yf2n4H/6Pe6hT+OfnQxshwv9uoVNEHDa4
RzpFwmGDe6xTZBw2uCc6vYvDBvdUpyg4bHDPdHoPhw3uuU5RcdjgXuj0Pg4b
3EudouGwwb3S6QMcNrjXOn2Iwwb3RqePcNjg/tXwYxz2I+1Cp09w2OhuoVMM
HIOLqFNMHJOLpFMsHIuLrFNsHJt7V6c4OA4XRae4OC73nk7xcDwuqk7xcXzu
fZ0S4ARcNJ0S4oTcBzolwom4D3VKjBNz4RYafoo/5aLrlASHTeoWOiXDybgY
OiXHybmYOqXAKbhYOqXEKbnYOqXCqbg4OqXGqbm4OqXBabh4OqXFabn4OqXD
6bgEOqXH6bmEOmXAGbhEOmXEGbnEGmbCmbikOmXGYbO4hU5ZcVYumU7ZcDYu
uU7ZcXYuhU45cA4upU45cU4ulU65cC4utU65cW4ujU55cB4urU55cV4unU75
cD4uvU75cX4ug04FcAEuo4YFcUEui06FcNjCbqFTEVyEy6pTUVyUy6ZTMVyM
y65TcVycy6FTCVyCy6lTSVySy6VTKVyKy61TaVyay6NTGVyGy6tTWVyWy6dT
OVyOy69TeVyeK6BhBVyBK6xTRRy2klvoVBlX5oroVAVX4YrqVBVX5YrpVA1X
44rrVB1X50roVAPX4ErqVBPX5ErpVAvX4krrVBvX5sroVAfX4crqVBfX5crp
VA/X48prWB/X5yrp1ACHbegWOjXCjbjKOjXGjbkqOjXBTbiqOjXFTblqOjXD
zbjqOjXHzbkaOrXALbiaOrXELblaOrXCrbjaOrXGrbk6OrXBbbi6OrXFbbl6
GrbD7biGOrXHYTu4hU4dcUeukU6dcCeusU6dcWeuiU5dcBeuqU5dcVeumU7d
cDeuuU7dcXeuhU49cA+upU49cU+ulU69cC+utU69cW+ujU59cB+urYZ9cV+u
g079cNj+bqHTADyA66jTQDyQ66TTIDyI66zTYDyY66LTEDyE66rTUDyU66bT
MDyM667TcDyc66HTCDyC66nTSDyS66XTKDyK663TaDya66PhZ/gzrr9On+Ow
Y9xCp7F4LDdAp3F4HDdQp/F4PDdIpwl4AjdYp4l4IjdEp0l4EjdUp8l4MjdM
pyl4Cjdcp6l4KjdCp2l4GjdSp+l4OjdKpxl4Bjdawy/wF9wYnb7EYb9yC51m
4pncWJ1m4VncOJ1m49nceJ3m4DncBJ3m4rncRJ3m4XncJJ3m4/ncZJ0W4AXc
FJ0W4oXcVJ0W4UXcNJ0W48XcdJ2W4CXcDA2/xl9zX+n0DQ77rVvotBQv5Wbq
tAwv42bptBwv52brtAKv4ObotBKv5ObqtAqv4ubptBqv5ubrtAav4RbotBav
5RbqtA6v4xbptB6v5xbrtAFv4JZo+B3+jvtWp+9x2B/cQqeNeCO3VKdNeBO3
TKfNeDO3XKcteAu3QqeteCu3UqdteBu3SqfteDu3WqcdeAe3RqedeCe3Vqdd
eBe3TqfdeDe3Xqc9eA+3QcMf8Y/cDzr9hMP+7BY67cV7uY067cP7uE067cf7
uc06HcAHuC06HcQHua06HcKHuG06HcaHue06HcFHuB06HcVHuZ06HcPHuF06
HcfHud06ncAnuD0a/oJ/4X7W6Vcc9je30OkkPsnt1ekUPsXt0+k0Ps3t1+kM
PsMd0OksPssd1OkcPscd0uk8Ps8d1ukCvsAd0ekivsgd1ekSvsQd0+kyvswd
1+kKvsKd0PB3/Dv3m05/4LB/uoVOV/FV7qRO1/A17pRO1/F17rRON/AN7oxO
N/FN7qxOt/At7pxOt/Ft7rxOd/Ad7oJOd/Fd7qJO9/A97pJO9/F97rJOD/AD
7oqGf+G/uD91+huH/cctdHqIH3JXdXqEH3HXdHqMH3PXdXqCn3A3dHqKn3I3
dXqGn3G3dHqOn3O3dXqBX3B3dHqJX3J3dXqFX3H3dHqNX3P3dXqD33APNPwX
/8v9o9N/OGz4Au3fOkXAYf9zC50iRvwfhw3ukU6RcNjgHusUGYcN7olO7+Kw
wT3VKQoOG9wznd7DYYN7rlNUHDa4Fzq9j8MG91KnaDhscK90+gCHDe61Th/i
sMG90fAjHDa4d3T6GIf9xC10io6jcxF0ioFj+ExEnWLimFwknWLhWFxknWLj
2Ny7OsXBcbgoOsXFcbn3dIqH43FRdYqP43Pv65QAJ+Ci6ZQQJ+Q+0CkRTsSF
W2iYGCfmPtHpUxw2iVvolBQn5aLrlAwn42LolBwn52LqlAKn4GLplBKn5GLr
lAqn4uLolBqn5uLqlAan4eLplBan5eLrlA6n4xLolB6n5xLqlAFn4BJpmBFn
5JLolAmHzewWOmXBWbikOmXFWblkOmXD2bjkOmXH2bkUOuXAObiUOuXEOblU
OuXCubjUOuXGubk0OuXBebi0OuXFebl0OuXD+bj0OuXH+bkMGhbABbjMOhXE
YQu5hU6FcWEui05FcBEuq05FcVEum07FcDEuu07FcXEuh04lcAkup04lcUku
l06lcCkut06lcWkuj05lcBkur05lcVkun07lcDkuv4blcXmukE4VcNiKbqFT
JVyJK6xTZVyZK6JTFVyFK6pTVVyVK6ZTNVyNK65TdVydK6FTDVyDK6lTTVyT
K6VTLVyLK61TbVybK6NTHVyHK6tTXVyXK6dhPVyPq6hTfRy2gVvo1BA35Crp
1Ag34irr1Bg35qro1AQ34arq1BQ35arp1Aw346rr1Bw352ro1AK34Grq1BK3
5Grp1Aq34mrr1Bq35uro1Aa34epq2Ba35Rro1A6Hbe8WOnXAHbiGOnXEHblG
OnXCnbjGOnXGnbkmOnXBXbimOnXFXblmOnXD3bjmOnXH3bkWOvXAPbiWOvXE
PblWOvXCvbjWOvXGvbk2GvbBfbj2OvXFYfu5hU79cX+ug04D8ACuo04D8UCu
k06D8CCus06D8WCui05D8BCuq05D8VCum07D8DCuu07D8XCuh04j8Aiup04j
8Uiul06j8Ciut4aj8Wiun06f4bCfu4VOY/AYrr9OY/FYboBO4/A4bqBO4/F4
bpBOE/AEbrBOE/FEbohOk/AkbqhOk/FkbphOU/AUbrhOU/FUboRO0/A0bqRO
0/F0bpSGM/AM7nOdvsBhv3QLnb7CX3FjdJqJZ3JjdZqFZ3HjdJqNZ3PjdZqD
53ATdJqL53ITdZqH53GTdJqP53OTdVqAF3BTdFqIF3JTdVqEF3HTdFqMF3PT
NVyCl3Bf6vQ1DvuNW+j0Lf6W+0qnpXgpN1OnZXgZN0un5Xg5N1unFXgFN0en
lXglN1enVXgVN0+n1Xg1N1+nNXgNt0CntXgtt1CndXgdt0in9Xg9t1jDDXgD
941O3+Gw37uFTj/gH7hvddqIN3JLddqEN3HLdNqMN3PLddqCt3ArdNqKt3Ir
ddqGt3GrdNqOt3OrddqBd3BrdNqJd3JrddqFd3HrdNqNd3PrNdyD93Df6/Qj
DvuTW+j0M/6Z+0GnvXgvt1GnfXgft0mn/Xg/t1mnA/gAt0Wng/ggt1WnQ/gQ
t02nw/gwt12nI/gIt0Ono/got1OnY/gYt0un4/g4t1vDE/gE95NOv+Cwv7qF
Tr/h37ifdTqJT3J7dTqFT3H7dDqNT3P7dTqDz3AHdDqLz3IHdTqHz3GHdDqP
z3OHdbqAL3BHdLqIL3JHdbqEL3HHdLqML3PHNbyCr3C/6vQ7DvuHW+j0J/6T
+02nq/gqd1Kna/gad0qn6/g6d1qnG/gGd0anm/gmd1anW/gWd06n2/g2d16n
O/gOd0Gnu/gud1Gne/ged0mn+/g+d1nDB/gB94dOf+Gwf7uFTv/gf7g/dXqI
H3JXdXqEH3HXdHqMH3PXdXqCn3A3dHqKn3I3dXqGn3G3dHqOn3O3dXqBX3B3
dHqJX3J3dXqFX3H3dHqNX3P3NXyD33B/6/QvDvufW+gUfkzgL/uvW+gUIdL/
OGxwD3WKiMMG90inSDhscI91iozDBvdEp3dx2OCe6hQFhw3umU7v4bDBPdcp
Kg4b3Aud3sdhg3upUzQcNrhXOn2Awwb3WsMPcdjg/tPwIxz2Y+1Cp09w2I+0
C52i4+g+E0GnGDgGF1GnmDgmF0mnWDgWF1mn2Dg2965OcXAcLopOcXFc7j2d
4uF4XFSd4uP43Ps6JcAJuGg6JcQJuXALDRPhRNzHOiXGYT91C52S4CTcJzol
xUm56Dolw8m4GDolx8m5mDqlwCm4WDqlxCm52Dqlwqm4ODqlxqm5uDqlwWm4
eDqlxWm5+Dqlw+m4BDqlx+m5hBpmwBm4T3XKiMNmcgudMuPMXBKdsuAsXFKd
suKsXDKdsuFsXHKdsuPsXAqdcuAcXEqdcuKcXCqdcuFcXGqdcuPcXBqd8uA8
XFqd8uK8XDqd8uF8XHoN8+P8XCadCuCwBd1Cp0K4EJdZp8K4MJdFpyK4CJdV
p6K4KJdNp2K4GJddp+K4OJdDpxK4BJdTp5K4JJdLp1K4FJdbp9K4NJdHpzK4
DJdXp7K4LJdPw3K4HFdQp/I4bAW30KkirsgV0qkSrsQV1qkyrswV0akKrsIV
1akqrsoV06karsYV16k6rs6V0KkGrsGV1KkmrsmV0qkWrsWV1qk2rs2V0akO
rsOV1bAurstV0KkeDlvfLXRqgBtwFXVqiBtylXRqhBtxlXVqjBtzVXRqgptw
VXVqipty1XRqhptx1XVqjptzNXRqgVtwNXVqiVtytXRqhVtxtXVqjVtzdTRs
g9tw9XVqi8O2cwud2uP2XAOdOuAOXEOdOuKOXCOdOuFOXGOdOuPOXBOduuAu
XFOduuKuXDOduuFuXHOduuPuXAudeuAeXEudeuKeXCudeuFeXGsNe+PeXDud
+uCwfd1Cp364H9dep/64P9dBpwF4ANdRp4F4INdJp0F4ENdZp8F4MNdFpyF4
CNdVp6F4KNdNp2F4GNddp+F4ONdDpxF4BNdTp5F4JNdLw1F4FNdXp9E47Gdu
odPn+HOun05j8Biuv05j8VhugE7j8DhuoE7j8XhukE4T8ARusE4T8URuiE6T
8CRuqE6T8WRumE5T8BRuuE5T8VRuhE7T8DRupIbT8XTu/wA5Okzc
       "]]}],
    Boxed->False], ",", 
   Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
6NEStQ8m9o3lW3xD/9u8Bw7Zh8Pc8pIDlx1V/zStlLmqCvjgKOensuEx1i6G
ysTqkbHbPOCn3OluSKq4mhYdl4CdFh915b1GUabvIsv9jilg1FXQ410rxfWJ
CmK2sAYrnGhsMpwpUF45aMxVUotKvrJnHN+2gJ7JJ/bITDJ4urzZeSWpHkuq
uI61VQ5BfoPASOz9aSj/5tAeEVGDh/j0dit3jYOnzCWRa2kT4LcwXjX4pAKZ
zMVord1JsOXGiMAFah48w1hp/SqmGIVdM/6EKszCZMzUzzFtao/yV2u48C0L
2xzZLn+5RoE63UK/DpE28Gi3J2+xjMDzqmtrPtQ83MrUH/JpXw3ILlFkOLY/
g42ZF35odhFgOrDh/arEV+i88ofugmg23DszapjrPQvyv78t995uw3+EE0uP
P51cJ/DziY86kTs8QcXh2Uua59ZwUZZPaImqc+/My5TSSyH4d3Mik0FGKPBk
B9pMUPNJVszR9p17ioE9Yijf4XoaZhwLDbdsI+Meby/GO59aYdjJOFGpsgpn
ZZMPHjkzjtESJTKnV0ah/2nYyFv3HjSSfMro6NWM3RUG9GzWJHBR0Z2VlRlG
k9MCI35U/3vgds0l/BUJ4i+ciXTyGcYJev7N3FuGYEGkpre1agJ0BJnEnz4f
RM9DwXP5D8eh4Jh/U86nUZCf5TJ8R/TgjdC32oeuUf353Vv6N0eHYLnx1mgv
QwdKzMfx6IjPwvoGpZ4Du7uBrl9Ifjy+CVsZHHJzqb765LbdfsE/TdBz83nt
k3PluF/iq/nqIwIm7px+LLylHBR5WApuRWRi7O+vLtpLBPTP+AZ8fXofE7Rq
Nl+viQGOa0p27PIzUP6SzVI5ltoX/h/hSZ3IyiWqzgPP9tTHHrHDt0elaqTE
3dGkbkFsiKqzIy2P69uKUCQtJrge0AuBl9W/Y+ejqa9vS9H4fiUVavZZybBp
FuE5kev1J7dS0LlDSq/dphLYN3J/3RjcgtFxQzYiehPYsaDVx3ilG3xv0HkW
sI9ilPjUndw77ahT9V1eYHIIwocsV0//nsLzB76lVTLUQN1FddEzZcOQ891K
P6mBhJuSrMaObxiA/LBrPbu2DsEbDZ3mNJlJXNloPeuTPwZOHQIdgQG9MLVj
T60mxxjKJx1dHxydgh2SNhnvwjrgy+vye5tDhrA8Lt4+bWEG1iT7jjqebYb2
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

     "], 
     {EdgeForm[None], Polygon3DBox[CompressedData["
1:eJw13FW0FWTbRmEJEbHolu7u7u7u7u7uRulW6VTpVOlU6VTpVOlU6dSfd3zX
f/COe+5nrqN5uMcaK3mLrjW6RHznnXemRHnnnUhvN8LbF/7+fw4b2e3dty8K
jsKF23tvX1QclQu399++aDgaF24fvH0f4g+5cPvo7fsYf8yF2ydvX3QcnQu3
GG9fTByTC7dYb19sHJsLtzhvX1wclwu3eG9ffByfC7cEb19CnJALt0RvX2Kc
mAu3T9++JDgJF1mnpDhsMrfQKTlOzkXRKQVOwUXVKSVOyUXTKRVOxX2oU2qc
mvtYpzQ4DRddp7Q4LRdTp3Q4HRdbp/Q4PRdXpww4Axdfp4w4I5dQp0w4E5dY
w8w4M5dMpyw4bFa30CkbzsYl1yk7zs6l0CkHzsGl1Cknzsml0ikXzsWl1ik3
zs2l0SkPzsOl1Skvzsul0ykfzsel1yk/zs9l0KkALsBl1KkgLshl0rAQLsRl
1akwDlvELXQqioty2XQqhotx2XUqjotzOXQqgUtwOXUqiUtyuXQqhUtxuXUq
jUtzeXQqg8tweXUqi8ty+XQqh8tx+XUqj8tzBXSqgCtwBTWsiCtyRXSqhMNW
dgudquAqXFGdquKqXDGdquFqXHGdquPqXAmdauAaXEmdauKaXCmdauFaXGmd
auPaXBmd6uA6XFmd6uK6XDmd6uF6XHmd6uP6XAUNG+AGXGWdGuKwjdxCp8a4
MVdFpya4CVdVp6a4KVdNp2a4GVddp+a4OVdDpxa4BVdTp5a4JVdLp1a4FVdb
p9a4NVdHpza4DVdXp7a4LVdPp3a4HVdfw/a4PddIpw44bEe30KkT7sQ11qkz
7sw10akL7sI11akr7so106kb7sY116k77s610KkH7sG11Kkn7sm10qkX7sW1
1qk37s210akP7sO11akv7su107Af7sd11Kk/DjvALXQaiAdynXQahAdxnXUa
jAdzXXQagodwXXUaiody3XQahodx3XUajodzPXQagUdwPXUaiUdyvXQahUdx
vXUajUdzfXT6DH/G9dXwc/w5N0CnMTjsWLfQaRwexw3UaTwezw3SaQKewA3W
aSKeyA3RaRKexA3VaTKezA3TaQqewg3XaSqeyo3QaRqexo3UaTqezo3SaQae
wY3W6Qv8BfeZhl/iL7mxOn2Fw850C51m4VncOJ1m49nceJ3m4DncBJ3m4rnc
RJ3m4XncJJ3m4/ncZJ0W4AXcFJ0W4oXcVJ0W4UXcNJ0W48XcdJ2W4CXcDJ2+
xl9zX2j4Df6Gm6nTtzjsUrfQaRlexs3SaTlezs3WaQVewc3RaSVeyc3VaRVe
xc3TaTVezc3XaQ1ewy3QaS1eyy3UaR1exy3SaT1ezy3WaQPewC3R6Tv8Hfe1
ht/j77mlOv2Aw250C5024U3cMp02483ccp224C3cCp224q3cSp224W3cKp22
4+3cap124B3cGp124p3cWp124V3cOp12493cep324D3cBp1+xD9y32n4E/6J
26jTzzjsXrfQaR/ex23SaT/ez23W6QA+wG3R6SA+yG3V6RA+xG3T6TA+zG3X
6Qg+wu3Q6Sg+yu3U6Rg+xu3S6Tg+zu3W6QQ+we3R6Rf8C/ejhr/iX7m9Ov2G
w550C51O4VPcPp1O49Pcfp3O4DPcAZ3O4rPcQZ3O4XPcIZ3O4/PcYZ0u4Avc
EZ0u4ovcUZ0u4UvcMZ0u48vccZ2u4CvcCZ1+x79zv2j4B/6DO6nTnzjsVbfQ
6Rq+xp3S6Tq+zp3W6Qa+wZ3R6Sa+yZ3V6Ra+xZ3T6Ta+zZ3X6Q6+w13Q6S6+
y13U6R6+x13S6T6+z13W6QF+wF3R6S/8F/e7hn/jv7mrOv2Dwz50C50e4Ufc
NZ0e48fcdZ2e4CfcDZ2e4qfcTZ2e4WfcLZ2e4+fcbZ1e4BfcHZ1e4pfcXZ1e
4VfcPZ1e49fcfZ3e4DfcA53+xf9yf2n4H/6Pe6hT+OfnQxshwv9uoVNEHDa4
RzpFwmGDe6xTZBw2uCc6vYvDBvdUpyg4bHDPdHoPhw3uuU5RcdjgXuj0Pg4b
3EudouGwwb3S6QMcNrjXOn2Iwwb3RqePcNjg/tXwYxz2I+1Cp09w2OhuoVMM
HIOLqFNMHJOLpFMsHIuLrFNsHJt7V6c4OA4XRae4OC73nk7xcDwuqk7xcXzu
fZ0S4ARcNJ0S4oTcBzolwom4D3VKjBNz4RYafoo/5aLrlASHTeoWOiXDybgY
OiXHybmYOqXAKbhYOqXEKbnYOqXCqbg4OqXGqbm4OqXBabh4OqXFabn4OqXD
6bgEOqXH6bmEOmXAGbhEOmXEGbnEGmbCmbikOmXGYbO4hU5ZcVYumU7ZcDYu
uU7ZcXYuhU45cA4upU45cU4ulU65cC4utU65cW4ujU55cB4urU55cV4unU75
cD4uvU75cX4ug04FcAEuo4YFcUEui06FcNjCbqFTEVyEy6pTUVyUy6ZTMVyM
y65TcVycy6FTCVyCy6lTSVySy6VTKVyKy61TaVyay6NTGVyGy6tTWVyWy6dT
OVyOy69TeVyeK6BhBVyBK6xTRRy2klvoVBlX5oroVAVX4YrqVBVX5YrpVA1X
44rrVB1X50roVAPX4ErqVBPX5ErpVAvX4krrVBvX5sroVAfX4crqVBfX5crp
VA/X48prWB/X5yrp1ACHbegWOjXCjbjKOjXGjbkqOjXBTbiqOjXFTblqOjXD
zbjqOjXHzbkaOrXALbiaOrXELblaOrXCrbjaOrXGrbk6OrXBbbi6OrXFbbl6
GrbD7biGOrXHYTu4hU4dcUeukU6dcCeusU6dcWeuiU5dcBeuqU5dcVeumU7d
cDeuuU7dcXeuhU49cA+upU49cU+ulU69cC+utU69cW+ujU59cB+urYZ9cV+u
g079cNj+bqHTADyA66jTQDyQ66TTIDyI66zTYDyY66LTEDyE66rTUDyU66bT
MDyM667TcDyc66HTCDyC66nTSDyS66XTKDyK663TaDya66PhZ/gzrr9On+Ow
Y9xCp7F4LDdAp3F4HDdQp/F4PDdIpwl4AjdYp4l4IjdEp0l4EjdUp8l4MjdM
pyl4Cjdcp6l4KjdCp2l4GjdSp+l4OjdKpxl4Bjdawy/wF9wYnb7EYb9yC51m
4pncWJ1m4VncOJ1m49nceJ3m4DncBJ3m4rncRJ3m4XncJJ3m4/ncZJ0W4AXc
FJ0W4oXcVJ0W4UXcNJ0W48XcdJ2W4CXcDA2/xl9zX+n0DQ77rVvotBQv5Wbq
tAwv42bptBwv52brtAKv4ObotBKv5ObqtAqv4ubptBqv5ubrtAav4RbotBav
5RbqtA6v4xbptB6v5xbrtAFv4JZo+B3+jvtWp+9x2B/cQqeNeCO3VKdNeBO3
TKfNeDO3XKcteAu3QqeteCu3UqdteBu3SqfteDu3WqcdeAe3RqedeCe3Vqdd
eBe3TqfdeDe3Xqc9eA+3QcMf8Y/cDzr9hMP+7BY67cV7uY067cP7uE067cf7
uc06HcAHuC06HcQHua06HcKHuG06HcaHue06HcFHuB06HcVHuZ06HcPHuF06
HcfHud06ncAnuD0a/oJ/4X7W6Vcc9je30OkkPsnt1ekUPsXt0+k0Ps3t1+kM
PsMd0OksPssd1OkcPscd0uk8Ps8d1ukCvsAd0ekivsgd1ekSvsQd0+kyvswd
1+kKvsKd0PB3/Dv3m05/4LB/uoVOV/FV7qRO1/A17pRO1/F17rRON/AN7oxO
N/FN7qxOt/At7pxOt/Ft7rxOd/Ad7oJOd/Fd7qJO9/A97pJO9/F97rJOD/AD
7oqGf+G/uD91+huH/cctdHqIH3JXdXqEH3HXdHqMH3PXdXqCn3A3dHqKn3I3
dXqGn3G3dHqOn3O3dXqBX3B3dHqJX3J3dXqFX3H3dHqNX3P3dXqD33APNPwX
/8v9o9N/OGz4Au3fOkXAYf9zC50iRvwfhw3ukU6RcNjgHusUGYcN7olO7+Kw
wT3VKQoOG9wznd7DYYN7rlNUHDa4Fzq9j8MG91KnaDhscK90+gCHDe61Th/i
sMG90fAjHDa4d3T6GIf9xC10io6jcxF0ioFj+ExEnWLimFwknWLhWFxknWLj
2Ny7OsXBcbgoOsXFcbn3dIqH43FRdYqP43Pv65QAJ+Ci6ZQQJ+Q+0CkRTsSF
W2iYGCfmPtHpUxw2iVvolBQn5aLrlAwn42LolBwn52LqlAKn4GLplBKn5GLr
lAqn4uLolBqn5uLqlAan4eLplBan5eLrlA6n4xLolB6n5xLqlAFn4BJpmBFn
5JLolAmHzewWOmXBWbikOmXFWblkOmXD2bjkOmXH2bkUOuXAObiUOuXEOblU
OuXCubjUOuXGubk0OuXBebi0OuXFebl0OuXD+bj0OuXH+bkMGhbABbjMOhXE
YQu5hU6FcWEui05FcBEuq05FcVEum07FcDEuu07FcXEuh04lcAkup04lcUku
l06lcCkut06lcWkuj05lcBkur05lcVkun07lcDkuv4blcXmukE4VcNiKbqFT
JVyJK6xTZVyZK6JTFVyFK6pTVVyVK6ZTNVyNK65TdVydK6FTDVyDK6lTTVyT
K6VTLVyLK61TbVybK6NTHVyHK6tTXVyXK6dhPVyPq6hTfRy2gVvo1BA35Crp
1Ag34irr1Bg35qro1AQ34arq1BQ35arp1Aw346rr1Bw352ro1AK34Grq1BK3
5Grp1Aq34mrr1Bq35uro1Aa34epq2Ba35Rro1A6Hbe8WOnXAHbiGOnXEHblG
OnXCnbjGOnXGnbkmOnXBXbimOnXFXblmOnXD3bjmOnXH3bkWOvXAPbiWOvXE
PblWOvXCvbjWOvXGvbk2GvbBfbj2OvXFYfu5hU79cX+ug04D8ACuo04D8UCu
k06D8CCus06D8WCui05D8BCuq05D8VCum07D8DCuu07D8XCuh04j8Aiup04j
8Uiul06j8Ciut4aj8Wiun06f4bCfu4VOY/AYrr9OY/FYboBO4/A4bqBO4/F4
bpBOE/AEbrBOE/FEbohOk/AkbqhOk/FkbphOU/AUbrhOU/FUboRO0/A0bqRO
0/F0bpSGM/AM7nOdvsBhv3QLnb7CX3FjdJqJZ3JjdZqFZ3HjdJqNZ3PjdZqD
53ATdJqL53ITdZqH53GTdJqP53OTdVqAF3BTdFqIF3JTdVqEF3HTdFqMF3PT
NVyCl3Bf6vQ1DvuNW+j0Lf6W+0qnpXgpN1OnZXgZN0un5Xg5N1unFXgFN0en
lXglN1enVXgVN0+n1Xg1N1+nNXgNt0CntXgtt1CndXgdt0in9Xg9t1jDDXgD
941O3+Gw37uFTj/gH7hvddqIN3JLddqEN3HLdNqMN3PLddqCt3ArdNqKt3Ir
ddqGt3GrdNqOt3OrddqBd3BrdNqJd3JrddqFd3HrdNqNd3PrNdyD93Df6/Qj
DvuTW+j0M/6Z+0GnvXgvt1GnfXgft0mn/Xg/t1mnA/gAt0Wng/ggt1WnQ/gQ
t02nw/gwt12nI/gIt0Ono/got1OnY/gYt0un4/g4t1vDE/gE95NOv+Cwv7qF
Tr/h37ifdTqJT3J7dTqFT3H7dDqNT3P7dTqDz3AHdDqLz3IHdTqHz3GHdDqP
z3OHdbqAL3BHdLqIL3JHdbqEL3HHdLqML3PHNbyCr3C/6vQ7DvuHW+j0J/6T
+02nq/gqd1Kna/gad0qn6/g6d1qnG/gGd0anm/gmd1anW/gWd06n2/g2d16n
O/gOd0Gnu/gud1Gne/ged0mn+/g+d1nDB/gB94dOf+Gwf7uFTv/gf7g/dXqI
H3JXdXqEH3HXdHqMH3PXdXqCn3A3dHqKn3I3dXqGn3G3dHqOn3O3dXqBX3B3
dHqJX3J3dXqFX3H3dHqNX3P3NXyD33B/6/QvDvufW+gUfkzgL/uvW+gUIdL/
OGxwD3WKiMMG90inSDhscI91iozDBvdEp3dx2OCe6hQFhw3umU7v4bDBPdcp
Kg4b3Aud3sdhg3upUzQcNrhXOn2Awwb3WsMPcdjg/tPwIxz2Y+1Cp09w2I+0
C52i4+g+E0GnGDgGF1GnmDgmF0mnWDgWF1mn2Dg2965OcXAcLopOcXFc7j2d
4uF4XFSd4uP43Ps6JcAJuGg6JcQJuXALDRPhRNzHOiXGYT91C52S4CTcJzol
xUm56Dolw8m4GDolx8m5mDqlwCm4WDqlxCm52Dqlwqm4ODqlxqm5uDqlwWm4
eDqlxWm5+Dqlw+m4BDqlx+m5hBpmwBm4T3XKiMNmcgudMuPMXBKdsuAsXFKd
suKsXDKdsuFsXHKdsuPsXAqdcuAcXEqdcuKcXCqdcuFcXGqdcuPcXBqd8uA8
XFqd8uK8XDqd8uF8XHoN8+P8XCadCuCwBd1Cp0K4EJdZp8K4MJdFpyK4CJdV
p6K4KJdNp2K4GJddp+K4OJdDpxK4BJdTp5K4JJdLp1K4FJdbp9K4NJdHpzK4
DJdXp7K4LJdPw3K4HFdQp/I4bAW30KkirsgV0qkSrsQV1qkyrswV0akKrsIV
1akqrsoV06karsYV16k6rs6V0KkGrsGV1KkmrsmV0qkWrsWV1qk2rs2V0akO
rsOV1bAurstV0KkeDlvfLXRqgBtwFXVqiBtylXRqhBtxlXVqjBtzVXRqgptw
VXVqipty1XRqhptx1XVqjptzNXRqgVtwNXVqiVtytXRqhVtxtXVqjVtzdTRs
g9tw9XVqi8O2cwud2uP2XAOdOuAOXEOdOuKOXCOdOuFOXGOdOuPOXBOduuAu
XFOduuKuXDOduuFuXHOduuPuXAudeuAeXEudeuKeXCudeuFeXGsNe+PeXDud
+uCwfd1Cp364H9dep/64P9dBpwF4ANdRp4F4INdJp0F4ENdZp8F4MNdFpyF4
CNdVp6F4KNdNp2F4GNddp+F4ONdDpxF4BNdTp5F4JNdLw1F4FNdXp9E47Gdu
odPn+HOun05j8Biuv05j8VhugE7j8DhuoE7j8XhukE4T8ARusE4T8URuiE6T
8CRuqE6T8WRumE5T8BRuuE5T8VRuhE7T8DRupIbT8XTu/wA5Okzc
       "]]}],
    Boxed->False]}], "}"}]], "Output",
 CellChangeTimes->{{3.643580014430819*^9, 3.6435800409576263`*^9}, {
  3.643580095973168*^9, 3.643580115883953*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["NormalizeColumns", "Subsection",
 CellChangeTimes->{{3.643579558689629*^9, 3.643579590654546*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643579564390954*^9, 3.6435795652952433`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "NormalizeColumns"}]], "Input",
 CellChangeTimes->{{3.6435795737745523`*^9, 3.643579601048148*^9}}],

Cell[BoxData[
 StyleBox["\<\"NormalizeColumns[X] yields a transformation of the matrix X in \
which each column of X has been normalized. This is equivalent to \
Transpose[Normalze /@ Transpose[X]], but has been significantly \
optimized.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643579601445264*^9},
 CellTags->"Info3643565201-3675405"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.643579567898693*^9, 3.643579569719363*^9}}],

Cell["\<\
NormalizeColumns[x] is slightly more efficient than the NormalizeRows \
function, but it is exactly equivalent to NormalizeRows[x\[Transpose]]\
\[Transpose]. See the NoralizeRows section for examples.\
\>", "Text",
 CellChangeTimes->{{3.6435801498032*^9, 3.6435802116154137`*^9}, {
  3.6435802591906013`*^9, 3.643580264070188*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["ReadBinaryStructure", "Subsection",
 CellChangeTimes->{{3.6435810755153723`*^9, 3.643581079609139*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643581084392565*^9, 3.643581089281311*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "ReadBinaryStructure"}]], "Input",
 CellChangeTimes->{{3.643581090721949*^9, 3.643581090967101*^9}}],

Cell[BoxData[
 StyleBox["\<\"ReadBinaryStructure[stream, instructionsList] yields the data \
structure result of importing the given instructions via BinaryReadList. \
Instructions may take the following format:\\n  * type (e.g., \\\"Integer32\\\
\" or \\\"Real64\\\") are read as is;\\n  * {type, n} reads in a list of n of \
the given type (if n is 1 then a 1-element list is returned);\\n  * {type, n, \
postprocessFn} yields postprocessFn[data] where data is the list of n of the \
given type;\\n  * name -> spec yields the rule name -> result where result is \
the result of reading in the given instruction spec;\\n  * {spec1, spec2...} \
yields a list of the given instruction specs, each read in order.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643581091415224*^9},
 CellTags->"Info3643566691-6300800"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.6435811446812897`*^9, 3.643581149183497*^9}}],

Cell["\<\
BinaryReadStructure[] is useful for reading structured binary data from a \
binary file such as a NifTI or MGH file.\
\>", "Text",
 CellChangeTimes->{{3.643581166382923*^9, 3.64358119704664*^9}, {
  3.6435812914918003`*^9, 3.6435812964199266`*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["RowNorms", "Subsection",
 CellChangeTimes->{{3.6435802900312777`*^9, 3.6435802914210463`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6435804520031567`*^9, 3.643580452801077*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RowNorms"}]], "Input",
 CellChangeTimes->{{3.643580474290728*^9, 3.643580475954403*^9}}],

Cell[BoxData[
 StyleBox["\<\"RowNorms[X] yields the equivalent of Norm /@ X but has been \
optimized for speed.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6435804764250507`*^9},
 CellTags->"Info3643566076-3675405"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.643580454616776*^9, 3.6435804558412437`*^9}}],

Cell["\<\
RowNorms[] can be used to efficiently calculate the norm of each vector in a \
matrix of row-vectors.\
\>", "Text",
 CellChangeTimes->{{3.643580480985713*^9, 3.6435805606454077`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.643580459041153*^9, 3.643580459952558*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"coords", "=", 
   RowBox[{"ExampleData", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Geometry3D\>\"", ",", "\"\<StanfordBunny\>\""}], "}"}], 
     ",", "\[IndentingNewLine]", "\"\<VertexData\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "@", "coords"}]}], "Input",
 CellChangeTimes->{{3.6435806002713327`*^9, 3.643580631686647*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"34834", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{{3.643580618154067*^9, 3.643580636998187*^9}, 
   3.643580717524372*^9, 3.6435808895319643`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"coords", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"100000", ",", "50"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "@", "coords"}]}], "Input",
 CellChangeTimes->{{3.643580749437098*^9, 3.64358077342741*^9}, {
  3.643580807178133*^9, 3.643580809497958*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"100000", ",", "50"}], "}"}]], "Output",
 CellChangeTimes->{3.643580773832075*^9, 3.643580809973011*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"norms1", "=", 
    RowBox[{"RowNorms", "[", "coords", "]"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"Dimensions", "@", "norms1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.643580642863534*^9, 3.64358068135751*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.007802`", ",", 
   RowBox[{"{", "34834", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.643580654029972*^9, 3.643580683070817*^9}, {
   3.643580718763208*^9, 3.64358072267618*^9}, 3.643580777428451*^9, 
   3.643580811663979*^9, {3.643580892983642*^9, 3.643580899015464*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"norms2", "=", 
    RowBox[{"Norm", "/@", "coords"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"Dimensions", "@", "norms2"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6435806917612343`*^9, 3.643580700320944*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.007717`", ",", 
   RowBox[{"{", "34834", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.643580701511896*^9, 3.643580723589665*^9}, 
   3.643580778796266*^9, 3.643580812956706*^9, 3.643580895006626*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"norms1", "\[Equal]", "norms2"}]], "Input",
 CellChangeTimes->{{3.643580903071163*^9, 3.643580908887591*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.6435809051767263`*^9, 3.643580909573357*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["ColumnNorms", "Subsection",
 CellChangeTimes->{{3.643580325460257*^9, 3.6435803277641993`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643580330948359*^9, 3.643580332612433*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "ColumnNorms"}]], "Input",
 CellChangeTimes->{{3.643580335941204*^9, 3.643580338189825*^9}}],

Cell[BoxData[
 StyleBox["\<\"ColumnNorms[X] yields the equivalent of Norm /@ Transpose[X] \
but has been optimized for speed.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643580338643938*^9},
 CellTags->"Info3643565938-3675405"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.643580356117906*^9, 3.64358035905163*^9}}],

Cell["\<\
ColumnNorms[x] is slightly more efficient thatn RowNorms[x] but produces the \
exact same result as RowNorms[x\[Transpose]]. See RowNorms section for \
examples.\
\>", "Text",
 CellChangeTimes->{{3.6435803626115227`*^9, 3.643580394291141*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["QuaternionToRotationMatrix", "Subsection",
 CellChangeTimes->{3.6435809744949417`*^9}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643580978428115*^9, 3.6435809793240337`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "QuaternionToRotationMatrix"}]], "Input",
 CellChangeTimes->{{3.643580980394453*^9, 3.643580981454941*^9}}],

Cell[BoxData[
 StyleBox["\<\"QuaternionToRotationMatrix[{x,y,z,w}] yields the rotation \
matrix associated with the quaternion \
{x,y,z,w}.\\nQuaternionToRotationMatrix[{y, z, q}] is equivalent to \
QuaternionToRotationMatrix[{x,y,z,q}] where x is Sqrt[1 - (x^2 + y^2 + z^2)].\
\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643580982152412*^9},
 CellTags->"Info3643566582-6300800"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.643580987997601*^9, 3.643580991211451*^9}}],

Cell["\<\
QuaternionToRotationMatrix[] is used to convert a quaternion into a rotation \
matrix; this was designed for use with the NifTI file formats, which encode \
quaternions to convey orientation information.\
\>", "Text",
 CellChangeTimes->{{3.64358099515563*^9, 3.643581049106285*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["SetSafe", "Subsection",
 CellChangeTimes->{{3.6435716173962193`*^9, 3.643571618673952*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6435716239378033`*^9, 3.643571624713887*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SetSafe"}]], "Input",
 CellChangeTimes->{{3.643571627037738*^9, 3.64357162831516*^9}}],

Cell[BoxData[
 StyleBox["\<\"SetSafe[a, b] is equivalent t0 the expression (a = b) except \
that if any messages are generated during the evaluation of b, $Failed is \
yielded and a is not set.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6435716289416847`*^9},
 CellTags->"Info3643557228-3240927"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.643571696042055*^9, 3.6435716994958*^9}}],

Cell["\<\
SetSafe is mostly used by MemoizeSafe as a way to prevent the result of a \
function call from being memoized in the event than an error occurred.\
\>", "Text",
 CellChangeTimes->{{3.643571705431836*^9, 3.643571772853958*^9}, {
  3.643571803244597*^9, 3.6435718089731216`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.643571818948715*^9, 3.643571820020808*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RandomRatio", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"RandomRatio", "[", "x", "]"}], "=", 
    RowBox[{
     RowBox[{"RandomInteger", "[", "x", "]"}], "/", 
     RowBox[{"RandomInteger", "[", "x", "]"}]}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.64357190620061*^9, 3.6435719231395693`*^9}, {
  3.643571954466755*^9, 3.6435720076971292`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"RandomRatio", "[", "k", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6435719640302773`*^9, 3.6435719648909483`*^9}, {
  3.643572014513929*^9, 3.643572026672884*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Power", "::", "infy"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Infinite expression \[NoBreak]\\!\\(1\\/0\\)\[NoBreak] \
encountered. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/infy\\\", ButtonNote -> \
\\\"Power::infy\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.643572027191519*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Power", "::", "infy"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Infinite expression \[NoBreak]\\!\\(1\\/0\\)\[NoBreak] \
encountered. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/infy\\\", ButtonNote -> \
\\\"Power::infy\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.643572027245007*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"ComplexInfinity", ",", "1", ",", "0", ",", 
   FractionBox["3", "2"], ",", "ComplexInfinity", ",", "6", ",", 
   FractionBox["4", "7"], ",", "8", ",", "1", ",", 
   FractionBox["3", "2"]}], "}"}]], "Output",
 CellChangeTimes->{3.643572027247773*^9}]
}, Open  ]],

Cell["\<\
When called again, a new ratio is not drawn nor is the error repeated because \
the erronious result was saved.\
\>", "Text",
 CellChangeTimes->{{3.64357205224656*^9, 3.643572081869954*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomRatio", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.643572034936131*^9, 3.643572041370051*^9}}],

Cell[BoxData["ComplexInfinity"], "Output",
 CellChangeTimes->{3.64357204208248*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClearAll", "[", "RandomRatio2", "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RandomRatio2", "[", "x_", "]"}], ":=", 
   RowBox[{"SetSafe", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"RandomRatio2", "[", "x", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"RandomInteger", "[", "x", "]"}], "/", 
      RowBox[{"RandomInteger", "[", "x", "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.643572111415032*^9, 3.643572121502605*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"RandomRatio2", "[", "k", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.64357212465629*^9, 3.643572146549879*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Power", "::", "infy"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Infinite expression \[NoBreak]\\!\\(1\\/0\\)\[NoBreak] \
encountered. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/infy\\\", ButtonNote -> \
\\\"Power::infy\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.643572262704945*^9, 3.643572268204216*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Infinity", "::", "indet"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Indeterminate expression \[NoBreak]\\!\\(0\\\\ \
ComplexInfinity\\)\[NoBreak] encountered. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/indet\\\", ButtonNote -> \
\\\"Infinity::indet\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.643572262704945*^9, 3.6435722682615232`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Power", "::", "infy"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Infinite expression \[NoBreak]\\!\\(1\\/0\\)\[NoBreak] \
encountered. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/infy\\\", ButtonNote -> \
\\\"Power::infy\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.643572262704945*^9, 3.6435722683174686`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Power", "::", "infy"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Infinite expression \[NoBreak]\\!\\(1\\/0\\)\[NoBreak] \
encountered. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/infy\\\", ButtonNote -> \
\\\"Power::infy\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.643572262704945*^9, 3.643572268372986*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \[NoBreak]\\!\\(\\*StyleBox[\\(Power :: \
infy\\), \\\"MessageName\\\"]\\)\[NoBreak] will be suppressed during this \
calculation. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/stop\\\", ButtonNote -> \
\\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.643572262704945*^9, 3.643572268404607*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"$Failed", ",", "$Failed", ",", 
   FractionBox["1", "3"], ",", "0", ",", "$Failed", ",", "$Failed", ",", 
   FractionBox["1", "6"], ",", "$Failed", ",", 
   FractionBox["3", "7"], ",", "9"}], "}"}]], "Output",
 CellChangeTimes->{{3.643572147397584*^9, 3.643572191666654*^9}, {
  3.6435722579682827`*^9, 3.64357226840768*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomRatio2", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.64357227566111*^9, 3.643572279179899*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.643572280303012*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomRatio2", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.64357228339263*^9, 3.6435722879077053`*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.643572288647664*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"RandomRatio2", "[", "1", "]"}], ",", 
   RowBox[{"RandomRatio2", "[", "2", "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.643572298561792*^9, 3.643572320723414*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.643572308012314*^9, 3.6435723149840527`*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["TemporarySymbol", "Subsection",
 CellChangeTimes->{{3.6435754171744413`*^9, 3.643575419388357*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643575423548365*^9, 3.6435754244278*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TemporarySymbol"}]], "Input",
 CellChangeTimes->{{3.643575425303334*^9, 3.643575427996499*^9}}],

Cell[BoxData[
 StyleBox["\<\"TemporarySymbol[] yields a unique symbol that is marked as \
temporary.\\nTemporarySymbol[string] yields a unique symbol that begins with \
the given string and is marked temporary.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6435754283798037`*^9},
 CellTags->"Info3643561028-1762344"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.64357543106949*^9, 3.643575432100069*^9}}],

Cell["\<\
TemporarySymbol[] is basically equivalent to Unique[], except that it flags \
the symbol as temporary, much like Module[] does, before returning. This can \
occasionally be useful when one wants to attach methods or values to a \
particular symbol that is nonetheless intended as a temporary object.\
\>", "Text",
 CellChangeTimes->{{3.643575438933734*^9, 3.643575536257779*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.643575508498321*^9, 3.643575509498123*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"object", "=", 
   RowBox[{"TemporarySymbol", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Evaluate", "[", "object", "]"}], "/:", 
   RowBox[{"ToString", "[", "object", "]"}], ":=", 
   RowBox[{"RandomChoice", "[", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<ballyhoo\>\"", ",", "\"\<bindle stiff\>\"", ",", 
      "\"\<bodacious\>\"", ",", "\"\<borborygmus\>\"", ",", "\"\<cahoots\>\"",
       ",", "\"\<callipygian\>\"", ",", "\"\<cantankerous\>\"", ",", 
      "\"\<carbuncle\>\"", ",", "\"\<caterwaul\>\"", ",", 
      "\"\<cattywampus\>\"", ",", "\"\<cockamamie\>\"", ",", 
      "\"\<comeuppance\>\"", ",", "\"\<concupiscent\>\"", ",", 
      "\"\<copacetic\>\"", ",", "\"\<curmudgeon\>\"", ",", 
      "\"\<debauchery\>\"", ",", "\"\<doohickey\>\"", ",", 
      "\"\<effluvium\>\"", ",", "\"\<factotum\>\"", ",", "\"\<farrago\>\"", 
      ",", "\"\<festoon\>\"", ",", "\"\<finagle\>\"", ",", 
      "\"\<fisticuffs\>\"", ",", "\"\<flabbergasted\>\"", ",", 
      "\"\<flagitious\>\"", ",", "\"\<flibbertigibbet\>\"", ",", 
      "\"\<flummoxed\>\"", ",", "\"\<foible\>\"", ",", "\"\<folderol\>\"", 
      ",", "\"\<foofaraw\>\"", ",", "\"\<fusty\>\"", ",", 
      "\"\<gallimaufry\>\"", ",", "\"\<gallivant\>\"", ",", 
      "\"\<gobbledygook\>\"", ",", "\"\<haberdasher\>\"", ",", 
      "\"\<harridan\>\"", ",", "\"\<higgledy-piggledy\>\"", ",", 
      "\"\<high jinks\>\"", ",", "\"\<hodgepodge\>\"", ",", "\"\<hokum\>\"", 
      ",", "\"\<hoodwink\>\"", ",", "\"\<hoosegow\>\"", ",", 
      "\"\<hornswoggle\>\"", ",", "\"\<hortatory\>\"", ",", 
      "\"\<hullabaloo\>\"", ",", "\"\<ignoramus\>\"", ",", 
      "\"\<imbroglio\>\"", ",", "\"\<jackanapes\>\"", ",", 
      "\"\<jiggery-pokery\>\"", ",", "\"\<kerfuffle\>\"", ",", 
      "\"\<lackadaisical\>\"", ",", "\"\<loggerheads\>\"", ",", 
      "\"\<lollygag\>\"", ",", "\"\<loquacious\>\"", ",", "\"\<louche\>\"", 
      ",", "\"\<lugubrious\>\"", ",", "\"\<malarkey\>\"", ",", 
      "\"\<maleficence\>\"", ",", "\"\<mendacious\>\"", ",", "\"\<oaf\>\"", 
      ",", "\"\<obfuscate\>\"", ",", "\"\<obloquy\>\"", ",", 
      "\"\<obsequious\>\"", ",", "\"\<orotund\>\"", ",", "\"\<osculate\>\"", 
      ",", "\"\<paroxysm\>\"", ",", "\"\<peccadillo\>\"", ",", 
      "\"\<periwinkle\>\"", ",", "\"\<perspicacious\>\"", ",", 
      "\"\<pettifogger\>\"", ",", "\"\<poltroon\>\"", ",", 
      "\"\<prognosticate\>\"", ",", "\"\<pusillanimous\>\"", ",", 
      "\"\<raffish\>\"", ",", "\"\<ragamuffin\>\"", ",", 
      "\"\<rambunctious\>\"", ",", "\"\<resplendent\>\"", ",", 
      "\"\<ribaldry\>\"", ",", "\"\<rigmarole\>\"", ",", "\"\<ruckus\>\"", 
      ",", "\"\<scalawag\>\"", ",", "\"\<scofflaw\>\"", ",", 
      "\"\<shenanigans\>\"", ",", "\"\<skedaddle\>\"", ",", 
      "\"\<skulduggery\>\"", ",", "\"\<spiffy\>\"", ",", "\"\<squelch\>\"", 
      ",", "\"\<subterfuge\>\"", ",", "\"\<supercilious\>\"", ",", 
      "\"\<swashbuckler\>\"", ",", "\"\<sylph\>\"", ",", 
      "\"\<tatterdemalion\>\"", ",", "\"\<termagant\>\"", ",", 
      "\"\<whirligig\>\"", ",", "\"\<widdershins\>\"", ",", 
      "\"\<willy-nilly\>\""}], "}"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.6435755434859457`*^9, 3.643575605031053*^9}, {
   3.643575871165044*^9, 3.643575896990512*^9}, 3.643575952814126*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"ToString", "[", "object", "]"}], ",", 
   RowBox[{"{", "3", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6435759002204638`*^9, 3.643575907499404*^9}, {
  3.643575966217478*^9, 3.643575989024569*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"whirligig\"\>", ",", "\<\"willy-nilly\"\>", 
   ",", "\<\"doohickey\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.643575901811186*^9, 3.643575912185508*^9}, {
  3.643575960729328*^9, 3.643575989808488*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Usage Notes", "Subchapter",
 CellChangeTimes->{{3.643582321538394*^9, 3.64358232488148*^9}}],

Cell["\<\
The utilities included in Neurotica`Util` enable a few usage patterns. The \
first is the immutable paradigm used by DefineImmutable (see its section for \
a clear example). The second is the lazily-calculated auto-cached programming \
style, which is extremely useful for complicated analysis.

This paradigm can be accomplished with a combination of the functions \
MemoizeSafe and AutoCache:\
\>", "Text",
 CellChangeTimes->{{3.643582328817182*^9, 3.643582440246221*^9}, {
  3.643582484064507*^9, 3.643582501732861*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MemoizeSafe", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ComplexAnalysisOfSubject", "[", "sub_", "]"}], ":=", 
    RowBox[{"AutoCache", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<ComplexAnalysis_subject=\>\"", "<>", 
       RowBox[{"ToString", "[", "sub", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"ComputeComplexAnalysis", "[", 
       RowBox[{"GetData", "[", "sub", "]"}], "]"}]}], "]"}]}], "]"}], 
  ";"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.643582507869997*^9, 3.643582602078608*^9}, {
  3.643625626696471*^9, 3.64362562719028*^9}}],

Cell[TextData[{
 "The above toy example, when evaluated, would not compute any values, though \
it would define the ComplexAnalysisOfSubject[] function. When invoked, \
ComplexAnalysisOfSubject[s] would compute the analysis of subject s\
\[CloseCurlyQuote]s data, cache it to a file, memoize it, and return it. The \
next time it was invoked, it would yield the already calculated and memoized \
result. If the cell is evaluated again in a different ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " session, and the function is again invoked with the same subject, the \
result would be loaded from the cache, memoized, then returned."
}], "Text",
 CellChangeTimes->{{3.643582607242569*^9, 3.64358267982056*^9}, {
  3.643582711383504*^9, 3.6435827825665083`*^9}, {3.643582828398098*^9, 
  3.643582845309648*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Chapter"],
 ". File Formats and I/O"
}], "Chapter",
 CellChangeTimes->{{3.643583114834614*^9, 3.64358313084439*^9}}],

Cell[CellGroupData[{

Cell["Introduction", "Subchapter",
 CellChangeTimes->{{3.6436256557415047`*^9, 3.6436256570576763`*^9}}],

Cell["\<\
Neurotica supports the importing and exporting of many file formats related \
to neuroscience, particularly fMRI-related formats. These primarily consist \
of the various FreeSurfer file formats and the NifTI and NifTI-related \
formats. This section documents the behaviour and options allowed when \
importing such files.\
\>", "Text",
 CellChangeTimes->{{3.643625659679112*^9, 3.6436257411518908`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["FreeSurfer Formats", "Subchapter",
 CellChangeTimes->{{3.643625744976891*^9, 3.643625787682106*^9}}],

Cell[CellGroupData[{

Cell["MGH/MGZ Files", "Subsection",
 CellChangeTimes->{{3.64362579077573*^9, 3.6436257938696527`*^9}}],

Cell[CellGroupData[{

Cell["Usage", "Subsubsection",
 CellChangeTimes->{{3.6436258070545692`*^9, 3.6436258076170797`*^9}}],

Cell["\<\
Importing MGH files is as easy as specifying the \[OpenCurlyDoubleQuote]MGH\
\[CloseCurlyDoubleQuote] file type with the Import function: Import[file, \
\[OpenCurlyDoubleQuote]MGH\[CloseCurlyDoubleQuote]]. The MGZ format is just a \
gzipped MGH file, so MGZ files can be imported with the command Import[file, \
{\[OpenCurlyDoubleQuote]GZIP\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]MGH\[CloseCurlyDoubleQuote]}].

The MGH file format supports both importing and exporting, so it may also be \
used with Export.\
\>", "Text",
 CellChangeTimes->{{3.643625813591305*^9, 3.643625881304797*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Options", "Subsubsection",
 CellChangeTimes->{{3.643625889843581*^9, 3.643625898967433*^9}}],

Cell["\<\
When importing, the MGH file format may import a variety sub-elements from \
the file; for example, if one wishes to import only the header of a file, the \
command Import[file, {\[OpenCurlyDoubleQuote]MGH\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Header\[CloseCurlyDoubleQuote]}] may be used. The \
supported sub-elements for importing files are:\
\>", "Text",
 CellChangeTimes->{{3.643625901104645*^9, 3.643625972925213*^9}}],

Cell[CellGroupData[{

Cell["\[OpenCurlyDoubleQuote]Header\[CloseCurlyDoubleQuote] imports the MGH \
file header.", "Item",
 CellChangeTimes->{{3.643625982172551*^9, 3.643626022177906*^9}}],

Cell["\<\
\[OpenCurlyDoubleQuote]OptionalData\[CloseCurlyDoubleQuote] imports any \
optional data appended to the file.\
\>", "Item",
 CellChangeTimes->{{3.643625982172551*^9, 3.6436260286127653`*^9}}],

Cell["\<\
\[OpenCurlyDoubleQuote]MetaInformation\[CloseCurlyDoubleQuote] imports only \
the Header and the OptionalData.\
\>", "Item",
 CellChangeTimes->{{3.643625982172551*^9, 3.6436260343729563`*^9}}],

Cell["\[OpenCurlyDoubleQuote]Frames\[CloseCurlyDoubleQuote] yields only the \
list of image frames from the file.", "Item",
 CellChangeTimes->{{3.643625982172551*^9, 3.643625990356289*^9}, {
  3.643626036015252*^9, 3.643626042731674*^9}}],

Cell["\<\
\[OpenCurlyDoubleQuote]Data\[CloseCurlyDoubleQuote] yields the Frames and the \
MetaInformation but does not interpret the MGH file as a volume or surface \
field.\
\>", "Item",
 CellChangeTimes->{{3.643625982172551*^9, 3.643625995571581*^9}, {
  3.643626044767733*^9, 3.6436260827083883`*^9}}],

Cell["\<\
If no sub-element is given, then the Import function imports the MGH file as \
either a volume image or a surface field. If the file represents a volume \
image, then an MRImage3D object is returned with meta-information attached to \
its options. If 2 of the first 3 dimensions of the volume image are of size \
1, then the volume is assumed to be an overlay for a surface and is returned \
as a simple list.\
\>", "Item",
 CellChangeTimes->{{3.643625982172551*^9, 3.643625995571581*^9}, {
  3.643626044767733*^9, 3.643626179041655*^9}, {3.643626251409025*^9, 
  3.643626264740232*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notes", "Subsubsection",
 CellChangeTimes->{{3.6436263191118193`*^9, 3.643626319583852*^9}}],

Cell["\<\
MGH/MGZ importing has been widely tested, but exporting has been less \
well-tested. While exporting MRImage3D objects and surface overlays works \
fine in most situations, it is likely that there are still bugs in the export \
function, particularly if one rearranges or resamples a volume then exports \
the newly resampled volume.\
\>", "Text",
 CellChangeTimes->{{3.643626322981201*^9, 3.6436264087340393`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.6436264145684958`*^9, 3.643626415321603*^9}}],

Cell["Import a volume file:", "Text",
 CellChangeTimes->{{3.643626419889061*^9, 3.643626423421462*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"bert", "=", 
   RowBox[{"SelectFirst", "[", 
    RowBox[{"$FreeSurferSubjects", ",", 
     RowBox[{
      RowBox[{"StringEndsQ", "[", 
       RowBox[{"#", ",", "\"\<bert\>\""}], "]"}], "&"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"orig", "=", 
  RowBox[{"Import", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{"bert", ",", "\"\<mri\>\"", ",", "\"\<brain.mgz\>\""}], "}"}], 
     "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"\"\<GZIP\>\"", ",", "\"\<MGH\>\""}], "}"}]}], "]"}]}]}], "Input",\

 CellChangeTimes->{{3.6436264977830467`*^9, 3.643626508140491*^9}, {
  3.643626547859305*^9, 3.6436266164163227`*^9}, {3.643630110220572*^9, 
  3.6436301109045362`*^9}, {3.643630194606988*^9, 3.6436301951562*^9}, {
  3.6436302853027573`*^9, 3.643630300043339*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
BQgNs/q5VHzRwOIHly5PiSOipUh6qg+zDfWeMDOQtCyVYKyVYSO2BESuyvXr
10dHR/v7+7u6umTFZWlC2JB4sePQ0NDi4qIuoPSylQ2hNSWUwnNE7cJwgdYp
K/tTKNRENEhoumaj1A33sjlVWqZOvCOyZqAHAU+LgN0l3amvSrgkHbJ5/AIc
aHVFOlaNd1PSW+ea+XJ4IAPK7L698847VHTQMkzKSeqxurqKq6I38/z584cP
H061edioMI5Y1rV0QxdNjoZHXUFZOOpsrFcdcd13sZbbYOlMYcYXkUZKyLxB
yX6Kr/VuciF66ToNrAh65dwuZ/WwlYJBQhKWYlH8FL9CC4J32jpgwu/licrl
PgWHRomU6hdh2jnV+CSXGXu+srIik2NycnJ4ePjUqVOYHC/6fziE7xjsDemG
/BRdK7E3nCT1XB2CkOiGk6Sc0+cbUQ32BsN+GShKuVfNk5e5V6QDo4JEKhKB
DrhklPouF6mS7aUwg8HFKAz5FO9HKA0Jjxt1cKacf+79C55VSHcbJhPRUbYk
SDSwRmRvSDfW1tYoJWVAx7FjxzL5PGw8iItKNy5cuDA3N6c/e0YQs+CgrKxw
xtNFlfYdapbCg/0UMhTsTCl1o5zbUw4lflpZq8R2eOrHJBdff/01xZ+u7MLM
IK9qJaHIHFcF7SKb4zGkHhLoyjGcIMdIERO9Ejro3VNPuRq1o2ysY4cdsRov
eqNeTm/j0tLS9PR0X1/f3r17t2/fHt0IGwnqN7A3FhYW7t+/T7aRpjanYsu6
So/IQDG8/tVNbbYTiIvWLBdwX1tZ423dIBJbzh9GOjwYkA41hy7dG0uJF2UY
tlisXa7p+rCg/BWcinVAgzZYJIJAKFsbuJP2WIkJcooRIt1gi66k4969e+xp
6u7ulreScRxhIyHRkL1x6NChkZERZopyGX1eN5z48CXb565cnfb7Ks6n6IS6
AtNztBxxdSess6ved0AvvCMVZSAUtwJtocSL7Alta16CUI5EdjbWkRn6X/gW
5oCVuuE2WAlCOZwZDWHZnGNBukFVGLtmiHVgcgwODh45cqSuri41YGHDQB62
tbVVV0Z55Y8ePeJQ4KeUk3ls56MY5Vy+cm9aWY3p1fOSBesGz1yzJxopINrg
vjaP33HJOhvfkBe9GNeKfPPNN54/7FEb5d4Wp1G8QoX2WErNna9xxw1+CtFO
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
1TvRyinBxF1xdjz3TzdcPIZu6MhTVV427HtGaM3Y5LK23E0oSMonxX43x0Ix
JEgoM7m0zOESiXW5mt0ZmtrY8oCT4ip9SYfsDXSju7u7oaEhu9vC+gXdYKzo
xMTE4uKiLGpqy+WkOOJXXk9dooCSOPHqxthSOnTcXBhGmNHXaFdP2SmwtU+N
+u8q65bK6KieqkY36GKjzMO5FXeXlFZH2feKViBTzrryS6EYaKPHHbv2w/Fb
l8iW74Z7WKQbP/3pTz3vi4Z64qLSjc7Ozp07d2bNdFjXMHmjp6dnZmZmZWXl
1VdfZU0bdV9e21oWKvzm2xBwcHebs6Jc4sveVS+kdpzEO+Bq1rQx+IsoB/M0
kCCMFnfN48XwAI82tVXg0X84Gj775an3iD8qVXgZ1LKSGHKrC4EUp4w/qq6a
5RmIabi41PMHGPklh4X6jZGRkba2Nr3hsvEQ7Rf9/x/CPwx/unV1dX19ffqr
JrjBfhCWw5b2Rg1lJ5q7Wb22gKgCZ81dpQ6VeB1bqRjlcA/OrBOy7qC3vUFc
FC/G6kGNKC0tGAllncbztfHkTDnsNKy5Deez6hhkC1HZLVuWx6OEFp9SN5jZ
Tp358vLy9PT0pUuXDh8+vGvXru3bt6e1LaxTSMI2NjZeuHBhdnZWuiF7g80p
/M07uIHh4VVHpefiRnhnMN2conNHsoOIaLn+tbQ37KE4uGHR8EJYem/xd6gp
RTeYXo474wpzmu4pFsXwKKs1UAC3yf+6CqrFk7tazAMGbVO5MB7vxr8OPbMe
1U69qIw31qksLS1dvXr13Llze/fulW7IN0xoNKxT0I39+/cz5uvOnTvoBp2w
1IvaubDj75E7ZQv8B8WkULfAew2Bez3c5eGnKkvHSXe69MuTN0rdoMwb3bBQ
0IfyZWXVI8WiFGbUdLR5VKm75Eobqdy2wBMSM7GB4chJuVTOxhjvEjNUiXJQ
+vXkyRO9q3pvpRsnT55sampCN+KkhHUKxRuHDh2Sbty4cYNKUekG/Snl8tZy
Hq9FA0uDKAFZS1IYbk7RR33KKXMDS5l9QDScRnEGljmBWBEkTXAWyJh8Ut0G
63k+nljuitMvv71lsqzvcnjTtSXOtFLi7hyNA622phwLtW6UQwUJkJKHlb1B
eyC6sbKyMj4+3tXVtXv37vr6+tgbYf1CB31ra+vFixeJi6IbDPhirEQ5298n
3f1fH1SH9QkSK54wXFZWlPZ8WXTqKRxlmZaHAlE16nmhX1bWtNFsS00pxgap
FvwO15C46RUtKvtTPF/UrbJUf3miKWlfJ1/cWe/KLpJBHmtGX7AXS2FykE9B
Nx4+fHjr1q3h4eG2tjaJhhzDzBcN6xc66Ds6OvQnPTs7Sz6FSlE2n5bVGgzi
cIMbF1lXm1P95cgGaQgPCfdMP2THvomrMd1i5rxMOfrPjbEcT1It5GGlG8Q/
sXzQro+rq6K5/Wl13bxnfNkbIgzyp4Kyef+zby9jKhtyERDrBj/ONSpIB930
rKRfWFgYHByURNfV1Uk6tm/fHt0I6xGCGzt37jxx4sTY2Jj+sO/du8fwDfaR
uS/+g+r2kBp7w3lMt6nSD8J5ZO9SuX8E3TDEQz6uLn0uxwJjgThp4rpQSi/K
ZIo+6mcxvxQzppy1Xo7lKaUJ3fjq22B1oHi8eJ7Ehaxl8gjp8GgyflaZpMZC
owZMVpzcwPPnz7e0tOzYsWPLli1JpoR1CsENudtnzpyR633z5k2Z048fP/Zs
wPeqC+LdxmUvw+0Y3OkONVdJMaMP3bCfgsIQ33B1uus9nLZw1RZ2hSdpoBsE
RfUpS9nQDaoynG3xYefF89r8/K5HtWK4UcWTOjwF0UaLi1rLzZU2mdyu+36x
NFa6oTeT4RtXr149e/bsgQMHZGlINxLcCOsU/em+/PLL+/bt09+z/qqXl5fZ
CcuI3XIE6EfVZayOarpoimPi9KVH/n5ZjAPFT6Gcsky8YlS4yhRXwgN8sEO8
DYHMCLrBkZeHgm7QMOuZ6nzjJ8VSBo8B5PiXc4wRjVI63INv48S9M9woJwi5
3oN2FQao0tSDJfb222/L2FhcXJRFRzJFjuHmzZvjpIR1CkFRWc79/f1TU1O6
JsrY8BRiPBRXa7tK3EeGuIevueWocJKedhM8fdQhVowZMqqeKO6yCs/G0ade
OKsTjfVCxkT3E9+wbuBWeESGYw52NxypwANiOJirTG0m8frLkcXWT0Ix6IZL
0/kqJWQENKgUxa2TDks3ZMsNDw8fO3aMStE0p4T1C0HRtrY2OmHX1taePHmi
y6XzHd7naN2w807RuBMiH397iTwfncFklqCXnTGCo1zW5qpOrubWDR15dMNR
Vk492VJSLZ4JZqHw7C+P9SgzNdzwNklXhDpvW446dzueG+VImnAP7wM+y/vV
8eaM+ZJcUDj61ltv6Y29ceOGxFmmnRRDvmGclLBO8VjR9vb2oaGh2dnZ1dXV
N954Q3/5eCgel+fmL2dRS9EoU6iuguAAukG1Ztq5l8PqzrL77JNiawlaxAHH
icCA4aL/RXWlo6AkzOM7sCvcAFuOHfPQHteVeSbY74r9j7x+N6F4J1QpI977
QGiU23TCst6RBh+JxmuvvXbnzp3JycmOjg5yKBKNOClhnYJu7NixQ/bGpUuX
pBv379/XH/w777zjuX+ucSKBwiW17IL36XYoozQePil2nTAFqxzl8fyTeK4F
ulHWjrroC1OE0g7aUjwNzLkP15CU83nKIIY/flldr1CO/kB2PLvY2RkGEfOG
oIRODxHZYOoyu6Tl8VFh/vDhQzkp58+fb2pqkqWBbrzo//wQ/kmchG1ubj53
7tzU1NTt27d1cdRfPjE910N6OYh3lpWJV4yNMnlBHsR+hzO2nnnuFAyxkY+q
WyORDpdwf1Rsk3RZuL5E1qZGN9yKi6fjyWNfVoec49dQ01WO+SKi4vGArifH
+PGsY34EdoWDPG5scY2otOLRo0cPHjyQbyLF0EcZGxMTE0eOHCEcmvRrWNeQ
hN21a9fBgwdPnz49Pj6+tLTEDnqUwfmCcoFIORjQKU4bFZ7URwzBpxjTxUO0
bMC4Cc4VWc6lOsThjviPqqsk9RhJQTl91LEUvr2MYZZTB9ENV2i4N9Y1Hujb
b6pT2b0Chip3z293ptVDSFzoRYmX7A0pxsrKCjvoL1y40NjY+PLLL0s6YmyE
dQ32hnSjpaWlt7dXDjibU+SS4014LEZZ8YWMvF9sd7U5YePBulHaIbZbPL/X
kcbPijUon1X3pHgU8GfF7kXEqiwyZ7OSpwNZW9AN51sdBbWx4Uyro6bWHPi0
utjajyQZ7QkA/q0p1dCdzCKWn6K3UQosHZ6ZmRkdHSWyQUQ0kY2w3pFuNDQ0
6K96cHBQf+E00euKaU+k7Hv1Yf+gOrDXjoxLuVz/6fPoVKaLPfyN2CrOp3gP
wvO6wQOcZyGFir1B36sdGfI+5RAPTx6jipWUrrdBfV4sT+GlutC9nItelnV5
7hBNfJ5jhm6QTJG7JydFunH9+nVp8r59+/BQIhphA6Ar4J49e06dOjU8PDw3
N7e6ukqxKNbFB8WWpU+qq5aJE7qdraatvgyTOiXxSbF1ugxrYKj4+X1aHSep
KcNw2SdzR8vl0c6c+iDrRxBWdVtKuY/JCxSsV4iGZYrb9l9qRo+iq0Ra+Kp7
2WStPXnyRCaH/BQG9Zw4caKurk5vNWmUSEdY7+iPuampqaenZ2RkZH5+XpdI
Zpiz2JGMhi/ZrosopQMXxkuivT+l7E/3SD1a28o+eo/dwEoxjnD6iu+z7Mys
Sy9IsLr71eEU16/yJbwVBgF5YVNZ3O48Tjkn2V14jgwz0Us3kCasIH41jyOW
bkiEFxcXx8fHW1tbt23bJnsjkY2wMZBu7N69++TJk5cvX5a9cf/+fV0riYv+
pjrKm0NX1lC5LNOTN8rKUicynFd1Z4dbYp9fO1IWpn5arFOxaNgacWa2XBXt
ORt2ZzxzrPyqt8cyr4Nfhxf8YXU7GwJY7nl0oZoXPiKVBHMsGvqNZKqxEFZ+
ysrKyuzs7Pnz5xsbGyUatjde9P95CP8q+mOur6/v6uqSnzIzM0MelskbOi9u
OvMsC29IJAfh2k4P8LFz8UkV102Vkzro4KDftiZYSg7XA3ZcDeI0q7OrXn3i
MjMnRzz/xy5MOb0HWwXdINrpZI1fxvO64Y/OSpclo/xeLLaTesjdW1paunLl
Snd3N92v2BvRjbABIA979OjRixcvXrt27ebNm4Q4dNHUhZVcpGdZfFYd7VsG
Lmqko/Q4XBThtEs5mMJ9+lypfaF3zxpZjLKUy/tQHEF16MMWjuXF6Vfrg+eL
UgOGLpVVppYOl4DWVL65jdfemWckOs1E4/wbb7yxsLAwNDR07Ngxul8TFw0b
Buq+Dhw4cObMGV0cSakwf0N//O9XFoiUo4ZdaFHjg6AJ5XTispLKleouxmZm
r+eJeeYP5RbOetD9anPFxeelEVL6L9YQwhreAmm7haxK6d24MB6HxXLnSAu/
nX8vimZd/0YBWDlaBG/l1VdfvX79+oULF1pbWxm1ET8lbBj096yr4Z49e9rb
22VyTE1N3bp169GjRwwzZyJxWUPlU1bqhrvenChxIqZGNz6o7kD8WQXphtdV
k9OsiXm6bMOBEc/kcT2n7RBHRdyTgviUqZbyqzac3LHiFpUyElvz4/Ri2JOi
V04AmZApxoZuS0z07j148GBiYqK3t/fgwYNYGjE2woZBV0BdDRsbG+Wq9PX1
yeS4cePG/fv35aogHQRIy+k6Tnb4toMY5TgON57bVXE+hUOHYhAxwLD5pDqi
nHyHtyP9pro8Ubi43U/rwYDugbVR4YE8ZX9rGQwhQuKMDJlZrClP2yBO69kd
ejFe40jHa81aB0pGZbaNjIwwbQPRSDIlbBj0x6w/abkqLS0tuCrSjZWVlYcP
Hz558kTnQgcE6ShbyF10UTaxeiCYV0M+f8C5Lv+iikUDK8JF3QwKc4FoWeVu
SwawbT6s7EjymgM38ls3XPDpqEipMNSR2nlxMvfZt6clP6uucqC4i7Y1u1pO
0epNe/311/Ueyn7r7Oysq6vjTY5uhA2DTGj5KTt27JA5ferUKV0iZ2dn5apQ
OEqUgzE+HE8OMkkHp05szxO+cMzQ48Jcj82XvBnNUlC2qHxR3VfyrFhezwuw
XpXBB1eCkZmlp94rk1wa6oAGySBeNjFSOt0oH/X8UrtX/I4eP4JuyNh47bXX
3njjDQkIbxEpWo8gnp+fP3/+/JEjR/T2ohtxUsKGQX/S9fX1u3bt2rdvX3d3
96VLlyYnJ2VyLC4uEiDlXLhdxQ1cDjVYN1wlVZaPElH0oDCuyC6BcJ+LRwK6
KP1ZdeaeH1NWhjgw67yJCzOwHOx6uInek3nwQT4pllbT7MaE0rJ7Dq1ziMbz
UVmo9GaBZIRwDXbIgwcPpqenGSVKODTGRthgbNu2bevWrVKPY8eO9ff3j42N
TU1NIR2M49ChYOGjI5kY52QTfMx91soFB9ReOpPCDsSybKNsjHXe02VUrnX/
uNimVCMLfPrnCpSdE9AgzolWeJPLZ9WhxLpBZxzj0NkH58GGTr+WLTnvV9fN
u0iDdWyyOqQVcuv0RslC0ztG4/zp06cbGhoQjRgbYYOhP+ktW7ZIPXRxPHny
pLzyq1evylu5efPm8vKyLp06F9RA6lBwA4h+lJsRfPBdre2CbesGJr2nmrtL
hXNqm4Qufre2oQAEIlAGTAhuoBi0ueF0uLbco3uQEVsa2Cf6FunG3/72N6+J
dCsNdRq8hmfFjjYitAwAxDGhkU3vEh/ZkzI6OtrZ2cl0r4hG2JBQXSCTg+io
/uavX78uD/3WrVsrKyurq6tyWB5X0FVV6mENAXbWO/1aBk7LJnqfOJrCrAyO
nRIAsWjwDG5l9cCuEprUWMwk0cB4wHLA63m+s/WLyrpqr4HjG7E3WIHt0Ioj
KmgXNhVNbbha+l1kdbA8mnY2vUVra2szMzPDw8Otra16V6MbYaOiP2xGyuzZ
s0feyvnz52Vy6I//ZpXbt2/rOOhKqnNRWh1cYXVwdIg4ZWWPvIfscQwJjKAb
WCk1uVrqMB05cZlWuQuJMEXZEY+HgmgIFIDZXF5bgG54G1S5rhq8n4U5Hm7I
dUQF3aA8A09NtpYVA2ifv3v37vT0NCOIE9YIG5vNFWRyNDc3nzhxYmho6MqV
K7I6pB7yWWR4y2fxdI5SN3Rbh8jeSrmIzZd7a4JbPNwKZxw7JefraAZygXTg
bjjfyvHn1P+lCrqBS8Ize+QXIuO+Nu+B9f2YNE64uCSM8jN+C8q96F/DxjA4
KTLS9NbJ42P9a4yNsIEh7L9t27b9+/cfPXpU3oos7bGxscnJSUkHunHv3j3q
OtANPlLtSfqVXIkdEDe42U9hxmDNSnr3dyAmOAWOZng2l7tLqAn3HoS/FGBC
0LOm5yGsWs7r8OQNTwBDjpAml34hHeVUdoIerDkAGRuYW0wvl6Uh0bh//75k
liWw2awUNjzMDNy0aVNDQ4NMjra2NknHwMAAlWC6ht65c2d1dfWVV15x4oDI
BqWeZECkIXSduMecqjCPCMNPKSeJefIP4mPzgGQHVeIu43RluAObZWQD3XBG
VU+lH6ePOvU8EklxPTmy4Apzcrvuu0edvD3qaXUeu4vWSumQYjCCWD6dxFZv
3d69ezN/OPxAYA3TgQMHDh06JOk4e/asTsH8/DzRUYmGrqqERknOUkrqoaMU
ROmr0hPXidEX5kQJulFjb/AMH1R2MDFew8ZGOZXLtSKepIEalPYGjS068siU
JMsbqPXIcgMLZe2WEQ/+sivkrW24POiGp3CQjZV06A3B0mC6l4yN9vb27JoP
Pyj01y6TQ7ohS7unp2d8fHxubu7u3buPHj16vQrS4Xowtq7rNqFCSsWIlNZU
mKMbtJmUCYtn1WXN7jtzwadne3r4j8eMO0bhrW2eHSpxwKrRg+nKZ12CvtG5
Ek8edr0ZARmLRjnu+Fl1L3YZF3WgQ3J6+/ZtRhCfPn26qamJiGikI/xwYNM0
UQ7phhx2OSm6pOp0SD1eqSD1kD4QJMTf1wlyPZi7411iimhQNEWIw1N6PBjQ
/e8oBkEGV5R5GJflxfmRP1XxWjcaSZjjpyfEndGX9I3kUpkO+nF1CjGi5M44
V31YNzCZKEFBHvX7upRFb4hcucnJyf7+fnl5stmiGOGHBkvcDh8+fOLEicuX
L1+/fl1u+7179x5UkEEun0U3KOqgaEEf6bv3BJ5SLogGvFNFt60bXnNAwMEZ
E8wMIicET7jKE7L4vFhgjXo456Ib+kbsGW9MQDekKo576FUxgLRsdisbZJxS
cRU9qWRqvYgJU2Su311viLy5kZGRzs7O+vp6RCPSEX5oyMzevXu3TI7e3t6x
sTFJBykVWePoBtKB7SFTBPODki0SrDgUNYN68GI8v9SDespQ5GfVLUjlahKU
hxFhuufj6lYU7371M+gJcYv0GlwBQpEGcQ90Q+i1YeG4oNTzjV3C8ay6fo6S
UWK/lJdLOsi9ygZbWVm5du3auXPnWBv9ov/3QnhhMOpc0tHT0zM0NCSHhb4V
+Sxra2vIxWsVKLHWUcKQ8EIEb0CgF54rteyNt956SzeQl3LFCQcWj8BDR5Ed
l2iW/bMeAOLQhLtWqRxz+JSiDjSBF6Pnwd+xxWI82bhcE+OUEMM3WBgttZRo
yBKbm5uTsaH3atu2bTEzwg8Z+lZ0AW1razt9+vSFCxeGh4d1VWU6BzNIqTnH
2ccecDmoNx+59d7hUyIDeArUZOIp6MGOPbJKspy8UTbmlxVl7qQrW+rKKUBe
mEL7yQfVtXGETC0XNl14JZ4JgNvlpI9eEuontZR4ygCTJXblyhX5dBR6vej/
txBeMJs2bdqxY0dzc7Pcdso5JicnpRs6L4yscTu8Ew2kGKQk+tQtsRw6dIPQ
KMOynHNx45tDjh6G43owDy72smmKyZ9Vl8l6ACl4KIenEGNIEHUh54tWkOHF
OvLQHrSuZmWDS+XZdCCXTQbYxMTE2bNnGxsbU1Uewo+qJkd9fb1Mju7ubvnv
urDeunVLHkpNeTkXYmwJYoboxtPqmmbnU6wbeDd6EqwLaiGoDPHeaqTAZR6O
NjieWe5jcl6GdC09caRrXStOnkVQD+a9CU7Z8PxlSyy/l8s2MDaePHkio0vG
BjkU5my86P+uEL4v6Boqk4PBxayD1BV2bW2NKYKOOXj3NIUNBDo49Vy1kQvG
dzCcU9drCsncF8b0GyKWz6orp22x+B661dxxVvbLe52By7rIuXhdtQcIPy3W
PDmU4Q1Q/qE8ntwx3a+kUQhryEO5dOkSE8vjoYRQIunYvHnz3r175a309fVd
vXp1cXFRp+b111/XOfKIPDsp2CFEJjmqhDWciqU8m43tQmeQgXsen86p5+Q6
LGlzwjM9nMP1RjabH8+vZ6JWHMcHS8ZuFC4SrlDN0iUk0b8aAwTY/bq0tCRj
4/jx49LViEYI/y0Ug3V1dQ0MDExNTelSKyu9nEHqpnLbDORK6D1HNNxF+/jx
Y1kaEo3V1VU9CX4NGRaXhno6utvtPdADP+LDYvE0H70TgQSrCzPKCKpHnroh
1wMJCWLwsNJJKXtgZWgRDvUOx4hGCH8HWR379+/3GNK5uTlyKwwEo6mcHKvz
KVzlmfKNsHD0dMmWdNAOpm/3ChU0gXgIfg3dtdaNcjW8B5PyXU+rO+Pc5EI5
R7mFrQzVegiqpx/jc+GbeBQqo73IFhGWkW6ww1G+mzyUF/3fEsL3HUkHE4wH
BwdpXWGkD4UcUgPphvSBCWDuT9EBdAstoYzHVeSkSEbYXuR56axKRGS8+b10
H7zqCLXx/RghHo2uG5YIRKOcEVTqhnO+HhJCtJa0MqtesKlwUubn5+Wy7dmz
J8ZGCP8T5LAQ6zh37pykQw7LnTt3iFTIfqDLnpm9pEWolZJWICysHcFVweSw
vWGvQd+IaCBBbp1zRsbHnIil1y5ggZQ1YNRguBrNw07LZdalblBmZmuHplci
vaRf9YJlZclTw9iIboTwP0TSwURBSYdO0OLi4vLysk4TAuKGWUKdXLUlAjIt
5JXQE6dPPblC93tIKckXPALyNfgpLu1ws61Tut7wgm54i2tNHy7P42gnWsRP
dE0aiuRn5skpbOOjXrnsK1lZvb29DQ0NEY0Q/iGY8CPpkMMyOTl57do1Jgoy
TlD6gHqwLJLacix8gW+CbtBgi5JgXdDJwnAPOzvoBjM89SUfbWaqezPU02Lx
vWMg5SAymx88g4vWeDZ6/D08GdHw7FC9SHKvQ0NDmR0awj+HDk5dXV1bW1t/
f//w8PDo6OiVK1ckIDdv3vQUdPpWXPYgPdH9+kgvLf0dMlFoeGEoEN+CFNDC
JimgH5bQK/YG/WVWm3KjHO6J53t4ppDnqDvgaekgcouHxW4UtM4dr3qd9+/f
l2Wl3/HIkSObN29+0W9/COsV5oMdPHjwxIkT8lkuXLigazH9szpiNi0cC5Vi
3K9ACy3GhnRDDo7sfxkqtj10eJk1im7QTcYRxsAo60uddnE/mucQYnWgGwRD
iHOiDN44SQkrquWkD8li3Cu9vPn5+fHxcZlYaV4L4V/n5Zdf3r17twwPqUdP
T48EhGyLTHoZHm6epdBLoiF9QFLQDVkgeph05tatWzqejD7WWdbB945IqwT2
AJ/KzcFuwXMhvkGixPVdZFvQDc8Xwv5BcPCMyvnkDBlmXqgcE722ubm5iYkJ
/VKyNBILDeG7glE/Bw4cOHr0aFdX16lTp86ePXv58uWZmZmlpSWpgSwKyYVE
QydRn1pPJBq6U1+VbkhnJB26R4cXDwJ8rnFJmOahTxEimmXIyLgNzaPGCHGU
c7pM2cnrsi5p0cMKvCTa1i5evCg9lFmVao0QvnPk9Tc0NBw+fFjScfz48dOn
Tw8MDLA1UgdQdr6U4ebNm7qhKzgz0u9V0A3uR09kQjgqQmCEBSUES4lhyjag
bAy/hrQvX+Uj0kHlJ7qBMrjWnZinhIKaE+wZyrr0kvR6rl27Njo62tfX19nZ
2dTUlM61EP5NEPHYv39/e3t7d3e3DA+dO4IeEhBdu6empq5fv07+RWdT1oi0
Qh+lJNIWClAJkLoWnR4WnBSP+MBPKRMxruosizrKoaDeNOeAJzkdKkmItzCZ
XK9Hr1BmxsmTJ5ubm2VKJXsSwr+bTZs27dq1S4b9sWPH7LZIQGR+yHm5WmVy
cnJ6elpmBh6BbujAyp3B+9BH3WYyIW2zmB9SAK8vYV0LC02sGy7TwtlBNFxp
xnA/6tOIZsjAIOqin7W8vCw1k4Ek0dCL3717d9YnhfD/DRY5oR6ETOW2oB6D
g4M6ldIQfWReOkFRoH5MH3VbMsKSOJ1ub0ZzbteigYdSDhinrsNNrKw4oeqM
wYYUnum23CL9OP0gAizSLqnZ+fPnbWZENEL4/49sD3kuTU1Nra2tHR0dsvx7
qkhGpB5yYVglyQ5rzi++jD0XPAidcfpnCUqU+lBuXfQ0D8RBNoZMF2yJMgVM
8FN38uPkQ42Ojkox5GHV1dUlmhHCC+THVWTw6wrO/lm5AMePHyd8eubMGVkg
lI0RA9GNsQr6VCeajAwHn7OP2YDTAa61cBeMd7aS552vQEGanoFnk2LI2pHN
I/mSRSRlQzFiY4TwYil3suuGzI9t27Y1Nja2tLRIPdoqEESVI9Pb29vf369T
TAGqkHpISaanpyUg8iAoKqPSQy6MLBBvdSHDyx5bqsssETJj9Aw8DwFYyYXs
GT2bDIzOzk6pmVwqvbYoRgjfW3Q8dVnfuXNnfX19Q0NDfYXdu3fv2bPn4MGD
ZHLlyEhDhoaGLlWQTSJhkX0i70Z6IvXQ8bdrI1tCUqA75fL4/hsVpqamLl++
rKciPCtR0lNJoOQ0IReJfIawjuC0vlRBMrKpAp9u2bJFLoPO9ZEjR2QPnDx5
EtHorCAFkA6MjIxgjYA+lZVS6oweI3NCfpB8EFk1hw4dOlhh3759kin9iGRX
Q9gwkIuRkmzdunX79u0yS+TX7N2798CBAzJF5OA0NzfrBkne7gq6IT2RvyN9
0Jf0AD1YsqPv0vfKqNixY4eEgthF5CKEjQoHfFMVHfnyU+4R8jK4UZorfG8Z
Wgkh/GCxILzoFxJCWGfE0QghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIfxD/C8dd5f7
    "], {{0, 391}, {360, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{360, 391},
  PlotRange->{{0, 360}, {0, 391}}]], "Output",
 CellChangeTimes->{3.643630231195827*^9},
 ImageSize->{364, 391},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}]
}, Open  ]],

Cell["\<\
(Note that in this notebook the above output-cell has been saved as a bitmap, \
but normally it is equivalent to an Image3D object that can be rotated and \
interacted with.)\
\>", "Text",
 CellChangeTimes->{{3.643632355388887*^9, 3.643632412380899*^9}}],

Cell["Import only the header:", "Text",
 CellChangeTimes->{{3.643630316048932*^9, 3.6436303186134377`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"header", "=", 
  RowBox[{"Import", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{"bert", ",", "\"\<mri\>\"", ",", "\"\<brain.mgz\>\""}], "}"}], 
     "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"\"\<GZIP\>\"", ",", "\"\<MGH\>\"", ",", "\"\<Header\>\""}], 
     "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.643630321063027*^9, 3.643630330741455*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"MGHFileVersion\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"Dimensions\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"256", ",", "256", ",", "256"}], "}"}]}], ",", 
   RowBox[{"\<\"Frames\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"ImageBufferType\"\>", "\[Rule]", "\<\"UnsignedInteger8\"\>"}],
    ",", 
   RowBox[{"\<\"DegreesOfFreedom\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"Spacings\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", "1.`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"VOXToRASMatrix\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1.`"}], ",", "0.`", ",", "0.`", ",", 
        "5.39971923828125`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.`", ",", "0.`", ",", "1.`", ",", "18.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.`", ",", 
        RowBox[{"-", "1.`"}], ",", "0.`", ",", "0.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.`", ",", "0.`", ",", "0.`", ",", "1.`"}], "}"}]}], 
     "}"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.6436303314462967`*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Surface Geometry Files", "Subsection",
 CellChangeTimes->{{3.6436303495739927`*^9, 3.6436303523637657`*^9}}],

Cell[CellGroupData[{

Cell["Usage", "Subsubsection",
 CellChangeTimes->{{3.643630360373529*^9, 3.643630360834817*^9}}],

Cell["\<\
FreeSurfer encodes its surface data in geometry files named things like \
\[OpenCurlyDoubleQuote]lh.pial\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]rh.white\[CloseCurlyDoubleQuote]. While these files \
should usually be loaded through the FreeSurferSubject interface (see Section \
7), they can also be loaded directly through Import, and exported through \
Export, by using the file type \[OpenCurlyDoubleQuote]FreeSurferSurface\
\[CloseCurlyDoubleQuote].

When importing a surface, Neurotica will, by default, yield a CorticalMesh \
representation (see Section 5) with relevant meta-information attached to the \
object\[CloseCurlyQuote]s options. One can also import just parts of a \
surface file, such as just the FaceList, by appending it to the file type: \
Import[file, \
{\[OpenCurlyDoubleQuote]FreeSurferSurface\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]FaceList\[CloseCurlyDoubleQuote]}].\
\>", "Text",
 CellChangeTimes->{{3.643630362938506*^9, 3.6436303672586*^9}, {
  3.643630833911109*^9, 3.643630890430729*^9}, {3.643631452313712*^9, 
  3.6436315091373796`*^9}, {3.6436320079195013`*^9, 3.64363204126495*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Options", "Subsubsection",
 CellChangeTimes->{{3.643630901286598*^9, 3.643630901939301*^9}}],

Cell["\<\
The following sub-parts can be imported from surface geometry files:\
\>", "Text",
 CellChangeTimes->{{3.643631308302421*^9, 3.6436313323094597`*^9}, {
  3.643631438319256*^9, 3.643631450929757*^9}}],

Cell[CellGroupData[{

Cell["\<\
\[OpenCurlyDoubleQuote]MetaInformation\[CloseCurlyDoubleQuote] imports only \
the meta-data contained in the file.\
\>", "Item",
 CellChangeTimes->{{3.643632000441225*^9, 3.6436320025082903`*^9}, {
  3.643632044493174*^9, 3.643632051190288*^9}}],

Cell["\<\
\[OpenCurlyDoubleQuote]VertexCoordinates\[CloseCurlyDoubleQuote] yields only \
the n x 3 matrix of the vertex coordinates.\
\>", "Item",
 CellChangeTimes->{{3.643632000441225*^9, 3.6436320025082903`*^9}, {
  3.643632044493174*^9, 3.6436320694602823`*^9}}],

Cell["\<\
\[OpenCurlyDoubleQuote]FaceList\[CloseCurlyDoubleQuote] yields only the m x 3 \
integer matrix of the triangle vertices.\
\>", "Item",
 CellChangeTimes->{{3.643632000441225*^9, 3.6436320025082903`*^9}, {
  3.643632044493174*^9, 3.6436320869203873`*^9}}],

Cell["\<\
\[OpenCurlyDoubleQuote]Data\[CloseCurlyDoubleQuote] yields a list of rules \
for \[OpenCurlyDoubleQuote]MetaInformation\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]VertexCoordinates\[CloseCurlyDoubleQuote], and \
\[OpenCurlyDoubleQuote]FaceList\[CloseCurlyDoubleQuote] instead of returning \
a CorticalMesh object.\
\>", "Item",
 CellChangeTimes->{{3.643632000441225*^9, 3.6436320025082903`*^9}, {
  3.643632044493174*^9, 3.643632120667417*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.643632124582226*^9, 3.643632136316257*^9}}],

Cell["Import the white-matter surface from example subject bert:", "Text",
 CellChangeTimes->{{3.643632141086076*^9, 3.64363217358775*^9}, {
  3.6436322963264427`*^9, 3.6436322978218822`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"bert", "=", 
   RowBox[{"SelectFirst", "[", 
    RowBox[{"$FreeSurferSubjects", ",", 
     RowBox[{
      RowBox[{"StringEndsQ", "[", 
       RowBox[{"#", ",", "\"\<bert\>\""}], "]"}], "&"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"whiteSurface", "=", 
  RowBox[{"Import", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{"bert", ",", "\"\<surf\>\"", ",", "\"\<lh.white\>\""}], "}"}], 
     "]"}], ",", "\[IndentingNewLine]", "\"\<FreeSurferSurface\>\""}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.643632178391953*^9, 3.6436322039071207`*^9}, {
  3.643632300162681*^9, 3.643632300567409*^9}, {3.643632334511451*^9, 
  3.643632335563452*^9}}],

Cell[BoxData[
 TemplateBox[{RowBox[{"\"CorticalMesh\"", "[", 
     PanelBox[
      TagBox[
       GridBox[{{
          InterpretationBox[
           StyleBox[
            
            GraphicsBox[{}, ImageSize -> {4, 0}, BaselinePosition -> 
             Baseline], "CacheGraphics" -> False], 
           Spacer[4]], 
          StyleBox[
          "\"Vertex Count:\"", FontSize -> 11, FontColor -> GrayLevel[0.5], 
           FontFamily -> "Arial", FontWeight -> "Thin", StripOnInput -> 
           False], 
          InterpretationBox[
           StyleBox[
            
            GraphicsBox[{}, ImageSize -> {2, 0}, BaselinePosition -> 
             Baseline], "CacheGraphics" -> False], 
           Spacer[2]], "133401", 
          InterpretationBox[
           StyleBox[
            
            GraphicsBox[{}, ImageSize -> {4, 0}, BaselinePosition -> 
             Baseline], "CacheGraphics" -> False], 
           Spacer[4]]}, {
          InterpretationBox[
           StyleBox[
            
            GraphicsBox[{}, ImageSize -> {4, 0}, BaselinePosition -> 
             Baseline], "CacheGraphics" -> False], 
           Spacer[4]], 
          StyleBox[
          "\"Edge Count:\"", FontSize -> 11, FontColor -> GrayLevel[0.5], 
           FontFamily -> "Arial", FontWeight -> "Thin", StripOnInput -> 
           False], 
          InterpretationBox[
           StyleBox[
            
            GraphicsBox[{}, ImageSize -> {2, 0}, BaselinePosition -> 
             Baseline], "CacheGraphics" -> False], 
           Spacer[2]], "400197", 
          InterpretationBox[
           StyleBox[
            
            GraphicsBox[{}, ImageSize -> {4, 0}, BaselinePosition -> 
             Baseline], "CacheGraphics" -> False], 
           Spacer[4]]}, {
          InterpretationBox[
           StyleBox[
            
            GraphicsBox[{}, ImageSize -> {4, 0}, BaselinePosition -> 
             Baseline], "CacheGraphics" -> False], 
           Spacer[4]], 
          StyleBox[
          "\"Face Count:\"", FontSize -> 11, FontColor -> GrayLevel[0.5], 
           FontFamily -> "Arial", FontWeight -> "Thin", StripOnInput -> 
           False], 
          InterpretationBox[
           StyleBox[
            
            GraphicsBox[{}, ImageSize -> {2, 0}, BaselinePosition -> 
             Baseline], "CacheGraphics" -> False], 
           Spacer[2]], "266798", 
          InterpretationBox[
           StyleBox[
            
            GraphicsBox[{}, ImageSize -> {4, 0}, BaselinePosition -> 
             Baseline], "CacheGraphics" -> False], 
           Spacer[4]]}}, 
        GridBoxAlignment -> {
         "Columns" -> {Right, Right, Center, Left, Left}, 
          "Rows" -> {Right, Right, Center, Left, Left}, 
          "ItemsIndexed" -> {Right, Right, Center, Left, Left}}, AutoDelete -> 
        False, GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]], 
     "]"}]},
  "Row",
  BaseStyle->RGBColor[
   0.33333333333333337`, 0.33333333333333337`, 0.33333333333333337`],
  DisplayFunction->(#& ),
  InterpretationFunction->(RowBox[{"Row", "[", 
     RowBox[{
       RowBox[{"{", #, "}"}], ",", 
       RowBox[{"BaseStyle", "\[Rule]", 
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            GraphicsBox[{{
               GrayLevel[0], 
               RectangleBox[{0, 0}]}, {
               GrayLevel[0], 
               RectangleBox[{1, -1}]}, {
               RGBColor[
               0.33333333333333337`, 0.33333333333333337`, 
                0.33333333333333337`], 
               RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
             True, FrameStyle -> 
             RGBColor[
              0.22222222222222227`, 0.22222222222222227`, 
               0.22222222222222227`], FrameTicks -> None, PlotRangePadding -> 
             None, ImageSize -> 
             Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            "RGBColor[0.33333333333333337, 0.33333333333333337, \
0.33333333333333337]"], Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
           Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
           With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = 
               RGBColor[
                0.33333333333333337`, 0.33333333333333337`, 
                 0.33333333333333337`]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["RGBColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
            BaseStyle -> Inherited, Evaluator -> Automatic, Method -> 
           "Preemptive"], 
          RGBColor[
          0.33333333333333337`, 0.33333333333333337`, 0.33333333333333337`], 
          Editable -> False, Selectable -> False]}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.643632189483245*^9, 3.6436322066844387`*^9}, 
   3.643632303762985*^9, 3.643632338999703*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CortexPlot3D", "[", "whiteSurface", "]"}]], "Input",
 CellChangeTimes->{{3.643632207725136*^9, 3.643632213559682*^9}, {
  3.643632339573566*^9, 3.64363233999853*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3WnbZVV173/P/5wH5238X0ABJV0JFD1FUwhFW9hQVoFoBMWuRI0SicbE
aDQxMcZo1Kg0Kj4479Dzzf6ce2RxF000yC5gjuuqfa3a91pzzbX2+I0x5pij
+f8f+/T9H/v/3vOe93z+f/dx/7kv3vS5z5378gP/q//c/OXzTzz2Pzv4P//j
Pe+5o3//cfz7RYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGi
RYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGi
RYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGi
RYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGi
RYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGi
RYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGi
RYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGi
RYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGiRYsWLVq0aNGi
RYsWvW3pueee+/KXv/zNb37z3/7t337+85//zd/8zb5ntGjRoj+Yzp0796lP
feozn/nMZz/72c9//vN/8Rd/8Xd/93c//elPf/GLX7zwwgu/+c1v+vzxj3/c
f/c900WLFr0xPf7445/4xCee2lHQfvrpp5955pnvf//7P/rRj/71X//1Zz/7
WYh+/vnnf/nLX76wow7S4/ue9aJFi15B4Tcb+/z588H5Ix/5yId2dObMmbNn
zz722GNPPPFEKjvD+3vf+953v/vdtPa3v/3t0J3u/ud//uef7ih0/2pH/XU7
cpcnFr7+9a//wz/8w09+8pMMeN9/9atf7b+dv4enXbTonU6p5j/7sz/77I5C
d6D+wAc+8OCDD95///0PPPBAB6dPn2aQf+ELX8gUf3ZH3/jGN/72b//2Bz/4
wQ9/+MN/+qd/+sd//MdUeTj993//9wDen1qD903C4cMf/vCTTz7ZheG6v2a9
96fkQ9Z7x//yL/+SoNj3O1i06J1ALZkD6de+9rWv7ChN3fI55KaXQ+JDDz10
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
FbTT2k1jctl6ip66z36RLKIeXEnDJGrzn2AeQqbbrcSudzZldmrMmuYKmwKY
qZ7XuSr+STWkL8JCuEs5plVDkKq/oiLpbpEndAe/UCwdpsJF3GhhO3tMTUZk
hRJDMhBToKnRZqhGH1DHnDTd9LKBa7kbUTzfKh6uQ6UKBjrrff/73w+hTdgW
UtNo8ExxvuXEQso65Yj/GfnCLxMvyieGqfDFeyByrJOFczO5WeBNr0fuzARF
16oPrM5Ds8okbvzpIcIIEX0qgM1OvWRtIXm8jgLeuBy50RQ87KAH716dk8xh
OPUrZOT0jdh1uSSRbfS3iMkWveUUrOQBpQV0cwsp9ob69V/rqi6Jl9IUoSnj
Oa0nV0I5ejX5pzbgNw5IzGfY5D2LFQMRLRlyr7rqKrux4itCmajIqTWUdQ1Q
KqKMe9xGNsnQg3TOwzvK2g/XTYBTPfiEnU4OJqJV2eE9iG0jpfg7CDVSJ6hg
iRI9VKiRFR4FrrSnXA9rai9NPlf36iDU96R26KhjznBtv3obCQ2Radb+bPXG
lENtp77jyWITxcoOV3jcOgi0e2SegeCv8qrXnvk9Fs62g/CqjPROpdRiOi7G
4Jvij+L7jfFSFq96VVarakLxUmAMd7FTGLGvFCNtu2wg8dsK9ascGHN237Qk
R7RinqGYjlYP0Pd9KYwqASKyonvF5LEuU1z2RDNJUNj+tjoQb6ZQpz0mbevj
8xYRTUkVlNCh0oKVfnZ4i2iVl9Qi/ocdqR42VdSE0qmK5hYW4zbK++zLLhGA
OqWNONnExjRndriCS5b/NusloE0onUYGzIYQ3RtIU4tUEVnam2SiJKYEwU5G
SdY+n954JHw2q9eR24vevqS/W7a3pGDuXNWzJepijAsvlNNhiSciIu7KOk0R
B17l6BF0q7QZosVTdXnAiQ+TD4p+wO+ll176vh0JjLSh3Pep8sDeVNOkXRIz
a9elxd42vissKOWnQmm4a/49iKiSHqonkqpJXcbzSoSlr7nE5YcmtVL0Tduq
RPJFjyzWCwWr8KUndS8wjGjhZ8etCzMJekbVTmBKdIr3nJnROZMhohSSN9+D
yNqW/hauJbd2st9F3jd3WTPvAK5tTzfzrCZyo59jCq0ooTa54epFvPVct+hP
TXFyWkmyj742aYfZQsKihxzjdKVAskCRakjBhbjgljINTVI2FAahr0OHgHCX
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
vmIQq+rxKPloZSetleG0szz5Htr2hbdzQFqO84yVJlxYhces9a6CXlLkxrWV
I4ndWOYJTL0/ZaFm1i25ryl/e7Ue+yya3pbB1Gs6P67rMWZey+zg9vMumGwm
T5srmrTYmwMHDugYY5fwuBYSXDXiaYHVrlzmojam67xhqiC6bGgG1D00Jqz8
i3aKm/NuU7uwgeJkGhAy2Zld7/0QfhdELn7MMMLzca1m+h2/ahK1ft4yndd+
qar3tlTexHykwq9sVDPLg4GwOI5lfvRyByDpAI86zvb4VSCmpMXioFKldq7H
aQl2rcRDaFEoFdwUPwrEapkduVYdjSU7xtHFboRy3ZI3m3IWko2qxqIe8nar
PaWJjC0BfCasJKZYXy2tyoCm2+Ys51a5z2EJI+iDL4IFPmevXc4x/nRDcuD9
NzWGleBmrPCJ+YsDioQxCLS85guysKV66fBSM6iYTuqFkbHNLx+2z96svJRM
f7p6QmpJJuonV2c73qYhwh1uISLfppHQL+Wi7pUvqJHcG/dkeH1lg7lBW8+e
Z55d9mR6APzoDemeAQ/qHXfcwbwWItIeU9GYLbQ2bbzlllsY4rIzVoWpFUxS
kNiqMr8iGKv15uqeNJeurt8yhSwj1q+wz8x9tjhHom3cVoO1k9OL120r63xC
363LmWUYN3xH83dPuFOqZIcaJSY33698WMKMGsSaBLdLiTp+/Lgelru6+mnE
cBW3y63QeEHpSR22/VRB8Gw3Mi6J/rVr1lzYATi4SlSvarZcl+985zvVR+NT
6afvpVn3IX+7hbuW4BK40GbRBa7iRqGzFnRS38rH8brrR29wGcGQoaSf28Nv
almotkfIk1mIdcK8OMIEZHaLtUiuv+U1j6XTmRW2eNXIu6QqTalYzbvbOF7p
w55PjzQiuG4R44syumRI8cyn+lXh18rGxd8IjoCe/5wHBOeyevgNC6xqFXsL
/PZhgW1I7Yr6VlYXc1YcqQP8t2XqFrqTf6lSdnVD3CIGepUySepQtzVSLoZx
kvn2XVrKaxt9UVtvo3ZT6bI53ITK3i1e+44VDTFSGVf5CX6j9vr9Ihp3OQfr
W5rGTdK72944vdVLTbmBurR+cb+Uu7G7J27wRSCdBIaM34vgHpuq0nv+PcBV
gr7uuusM7x6VbAFWVuY1q50/ieYYURZkoZ6/vViOedWwWDXvMLQZd2GZRTP+
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
HMb3evVniYmPbSkaP42lmdeKYBbUWlzNdiD6NuL1csibcfu+xgoNGsFK1h5j
/XXGqn2TvS43ii93aIMKWDOCxWJ9+OGH2JRWSalSS10nGjJwHjM88my3ft5W
VzJoWiiuLFkhB2TQqye7ptVLzDwj7hLGmcXowrHaDILsJl5su7s5wFW89RUw
BXMrmJuH32pVQk+FglTBUztldyb5VZ5j0apei4xdznnl8FI/0FpFuFZZeeND
db4wlAtxCTexUvfMWcosw8QEXtz/bVWZS9LHtk22z+N1iyGO3+a1pjS764dr
sDNwwtstSiyroT6lUK9V6WJZUNWTX4pQGgJYhmJtCjNhi9cIxcM0SvhXK9iL
1xm1VXQS0VpzXvPrVdy20kLeuJx5QXP5psDpnKwo1tayUCnpVNf1LTJqnn/U
4HUYrxypexnrlNlWafjeYHfZqUmXZ471ueJ3lZNu3b61+iK7suDt/VUmuKKZ
TnGX1n6ZO9C6oq+w6FmYqzvsJ2iOb/hqoTJqp/5qnNxO+t6mdia7sLrsdVkt
k179NUeBE3zUdPv5kEWQhvRD2sLmnHsm0/TI26x+VvGKKSAtiWzH8wHYWf9q
CzhN4EpBeePP/rVdUzKmZAoLsagiVfP3ItbAv9oKb7+swp3t6ayprgf7qotx
dEy2OW9FBxavY2IJkiU2Foxt5EkHTA/TOy3FMlRzZC3abxcSXcXo9STd9RJh
EhNLCI7118lEU92fqG3kyanw6hcpkOBbGzSzYJH/lNfLIUdtB6ydL4OYwSEx
ul0/XIOd4cCBA+ULJx/k6cpG37GF9kkdVkpXS8Eecs9w60srCLwwUQ85i3P8
+PE0iBLRTac0GZYE/wt93LaATcZzbh2PCFnSwlcaBNpQbg5eDkhT4LzxMkdY
7TQMr9pEjDQu+aR5REY2X7oreqNLRZQhcvvy7SlXtG5JTLQZ98c//vEPF7Hm
DrqncYNeuWnmMkYYLWT6tRnZk3ZBPe7QkSNHfMgb+ay/2p9SO5PNxPvt3HmD
8OV4WgZfFaT0xfFu6pogZ9KC6Ny6U2HJpqhMGBbkZHplfTjSSwd7GV/wmBkH
PMxIWtmdRHSbj5eCtEJW1g5XIkuOZH9RIGegEl3Frqy1tahUyxnuSkM20U76
DJosVzDUw49B/qXbiQ9UU1vLqNfKWDqHS7ZRgwn2LvUYXf3jRWyH0OhJ4g+O
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
j2lzzWuJ1a0MpH7cftkKaevVn65b/iYfo7R0V2fZ01L2r9m0Gnw5cdVFAUAo
BTialO+8NAk9/yt7iGX0kCOaJ78iy21ArwCVVXcPx5P0L8cBtbPaVf5iJVnV
KtT4E6+LJ0/8M14X/o13ldtG5OS8tGa2yxNI2xPfE+Rn01NPrSRu8k1YiYZ6
myhEW+eVydDzAsVdLr2X1BIqRums8+fPa7zQblMJ7vcrr7xS1rlGdv3rDQZ/
Ee3PogMbiizlSqyqW2mD5xJva31wiQsOLybT+zayL6m1d9WmLGbT3rxxKFi6
urR4nQ6wBlNQKeCkevSlZPrTIGNyzenFa61pgYORmL9u8+1Nz9tQw25OhW+U
kphRxaW1jMJa06xv58hqakTw9FF90qKBIcv7ykYX2s2TMXqkRrhEIYwDJim7
/vUGg38P5sJmu57ejHWF1z3zrV9Vfh2LF7VbRCpQpD0phjVqb8eKm6uueK1y
mhhrTMQXNrea15Wy4ickjpS4fapijRIoiXcMJV4zwRid2gM3uwWBpr3mzg01
+sYhZ69bFuCQcwZwtkyTptjJ+SYJ3iYaLhfCCqx/muQ8bf18dAN+uNED2Y0M
5bzs+kcbDP4DoCrTxlVGkCJFo3ah1OnurpI6WWGDAIc5UQJMbJa6ndW1qI2M
a/VsqfIytfG6xW3+OdZwtitT5epV79K4oUaXsIlH3aJZGeItiVeHTof10OW4
7jqD2o5c0r64j78doJOpHabXnQR60gfpM/C902cwK9FPjG7zqxpb5gIJoDl+
1z/aYPAfg3fNzKFAtRrT987NXiJm26q5XOgWuzClCjgO2M6jXN64lptiIy+r
jeBHjx4t3Wkp6qN5xTuwu9TRGJckYPPZ0q9SUajIHbtppoCwrtW2lHEGrzGx
AgfAG9+3b1/1uepexbKx2LixMklb3zaAGFV0wKilq25FOgmpB2vEnWHZfdld
/1yDwWdAsVUVpDh79myhmEmAIlHO7UqIcAyKJZvA0iWEUoLVInjUbnU6RoMZ
K1636Vzet/8ysv5VXmR6p8WxIFoFCNpZq5J7y1y51gWvtpSd3LcBByt5IFXA
8Yar4Fs4Bf1NGVorW2qoPjGAtD1dHF21aI0PDz/8MP+fG4PUJWIbEPRq1z/U
YPBXwpOcrg5Ti3RFphVxmuH2eQGZUFmftWe0FFQKBSkGJikDTa1NrmpflkHm
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
f/fdd8s3YZp9r4ajcjOTb2rJbte3fDC4vGAQq2aLfefPn79w4QIDxwim/InI
SangciooK9Vrm9f+xGvDwqJ2lbOOHDmySvNwvP2ZMkPULmO65a+oHVI+qU6u
05fLjdrMdLxmu/vcIMD4/tcN0La6HlXSxPRkW3wpX81E/gc/+IGDJ450cMUD
43jgKIBKL774YgIjmPXYY4/hQoJgiQw3uS7VaxW8zkuvIgBOmcMuEUIcLOJ0
1dBcVjv1FXRuWbvXKton789eM9ZOyavP5Y7alflYU2znsstJi3uTDPLbb7/9
0gb+LCSGjWbWV1WRXd/1weDy4uGHHy5dAoM88G+++SZjh0r4yK5Vug4vPvjg
gyW+fQmv18Lahx9+6Nyf/OQnaxkN9UyfK2rfEreJNo5vsztU0T6O+/PQoUMZ
6ybs2kkRxStL7UO8TvvIIKDbLloKZ/1MAI3L/bOf/cxwhNpPPfXU9773vdMb
7PqWDwaXHWxi8vucZ1TCDjb3G9/4BgbxnHnjRX2vonUfffRRtQNQu42w9sKq
u4dTJravvvoqrrWMZojge+NydXnw68yZMwiO6cw3o3z48GEsrqI9diN1Fbcd
gLx6VdGfrHapnZqtvlgeu2sVGppARGWsW4Rnx5lv1F7l/IbXg68DUIlde22D
0jc4tDxwhMKgBx54ALUx/ac//SmCFEKG42mXNcvOXqM5F51Bb5HK+IDCaZSx
qvir5WrblXmB4xlQXKvQdrqI6TYYByrBicJ7NmD9cbklcW16w2N3isHHrFmf
mey24OO12bRGjFfeV91DB1zRtXZ9yweDyw6mEMUQGa+RDqeY75dffrloE1TC
ux/96EcYjS+MNY44GIPMprfTMNvIZrITLOLP45SWm2uvvIwGEKyvqGUlsYo/
YU85DNWmZ4Krms1MrzoCBbZBY071fCt4XSk9Ladgxg93CYNJigrVFPC9XG7X
93sw+ILAhFXnGg1RhtFEKyyLTRiEO6xhJfZ+/etf/+Y3v/nlL3/JiLPLSJRs
aQvm7LhjYpZT2OUaYbK1WeT2ChnlORcyiuCOLN6sIDQEdABHGrVvvvnm6667
Lp3SFtu9roh0Y4J2Stpq3U8/EyJm+pt660wlvDW465s9GHxB4O5iLlqZ0t57
770cXVNdpnDp/TKRLClfF2tS2mep2eVyNCAdszJBHPPOO++Y2DKj6Imz7L55
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
MBh8Nvw/Ri3ong==
    "], {{0, 432}, {328, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{328, 432},
  PlotRange->{{0, 328}, {0, 432}}]], "Output",
 CellChangeTimes->{
  3.643632219385766*^9, {3.643632287150488*^9, 3.643632313241124*^9}, 
   3.643632350940585*^9},
 ImageSize->{332, 432},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}]
}, Open  ]],

Cell["\<\
(Note that in this notebook the above output-cell has been saved as a bitmap, \
but normally it is a 3D Graphics object that can be rotated and interacted \
with.)\
\>", "Text",
 CellChangeTimes->{{3.643632355388887*^9, 3.643632381319668*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Curv Files, W Files, Annotation Files, and Label Files", "Subsection",
 CellChangeTimes->{{3.643632451261834*^9, 3.6436325072865467`*^9}, 
   3.643632762965898*^9}],

Cell["\<\
FreeSurfer stores data in many other file formats, all of which are explained \
in this section. Although these formats have been well tested for importing, \
only the curvature and w files support exporting; generally, it is safer to \
export surface overlay data as an MGH or MGZ file instead.

All of these file formats store surface overlay data in various forms. In \
general, it is not recommended that these files be loaded directly; instead, \
use the FreeSurferSubject interface to gain access to data such as curvature \
and parcellation (all of which is automatically attached to surface meshes as \
properties by the FreeSurfer package).

If you need to directly import these file types, however, this may be done \
using the following Import types:\
\>", "Text",
 CellChangeTimes->{{3.6436325361995153`*^9, 3.643632689751191*^9}}],

Cell[CellGroupData[{

Cell["\[OpenCurlyDoubleQuote]FreeSurferWeights\[CloseCurlyDoubleQuote] for \
w-formatted files.", "Item",
 CellChangeTimes->{{3.643632710687688*^9, 3.643632721807521*^9}, {
  3.643632757250903*^9, 3.6436327573635387`*^9}}],

Cell["\[OpenCurlyDoubleQuote]FreeSurferCurv\[CloseCurlyDoubleQuote] for \
curv-formatted files.", "Item",
 CellChangeTimes->{{3.643632710687688*^9, 3.643632768359796*^9}}],

Cell["\[OpenCurlyDoubleQuote]FreeSurferAnnotation\[CloseCurlyDoubleQuote] for \
annotation-formatted files.", "Item",
 CellChangeTimes->{{3.643632710687688*^9, 3.643632769867367*^9}}],

Cell["\[OpenCurlyDoubleQuote]FreeSurferLabel\[CloseCurlyDoubleQuote] for \
label-formatted files.", "Item",
 CellChangeTimes->{{3.643632710687688*^9, 3.643632787828672*^9}}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["NifTI Formats", "Subchapter",
 CellChangeTimes->{{3.643632818474416*^9, 3.643632820386343*^9}}],

Cell[CellGroupData[{

Cell["NifTI-1, NifTI-2, and CifTI", "Subsection",
 CellChangeTimes->{{3.643632823378604*^9, 3.643632827766337*^9}, {
  3.6436332188185368`*^9, 3.6436332213716593`*^9}}],

Cell[CellGroupData[{

Cell["Usage", "Subsubsection",
 CellChangeTimes->{{3.643632840321213*^9, 3.6436328407826014`*^9}}],

Cell["\<\
NifTI files usually end in .nii or .nii.gz and can contain either the \
NifTI-1, NifTI-2, or CifTI formats, all of which are supported by Neurotica. \
Note that importing of NifTI files is supported only; no exporting is \
supported at this time. To import a NifTI file, simply use the \
\[OpenCurlyDoubleQuote]NifTI\[CloseCurlyDoubleQuote] file type, or, for a \
.nii.gz file, use the {\[OpenCurlyDoubleQuote]GZIP\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]NifTI\[CloseCurlyDoubleQuote]} file type with the \
Import function.

By default, the NifTI importer treats data similarly to the MGH importer; if \
the NifTI file contains a 1 x 1 x n volume, it is treated as a surface \
overlay and returned as a list; otherwise it is treated as an image and is \
returned as an MRImage3D object.\
\>", "Text",
 CellChangeTimes->{{3.643632842897479*^9, 3.643632939794381*^9}, {
  3.643633101626175*^9, 3.6436331446128283`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Options", "Subsubsection",
 CellChangeTimes->{{3.643632941133068*^9, 3.643632941796784*^9}}],

Cell["\<\
The following file-parts may be imported by appending them to the file type, \
such as Import[file, {\[OpenCurlyDoubleQuote]NifTI\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Header\[CloseCurlyDoubleQuote]}].\
\>", "Text",
 CellChangeTimes->{{3.643632946094151*^9, 3.643632965399314*^9}, {
  3.643633018838018*^9, 3.643633022009646*^9}}],

Cell[CellGroupData[{

Cell["\[OpenCurlyDoubleQuote]Header\[CloseCurlyDoubleQuote] imports inly the \
NifTI file header.", "Item",
 CellChangeTimes->{{3.643633028298143*^9, 3.643633040082666*^9}}],

Cell["\<\
\[OpenCurlyDoubleQuote]MetaInformation\[CloseCurlyDoubleQuote] imports all \
meta-information, which, for NifTI files is only the header; this is provided \
mostly for parity with FreeSurfer\[CloseCurlyQuote]s MGH file MetaInformation \
import.\
\>", "Item",
 CellChangeTimes->{{3.643633028298143*^9, 3.643633083789822*^9}}],

Cell["\[OpenCurlyDoubleQuote]Voxels\[CloseCurlyDoubleQuote] imports the raw \
volume data only.", "Item",
 CellChangeTimes->{{3.643633028298143*^9, 3.643633098471088*^9}}],

Cell["\<\
\[OpenCurlyDoubleQuote]Data\[CloseCurlyDoubleQuote] yields a list with rules \
whose heads are \[OpenCurlyDoubleQuote]Header\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]Voxels\[CloseCurlyDoubleQuote].\
\>", "Item",
 CellChangeTimes->{{3.643633028298143*^9, 3.643633098464662*^9}, {
  3.643633155266202*^9, 3.64363317479648*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["GifTI", "Subsection",
 CellChangeTimes->{{3.643633226040716*^9, 3.643633227491599*^9}}],

Cell[CellGroupData[{

Cell["Usage", "Subsubsection",
 CellChangeTimes->{{3.64363323137269*^9, 3.643633231935359*^9}}],

Cell["\<\
The GifTI format was pioneered largely for use by the Human Connectome \
Project, and is used to contain surface data. Unfortunately, the GifTI format \
has been written to be extemely flexible and thus the combinations of \
importable data make writing a succinct importer quite difficult. \
Accordingly, the importer follows a few rules:\
\>", "Text",
 CellChangeTimes->{{3.64363323435397*^9, 3.6436332484391403`*^9}, {
  3.6436333002015038`*^9, 3.643633341038698*^9}}],

Cell[CellGroupData[{

Cell["\<\
If the file contains a single surface representation (1 set of coordinates \
and 1 set of faces), the importer will yield a CorticalMesh object with other \
overlay data attached as properties.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.643633349408205*^9, 3.643633412285479*^9}, {
  3.6436334709097567`*^9, 3.643633496844722*^9}}],

Cell["\<\
If exactly one piece of data is stored in the GifTI (e.g., just an overlay), \
return it directly.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.643633349408205*^9, 3.643633412285479*^9}, {
  3.6436334709097567`*^9, 3.643633524407227*^9}}],

Cell["\<\
Otherwise, return a partially-interpreted version of the XML parse tree for \
the file. This is essentially a queryable data structure that contains the \
entire file\[CloseCurlyQuote]s contents.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.643633349408205*^9, 3.643633412285479*^9}, {
  3.6436334709097567`*^9, 3.643633567333074*^9}}]
}, Open  ]],

Cell["\<\
The GifTI format can be imported using the \[OpenCurlyDoubleQuote]GifTI\
\[CloseCurlyDoubleQuote] file format specifier with the Import function. \
Exporting is not currently supported.\
\>", "Text",
 CellChangeTimes->{{3.643633731516032*^9, 3.643633753746271*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Options", "Subsubsection",
 CellChangeTimes->{{3.643633717959792*^9, 3.643633718657551*^9}}],

Cell["\<\
The GifTI file format does not support any sub-options with the exception of \
the \[OpenCurlyDoubleQuote]Data\[CloseCurlyDoubleQuote] subtype (i.e., \
Import[file, {\[OpenCurlyDoubleQuote]GifTI\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Data\[CloseCurlyDoubleQuote]}]). Specifying the Data \
option forces Import to return the XML parse tree regardless of its contents.\
\
\>", "Text",
 CellChangeTimes->{{3.643633816060644*^9, 3.643633874661828*^9}}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Usage Notes", "Subchapter",
 CellChangeTimes->{{3.6436339242742777`*^9, 3.643633925523073*^9}}],

Cell["\<\
Although it is often useful to import or export individual pieces of data as \
either NifTI or MGH/MGZ files, in general, it is suggested that importing, \
particularly of standard FreeSurfer data such as curvature, be done through \
the FreeSurfer package interface. This not only provides a much cleaner and \
clearer method of accessing the same files, but it automatically (and lazily) \
loads relevant related data.

For example, if one loads the FreeSurfer white-matter surface using the \
Import function, the returned CorticalMesh is just a cortical mesh of the \
white matter boundary. If one uses the Cortex[subject, \
\[OpenCurlyDoubleQuote]White\[CloseCurlyDoubleQuote], LH] function, on the \
other hand, the result is a CorticalMesh object with properties such as \
\[OpenCurlyDoubleQuote]Curvature\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Parcellation\[CloseCurlyDoubleQuote], and \
\[OpenCurlyDoubleQuote]SulcalDepth\[CloseCurlyDoubleQuote] automatically \
included. Additionally, subsequent calls to Cortex[...] will be memoized so \
that the Cortex[...] form can basically be treated as a static variable.\
\>", "Text",
 CellChangeTimes->{{3.643633928830366*^9, 3.643634079536544*^9}, {
  3.64363413721526*^9, 3.64363418633333*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Chapter"],
 ". MRImages"
}], "Chapter",
 CellChangeTimes->{
  3.643582888579666*^9, {3.643583009040053*^9, 3.643583021584004*^9}}],

Cell[CellGroupData[{

Cell["Introduction", "Subchapter",
 CellChangeTimes->{{3.643635649749913*^9, 3.643635650975807*^9}, {
  3.64363596142047*^9, 3.6436359626019087`*^9}}],

Cell[TextData[{
 "MRImage3D objects and MRImage objects are two datatypes that are nearly \
identical to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s native Image3D and Image objects, respectively, except \
that they also support and track data related to MRI scans, such as the head \
orientation. Additionally, unlike Image3D and Image objects, they correctly \
store and render data that is outside the range of 0-1, so voxel values can \
be preserved exactly. For most intents and purposes, however, MRImage3D and \
MRImage objects can be treated as Image3D and Image objects with a few \
additional features."
}], "Text",
 CellChangeTimes->{{3.643635653191823*^9, 3.643635819625153*^9}, {
  3.643635916949952*^9, 3.6436359524096613`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functions", "Subchapter",
 CellChangeTimes->{{3.643635965099193*^9, 3.6436359658984137`*^9}}],

Cell[CellGroupData[{

Cell["AnteriorDirectionVector", "Subsection",
 CellChangeTimes->{{3.64363621136329*^9, 3.643636214524146*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AnteriorDirectionVector"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}}],

Cell[BoxData[
 StyleBox["\<\"AnteriorDirectionVector[img] yields the vector that points to \
the anterior for the given MRImage3D object img or yields Indeterminate if \
none can be determined. AnteriorDirectionVector is also an optional argument \
to MRImage3D that specifies the image's forward direction (in terms of the \
brain). In both cases, the vector should assume that the basis vecotrs i, j, \
and k point in the direction of increasing index in the ImageData[img] \
matrix; i.e. i, j, and k are the vectors from the center of voxel \
ImageData[img][[1,1,1]] to the centers of ImageData[img][[2,1,1]], \
ImageData[img][[1,2,1]], and ImageData[img][[1,1,2]], respectively.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436364947308073`*^9},
 CellTags->"Info3643622094-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CoordinateToVoxelIndex, CoordinateToVoxelIndexTr", "Subsection",
 CellChangeTimes->{{3.64363628034776*^9, 3.6436362949505787`*^9}, {
  3.643636325809515*^9, 3.6436363271706753`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CoordinateToVoxelIndex"}]], "Input",
 CellChangeTimes->{{3.6436368742338943`*^9, 3.6436368780181227`*^9}}],

Cell[BoxData[
 StyleBox["\<\"CoordinateToVoxelIndex[img, {x,y,z}] yields the voxel index \
(i, j, k) in the given MRImage3D, img, that corresponds to the given (x, y, \
z) values. Note that the coordinate may not be even integer numbers; use \
Round to find indices. The resulting indices will assume that the x, y, and z \
values are specified as coordinates in which the positive x, y, and z axes \
are pointed in the right, anterior, and superior directions, \
respectively.\\nCoordinateToVoxelIndex[img, {{x0,y0,z0}, {x1,y1,z1}, ...}] \
yields the voxel indices for all of the \
coordinates.\\nCoordinateToVoxelIndex[img, coords, spec] performs the same \
conversion but assumes that the x, y, and z values are specified in \
coordinates in which the positive x, y, and z axes are pointed in the \
directions indicated by spec, which is identical in format to the second \
argument of MRIOrient.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436368800798264`*^9},
 CellTags->"Info3643622480-4641653"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CoordinateToVoxelIndexTr"}]], "Input",
 CellChangeTimes->{{3.643636882655121*^9, 3.643636888784371*^9}}],

Cell[BoxData[
 StyleBox["\<\"CoordinateToVoxelIndexTr[img, Q, spec] is equivalent to \
Transpose @ CoordinateToVoxelIndex[img, Transpose @ Q, spec].\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643636889155161*^9},
 CellTags->"Info3643622489-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CoordinateToVoxelIndexMatrix", "Subsection",
 CellChangeTimes->{{3.64363628034776*^9, 3.643636285658012*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CoordinateToVoxelIndexMatrix"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
   3.643636863710401*^9, 3.6436368705744143`*^9}, 3.64363692432934*^9}],

Cell[BoxData[
 StyleBox["\<\"CoordinateToVoxelIndexMatrix[img] yields a matrix that will \
transform the voxel index {x,y,z,1} into the voxel coordinate {i,j,k} for the \
given MRImage3D, img. Note that the coordinate may not be even integer \
numbers; use Round to find indices. The resulting indices will assume that \
the x, y, and z values are specified as coordinates in which the positive x, \
y, and z axes are pointed in the right, anterior, and superior directions, \
respectively.\\nCoordinateToVoxelIndexMatrix[img, spec] yields a matrix that \
performs the same conversion but assumes that the x, y, and z values are \
specified in coordinates in which the positive x, y, and z axes are pointed \
in the directions indicated by spec, which is identical in format to the \
second argument of MRIOrient.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436369247843523`*^9},
 CellTags->"Info3643622524-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CoordinateToVoxelIndexTransform", "Subsection",
 CellChangeTimes->{{3.64363628034776*^9, 3.643636303523715*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CoordinateToVoxelIndexTransform"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
   3.643636863710401*^9, 3.6436368705744143`*^9}, 3.6436369321890173`*^9}],

Cell[BoxData[
 StyleBox["\<\"CoordinateToVoxelIndexTransform[img] yields a \
TransformationFunction that will transform the voxel index {x,y,z} into the \
voxel coordinate {i,j,k} for the given MRImage3D, img. Note that the \
coordinate may not be even integer numbers; use Round to find indices. The \
resulting indices will assume that the x, y, and z values are specified as \
coordinates in which the positive x, y, and z axes are pointed in the right, \
anterior, and superior directions, \
respectively.\\nCoordinateToVoxelIndexTransform[img, spec] yields a \
transformation function that performs the same conversion but assumes that \
the x, y, and z values are specified in coordinates in which the positive x, \
y, and z axes are pointed in the directions indicated by spec, which is \
identical in format to the second argument of MRIOrient.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436369325597763`*^9},
 CellTags->"Info3643622532-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MRImage", "Subsection",
 CellChangeTimes->{{3.643635977823797*^9, 3.643635978475728*^9}, {
  3.643636110405822*^9, 3.64363613460358*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRImage"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
   3.643636863710401*^9, 3.6436368705744143`*^9}, 3.6436369370970383`*^9}],

Cell[BoxData[
 StyleBox["\<\"MRImage[data] yields an Image-like form that can be used with \
Image functions but which stores additional relevant data regarding MR \
images.\\nNote that MRImage is intended for MRI slices rather than for 3D \
images; for a 3D image representation, use MRImage3D.\"\>", "MSG"]], "Print", \
"PrintUsage",
 CellChangeTimes->{3.643636938026194*^9},
 CellTags->"Info3643622537-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MRImage3D", "Subsection",
 CellChangeTimes->{{3.643635979904262*^9, 3.6436359809732103`*^9}, {
  3.6436361138479233`*^9, 3.643636137416245*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRImage3D"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
  3.643636863710401*^9, 3.6436368705744143`*^9}, {3.6436369526778307`*^9, 
  3.643636953832099*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRImage3D[data] yields an Image3D-like form that can be used \
with Image3D functions but which stores additional relevant data regarding MR \
images. MRImage3D accepts all the options that can be passed to Image3D as \
well as the following:\\n  * Indeterminate (defailt: Min) specifies what \
value should be filled in for Indeterminate voxel values when drawing the \
Image3D representation; any key of MRImageStatistics may be given.\\n  * None \
(default: Min) specifies the value that should be filled in for None voxel \
values.\\n  * RightDirectionVector, AnteriorDirectionVector, and \
SuperiorDirectionVector (defaults: Indeterminate) are necessary for acurrate \
MRISlice and MRIOrient function calls; these each specify a vector telling \
which direction in the image is right, anterior, or superior, respectively. \
The vectors are interpreted to be in a space such that the vectors {1,0,0}, \
{0,1,0}, and {0,0,1} point from the center of voxel [[i,j,k]] to the centers \
of voxels [[i+1,j,k]], [[i,j+1,k]], and [[i,j,k+1]], respectively.\\n  * \
Center (default: Automatic) specifies the center of the brain or item of \
interest in the MRImage; if Automatic is given, then ImageDimensions/2 is \
used, otherwise a 3D vector in terms of voxel indices should be given (same \
coordinate orientation as for the direction vectors, e.g. \
RightDirectionVector).\\n  * VoxelDimensions (default: {1,1,1}) specifies the \
spatial dimensions of the voxels. Quantity units may be given.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643636954237734*^9},
 CellTags->"Info3643622554-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MRImageObjectQ", "Subsection",
 CellChangeTimes->{{3.643636172471878*^9, 3.6436361741363573`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRImageObjectQ"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
  3.643636863710401*^9, 3.6436368705744143`*^9}, {3.6436369598334017`*^9, 
  3.643636961673582*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRImageObjectQ[img] is equivalent to Or[MRImageQ[img], \
MRImageSliceQ[img]].\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436369621028957`*^9},
 CellTags->"Info3643622562-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MRImageQ", "Subsection",
 CellChangeTimes->{3.6436361517171087`*^9}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRImageQ"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
  3.643636863710401*^9, 3.6436368705744143`*^9}, {3.643636965648954*^9, 
  3.643636966016427*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRImageQ[img] yields True if img is a valid MRImage3D object \
and yields False otherwise.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643636966370851*^9},
 CellTags->"Info3643622566-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MRImageSliceQ", "Subsection",
 CellChangeTimes->{{3.643636154111103*^9, 3.643636155528987*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRImageSliceQ"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
  3.643636863710401*^9, 3.6436368705744143`*^9}, {3.643636969025116*^9, 
  3.643636970380836*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRImageSliceQ[img] yields True if img is a valid MRImage \
object and yields False otherwise.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643636970723695*^9},
 CellTags->"Info3643622570-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
MRImageStatistics, MRImageMin, MRImageMax, MRImageMean, MRImageMedian, \
MRImageVariance, MRImageCount, MRImageMissing\
\>", "Subsection",
 CellChangeTimes->{{3.6436359837629433`*^9, 3.643635997949648*^9}, {
  3.643636092889367*^9, 3.6436361076036863`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRImageStatistics"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
  3.643636863710401*^9, 3.6436368705744143`*^9}, {3.643636974750173*^9, 
  3.643636977120221*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRImageStatistics[mrimg] yields an association of a few \
critical statistics of all the valid numerical values in the image; these \
statistics are Min, Max, Mean, Median, Variance, Count, and Missing. For more \
information, see MRImageMax, MRImageCount, etc.\"\>", "MSG"]], "Print", \
"PrintUsage",
 CellChangeTimes->{3.64363697743434*^9},
 CellTags->"Info3643622577-4641653"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRImageMin"}]], "Input",
 CellChangeTimes->{{3.643636979404375*^9, 3.643636980877336*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRImageMin[mrimg] yields the minimum value of all voxels in \
the given MRImage object mrimg. This value ignores Ideterminate and None \
values.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436369811753197`*^9},
 CellTags->"Info3643622581-4641653"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRImageMax"}]], "Input",
 CellChangeTimes->{{3.6436369817154913`*^9, 3.6436369829810457`*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRImageMax[mrimg] yields the maximum value of all voxels in \
the given MRImage object mrimg. This value ignores Ideterminate and None \
values.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436369833206797`*^9},
 CellTags->"Info3643622583-4641653"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRImageMean"}]], "Input",
 CellChangeTimes->{{3.643636983739891*^9, 3.6436369855797567`*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRImageMean[mrimg] yields the mean value of all voxels in the \
given MRImage object mrimg. This value ignores Ideterminate and None \
values.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643636986096785*^9},
 CellTags->"Info3643622586-4641653"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRImageMedian"}]], "Input",
 CellChangeTimes->{{3.643636987539401*^9, 3.64363699065609*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRImageMedian[mrimg] yields the median value of all voxels in \
the given MRImage object mrimg. This value ignores Ideterminate and None \
values.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643636991044759*^9},
 CellTags->"Info3643622591-4641653"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRImageVariance"}]], "Input",
 CellChangeTimes->{{3.6436369917627563`*^9, 3.643636994692492*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRImageVariance[mrimg] yields the variance of all voxels in \
the given MRImage object mrimg. This value ignores Ideterminate and None \
values.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436369950147963`*^9},
 CellTags->"Info3643622594-4641653"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRImageCount"}]], "Input",
 CellChangeTimes->{{3.643636995543734*^9, 3.643636998461131*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRImageCount[mrimg] yields the number of valid (numerical) \
values, including separate frames of the image, in the given MRImage object \
mrimg. This value ignores Ideterminate and None values.\"\>", "MSG"]], "Print",\
 "PrintUsage",
 CellChangeTimes->{3.6436369987577343`*^9},
 CellTags->"Info3643622598-4641653"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRImageMissing"}]], "Input",
 CellChangeTimes->{{3.64363699930492*^9, 3.643637003084828*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRImageMissing[mrimg] yields the number of invalid \
(Indeterminate or None) values, including separate frames of the image, in \
the given MRImage object mrimg.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643637003336336*^9},
 CellTags->"Info3643622603-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MRIOrient", "Subsection",
 CellChangeTimes->{{3.643636413311903*^9, 3.643636416630925*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRIOrient"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
  3.643636863710401*^9, 3.6436368705744143`*^9}, {3.643637013041885*^9, 
  3.643637014301132*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRIOrient[img, {rows, columns, slices}] yields an MRImage3D \
identical to the given MRImage3D, img, but with the rows, columns, and slices \
occurring according to the given directives. The three arguments may take the \
form Left/LH, Right/RH, Inferior/Bottom, Superior/Top, Posterior/Back, or \
Anterior/Front. Arguments may only appear once in the list and may not appear \
with their antonyms.\\nMRIOrient[img, {rows, columns, slices}, dimensions] \
orients the given img as instructed and additionally centers it in an image \
with the number of rows, columns, and slices given in the list \
dimensions.\\nExamples:\\n  * MRIOrient[img, {Right, Anterior, Superior}] \
yields img in a RAS orientation.\\n  * MRIOrient[img, {RH, Front, Top}, {256, \
256, 256}] is equivalent to the example above except that it also centers the \
image in 256 x 256 x 256 voxel space.\\n  * MRIOrient[img, {Left, Posterior, \
Superior}] yields img in a scanner orientation.\\n  * MRIOrient[img, \
{Anterior, Superior, Back}] is invalid because Anterior and Back are \
antonyms.\\nMRIOrient may also be called with string arguments such as \
\\\"RAS\\\" or \\\"LIA\\\", which are automatically converted into the \
appropriate lists.  \\nMRIOrient[img, {rows, columns}] orients the rows and \
columns of an MRImage slice as with an MRImage3D object; note that the rows \
and columns must correspond to axes that the given image represents; e.g., \
you cannot slice parallel the Saggital plane then orient the resulting image \
slices in left or right directions.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643637014640046*^9},
 CellTags->"Info3643622614-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MRIOrientMatrix", "Subsection",
 CellChangeTimes->{{3.64363642343828*^9, 3.643636425248485*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRIOrientMatrix"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
  3.643636863710401*^9, 3.6436368705744143`*^9}, {3.643637018812828*^9, 
  3.643637020724875*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRIOrientMatrix[img, spec] and MRIOrientMatrix[img, spec, \
dims] both yield the matrix used in the transformation undertaken by \
MRIOrient[img, spec, dims]. Note that these yield matrices that are \
appropriate for use with ImageForwardTransformation or MRITransformation, but \
not ImageTransformation.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.64363702113384*^9},
 CellTags->"Info3643622621-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MRIOrientTransform", "Subsection",
 CellChangeTimes->{{3.643636429692099*^9, 3.6436364318072767`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRIOrientTransform"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
  3.643636863710401*^9, 3.6436368705744143`*^9}, {3.643637023841961*^9, 
  3.643637025820981*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRIOrientTransform[img, spec] and MRIOrientMatrix[img, spec, \
dims] both yield the transformation function used in the transformation \
undertaken by MRIOrient[img, spec, dims]. Note that these yield transform \
functions that are appropriate for use with ImageForwardTransformation or \
MRITransformation, but not ImageTransformation.\"\>", "MSG"]], "Print", \
"PrintUsage",
 CellChangeTimes->{3.6436370260604267`*^9},
 CellTags->"Info3643622626-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MRISlices", "Subsection",
 CellChangeTimes->{{3.643636435779161*^9, 3.6436364373648376`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRISlices"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
  3.643636863710401*^9, 3.6436368705744143`*^9}, {3.643637037038107*^9, 
  3.643637038185171*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRISlices[img, plane] yields a list of MRImage objects (2D \
MRImage slices) corresponding to the given plane. Plane may be specified in \
any of the following ways:\\n  * \\\"Sagittal\\\" or \\\"Lateral\\\" indicate \
the slices parallel to the Sagittal plane, which divides left from right, \
ordering the slices from left to right.\\n  * \\\"Transverse\\\", \\\"Axial\\\
\", or \\\"Horizontal\\\" indicate the slices parallel to the Horizontal \
plane, which divides top superior from inferior, ordering the slices from \
inferior to superior.\\n  * \\\"Coronal\\\" or \\\"Frontal\\\" indicate the \
slices parallel to the Coronal plane, which divides posterior from anterior, \
ordering the slices from posterior to anterior.\\n  * Left -> Right, Anterior \
-> Back, LH -> RH, Top -> Inferior, etc. may also be used to indicate that \
the slices should be ordered in a particular direction.\\nThe option \
MRIOrient may be specified as well; if not specified, the default value, \
Automatic, indicates that the orientation provided in the image should be \
preserved in the resulting slices; otherwise, the value must be a 2-element \
list which is a valid argument to the MRIOrient[] function with any of the 2D \
image slices.\\nMRISlices[img, plane, slices] is equivalent to MRISlices[img, \
plane][[slices]].\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643637038510405*^9},
 CellTags->"Info3643622638-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MRITransformation", "Subsection",
 CellChangeTimes->{{3.643636418250741*^9, 3.643636420276032*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MRITransformation"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
  3.643636863710401*^9, 3.6436368705744143`*^9}, {3.643637043000433*^9, 
  3.643637045722826*^9}}],

Cell[BoxData[
 StyleBox["\<\"MRITransformation[img, tx] is identical to \
ImageTransformation[img, tx] for MRImage3D or MRImage slice object img and \
transformation tx, but performs the transformation in a manner similar to how \
FreeSurfer and other neuroimaging software do, resulting in a slightly \
modified transformation than the typical Mathematica mode. Critically, this \
maintains orientation information through the transformation, so should be \
used with MRImages.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643637046004377*^9},
 CellTags->"Info3643622645-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["RightDirectionVector", "Subsection",
 CellChangeTimes->{{3.643636197739457*^9, 3.643636200169002*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RightDirectionVector"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
  3.643636863710401*^9, 3.6436368705744143`*^9}, {3.643637049941773*^9, 
  3.6436370521799603`*^9}}],

Cell[BoxData[
 StyleBox["\<\"RightDirectionVector[img] yields the vector that points to the \
right for the given MRImage3D object img or yields Indeterminate if none can \
be determined. RightDirectionVector is also an optional argument to MRImage3D \
that specifies the image's rightward direction. In both cases, the vector \
should assume that the basis vecotrs i, j, and k point in the direction of \
increasing index in the ImageData[img] matrix; i.e. i, j, and k are the \
vectors from the center of voxel ImageData[img][[1,1,1]] to the centers of \
ImageData[img][[2,1,1]], ImageData[img][[1,2,1]], and \
ImageData[img][[1,1,2]], respectively.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643637052519986*^9},
 CellTags->"Info3643622652-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["SuperiorDirectionVector", "Subsection",
 CellChangeTimes->{{3.643636205377557*^9, 3.643636208404179*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SuperiorDirectionVector"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
  3.643636863710401*^9, 3.6436368705744143`*^9}, {3.643637058649336*^9, 
  3.643637059730378*^9}}],

Cell[BoxData[
 StyleBox["\<\"SuperiorDirectionVector[img] yields the vector that points to \
the superior for the given MRImage3D object img or yields Indeterminate if \
none can be determined. SuperiorDirectionVector is also an optional argument \
to MRImage3D that specifies the image's upward direction (in terms of the \
brain). In both cases, the vector should assume that the basis vecotrs i, j, \
and k point in the direction of increasing index in the ImageData[img] \
matrix; i.e. i, j, and k are the vectors from the center of voxel \
ImageData[img][[1,1,1]] to the centers of ImageData[img][[2,1,1]], \
ImageData[img][[1,2,1]], and ImageData[img][[1,1,2]], respectively.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643637060153036*^9},
 CellTags->"Info3643622660-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["VoxelDimensions, PixelDimensions", "Subsection",
 CellChangeTimes->{{3.64363622032985*^9, 3.643636251256954*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "VoxelDimensions"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
  3.643636863710401*^9, 3.6436368705744143`*^9}, {3.643637070540847*^9, 
  3.643637072127034*^9}}],

Cell[BoxData[
 StyleBox["\<\"VoxelDimensions[img] yields the {i,j,k} voxel image dimensions \
for the given MRImage3D img or the {i,j} voxel image dimensions for the \
MRImage slice img. VoxelDimensions is also an argument that can be passed to \
both MRImage3D or MRImage to specify the size of the voxels.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643637072865044*^9},
 CellTags->"Info3643622672-4641653"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "PixelDimensions"}]], "Input",
 CellChangeTimes->{{3.643637073485612*^9, 3.6436370755576773`*^9}}],

Cell[BoxData[
 StyleBox["\<\"PixelDimensions[img] is equivalent to VoxelDimensions but for \
MRImage slices.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643637075821772*^9},
 CellTags->"Info3643622675-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["VoxelIndexToCoordinate", "Subsection",
 CellChangeTimes->{{3.643636256396412*^9, 3.6436362709434557`*^9}, {
  3.643636331985394*^9, 3.643636333582951*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "VoxelIndexToCoordinate"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
  3.643636863710401*^9, 3.6436368705744143`*^9}, {3.64363707952927*^9, 
  3.643637083489195*^9}}],

Cell[BoxData[
 StyleBox["\<\"VoxelIndexToCoordinate[img, {i,j,k}] yields the coordinate at \
which the voxel (i, j, k) is centered in the given MRImage3D, \
img.\\nVoxelIndexToCoordinate[img, {{i0,j0,k0}, {i1,j1,k1}, ...}] yields the \
coordinates for all of the indices.\\nVoxelIndexToCoordinate[img, coords, \
spec] performes the transformation but orients the positive x, y, and z axes \
in the directions given by spec, which is identical in format to the second \
argument of MRIOrient.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643637083826275*^9},
 CellTags->"Info3643622683-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["VoxelIndexToCoordinateMatrix", "Subsection",
 CellChangeTimes->{{3.643636256396412*^9, 3.643636260930421*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "VoxelIndexToCoordinateMatrix"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
   3.643636863710401*^9, 3.6436368705744143`*^9}, 3.643637416043841*^9}],

Cell[BoxData[
 StyleBox["\<\"VoxelIndexToCoordinateMatrix[img] yields a 4x4 matrix that \
will transform the voxel index {i,j,k,1} into the coordinate {x,y,z,1} for \
the given MRImage3D, img. The resulting matrix will orient the right, \
anterior, and superior directions in the positive x, y, and z axes \
respectively.\\nVoxelIndexToCoordinateMatrix[img, spec] yields a \
transformation matrix that orients x, y, and z in the directions specified in \
spec, which is identical to the first argument of MRIOrient.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643637417401313*^9},
 CellTags->"Info3643623017-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["VoxelIndexToCoordinateTransform", "Subsection",
 CellChangeTimes->{{3.643636256396412*^9, 3.643636265925475*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643636492534964*^9, 3.643636493660035*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "VoxelIndexToCoordinateTransform"}]], "Input",
 CellChangeTimes->{{3.643636486709634*^9, 3.643636487014454*^9}, {
   3.643636863710401*^9, 3.6436368705744143`*^9}, 3.64363742214122*^9}],

Cell[BoxData[
 StyleBox["\<\"VoxelIndexToCoordinateTransform[img] yields a \
TransformationFunction that will transform the voxel index {i,j,k} into the \
coordinate {x,y,z} for the given MRImage3D, \
img.\\nVoxelIndexToCoordinateTransform[img, spec] yields a transformation \
function that orients x, y, and z in the directions specified in spec, which \
is identical to the first argument of MRIOrient.\"\>", "MSG"]], "Print", \
"PrintUsage",
 CellChangeTimes->{3.64363742285623*^9},
 CellTags->"Info3643623022-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Chapter"],
 ". Cortical Meshes"
}], "Chapter",
 CellChangeTimes->{{3.643637456890873*^9, 3.643637458711279*^9}}],

Cell[CellGroupData[{

Cell["Introduction", "Subchapter",
 CellChangeTimes->{{3.6436418552200937`*^9, 3.643641856546932*^9}}],

Cell[TextData[{
 "The Neurotica`Mesh` package is designed to represent cortical surface \
meshes in a way that facilitates computation over the cortical surface and \
its properties while mainining a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "-oriented design. The package accordingly contains a great deal of \
functionality related to the display, analysis, and representation of \
cortical surface meshes. The CorticalMesh[] function is used to construct a \
CorticalMesh3D object, which simultaneously is interpreted by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " as a Graph object, a MeshRegion object, and a BoundaryMeshRegion object. \
Cortical Meshes also support Options (much like Image3D objects) via the \
Options[] and SetOptions[] functions, and accept all Graphics3D options. \
Additionally, they support Properties (much like Graph objects) via the \
PropertyList, SetProperty, and PropertyValue functions. For propertiesof \
vertices, edges, and faces, respectively, one can use the shortcut functions \
VertexPropertyList, SetVertexProperties, etc."
}], "Text",
 CellChangeTimes->{{3.6436418586617823`*^9, 3.643641895157262*^9}, {
  3.643642019133853*^9, 3.6436420634018593`*^9}, {3.64364216688068*^9, 
  3.643642210867592*^9}, {3.643642673268154*^9, 3.6436426916725807`*^9}, {
  3.643644164168149*^9, 3.643644278109517*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functions", "Subchapter",
 CellChangeTimes->{{3.6436427483503523`*^9, 3.643642749418364*^9}}],

Cell[CellGroupData[{

Cell["CortexPlot3D", "Subsection",
 CellChangeTimes->{{3.643643221696129*^9, 3.643643224620421*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CortexPlot3D"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.6436434665314703`*^9, 3.64364346847713*^9}}],

Cell[BoxData[
 StyleBox["\<\"CortexPlot3D[mesh] yields a 3D Graphics form for the given \
CorticalMesh3D mesh. All options available to Graphics3D may be passed to \
CortexPlot3D. Note that some of the default options for Graphics3D have been \
altered in CortexPlot3D, and 3D graphics options that have been attached to \
the mesh will be used as well. See ?CorticalMesh for more details.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643468855795*^9},
 CellTags->"Info3643629068-4641653"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notes", "Subsubsection",
 CellChangeTimes->{{3.643644391891419*^9, 3.643644392341444*^9}}],

Cell["\<\
The CortexPlot3D function is usually invoked with the optional argument \
ColorFunction, which is used to assign color values to each vertex. This \
function receives, as its sole argument, an Association describing a single \
vertex. This association contains a key/value for each property defined on \
the vertex as well as a the keys \[OpenCurlyDoubleQuote]Vertex\
\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]Coordinate\
\[CloseCurlyDoubleQuote] containing the vertex id and the {x,y,z} coordinate \
as well. An example CortexPlot3D call, used to display polar angle, is shown \
below:\
\>", "Text",
 CellChangeTimes->{{3.643644394310149*^9, 3.643644476469417*^9}, {
  3.643644990159203*^9, 3.643645038027269*^9}}],

Cell[BoxData[
 RowBox[{"CortexPlot3D", "[", "\[IndentingNewLine]", 
  RowBox[{"mesh", ",", "\[IndentingNewLine]", 
   RowBox[{"ColorFunction", "\[Rule]", 
    RowBox[{"Function", "[", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"#PolarAngle", "=!=", "None"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Blend", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "Red", ",", "Yellow", ",", "Green", ",", "Cyan", ",", "Blue"}], 
          "}"}], ",", 
         RowBox[{"#PolarAngle", "/", "180"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"CorticalCurvatureColor", "[", "#Curvature", "]"}]}], "]"}], 
     "]"}]}]}], "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.643645041424941*^9, 3.643645111389147*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CortexResample", "Subsection",
 CellChangeTimes->{{3.643643226465246*^9, 3.643643228141761*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CortexResample"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.6436434713341846`*^9, 3.6436434730671062`*^9}}],

Cell[BoxData[
 StyleBox["\<\"CortexResample[surf1, surf2] yields a cortical equivalent to \
the CorticalMesh object surf2 but such that the field of the surface has been \
resampled from the cortical mesh object surf1.\\nCortexResample[surf2 -> \
surf1] is equivalent to CortexResample[surf1, surf2].\\nThe following options \
may be provided:\\n  * Method: a Method option may specify Nearest (default) \
for nearest-neighbor interpolation, Interpolation, or List interpolation, for \
their respective functions. In the latter two cases, A list may be given \
instead of the argument such that the first argument is Interpolation or \
LitInterpolation and the remaining elements of the list are options to pass \
to these functions; e.g. Method -> {Interpolation, InterpolationOrder -> \
4}.\\n  * Properties: a Properties argument specifies that the given property \
should be resampled; a list of properties may also be given, or All. If no \
property is given then All is the default value.\"\>", "MSG"]], "Print", \
"PrintUsage",
 CellChangeTimes->{3.643643473361156*^9},
 CellTags->"Info3643629073-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CorticalColorData", "Subsection",
 CellChangeTimes->{{3.6436430764128857`*^9, 3.643643085884691*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CorticalColorData"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643475643044*^9, 3.643643478050827*^9}}],

Cell[BoxData[
 StyleBox["\<\"CorticalColorData[name] yields the cortical coloring \
instructions registered to the given name. This will always be a \
CorticalColorSchema object, which, among other things, serves as a function \
that, given a vertex id, vertex coordinate, and set of properties, yields a \
color.\\nThe form CorticalColorData[name] = schema; may be evaluated to \
construct a CorticalColorData object.  The schema may be a \
CorticalColorSchema object or any instruction that can be used to establish a \
cortical color schema (see CorticalColorSchema for more information).\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643478422162*^9},
 CellTags->"Info3643629078-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CorticalColorSchema", "Subsection",
 CellChangeTimes->{{3.643643086998382*^9, 3.643643090171269*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CorticalColorSchema"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643480356852*^9, 3.643643482933283*^9}}],

Cell[BoxData[
 StyleBox["\<\"CorticalColorSchema[...] is a form that declares a cortical \
color schema object. CorticalColorSchema[] may be called with the following \
arguments to construct a color schema object:\\nCorticalColorSchema[property \
-> {range, colors}] indicates the vertices should be colored according to the \
given colors, blended over the given range of the given \
property.\\nCorticalColorSchema[property -> function] indicates that the \
given function should be passed the given property value and will return a \
color.\\nCorticalColorSchema[All -> function] indicates that the given \
function should accept three arguments: the vertex id, the vertex coordinate, \
and the vertex property list; the fun\\nction must return a color or $Failed \
or None.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436434833012857`*^9},
 CellTags->"Info3643629083-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CorticalCurvatureColor", "Subsection",
 CellChangeTimes->{{3.643643052922977*^9, 3.6436430564434547`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CorticalCurvatureColor"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643485262074*^9, 3.643643487961915*^9}}],

Cell[BoxData[
 StyleBox["\<\"CorticalCurvatureColor[c] yields the appropriate color for \
cortical curvature c in a CortexPlot or CortexPlot3D; c may be a list or a \
single value.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643488239287*^9},
 CellTags->"Info3643629088-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CorticalCurvatureVertexColors", "Subsection",
 CellChangeTimes->{{3.643643066197219*^9, 3.643643069864727*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CorticalCurvatureVertexColors"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643490909492*^9, 3.643643494948084*^9}}],

Cell[BoxData[
 StyleBox["\<\"CorticalCurvatureVertexColors[m] yields the colors for each \
vertex in the given mesh m according to CorticalCurvatureColor[c] for the \
curvature c of each vertex; if there is no curvature proeprty defined, then \
Gray is used for each vertex.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436434952986507`*^9},
 CellTags->"Info3643629095-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CorticalMesh", "Subsection",
 CellChangeTimes->{{3.643642759330329*^9, 3.6436427607134666`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CorticalMesh"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643497198257*^9, 3.64364349861588*^9}}],

Cell[BoxData[
 StyleBox["\<\"CorticalMesh[vertexList, faceList] yields a CorticalMesh3D \
mesh form that can be used with the various CorticalMesh interface functions.\
\\nA cortical mesh resembles both a graph object and a boundary mesh region \
object. They are immutable data structures defined using the DefineImmutable \
function found in the Neurotica`Util` namespace; accordingly, they aren't \
designed to be edited, but to be copied (while reusing and sharing data \
between copies efficiently). To edit the options or data in a CorticalMesh m, \
call CorticalMesh[m, <option> -> <value>...]. Valid options for such a call \
are any option that may be passed to CorticalMesh normally, FaceList, and \
VertexCoordinates. Cortical meshes support the following queries:\\n  * \
Properties, PropertyValue, SetProperty, RemoveProperty: All property \
functions supported by Graphs are also supported by cortical meshes. It is \
recommended that all data attached to nodes, faces, or edges be attached \
using properties. Note that the Properties option is accepted by CorticalMesh \
(see ?Properties) and Property wrappers in the vertex and face lists are \
parsed as well (see ?Property).\\n  * VertexList, VertexCount, EdgeList, \
EdgeCount, EdgePairs: Most graph functions can be used with a cortical mesh \
as if the cortical mesh were a graph. In addition, the function \
EdgePairs[mesh] yields the same result as EdgeList[mesh] but with lists if \
neighboring vertices rather than UndirectedEdge forms.\\n  * \
VertexCoordinates[mesh] additionally yields the list of vertex coordinates \
for the given mesh.\\n  * VertexNormals[mesh], FaceNormals[mesh] yields a \
list of the normal vector to each vertex or face in the mesh.\\n  * FaceList, \
FaceCount: In addition to edges and vertices, meshes also have faces that can \
be accessed with the FaceList and FaceCount functions.\\n  * EdgeLengths, \
EdgeWeights: EdgeLengths[mesh] and EdgeWeights[mesh] are identical; both \
yield the Euclidean distances between vertices in the mesh.\\n  * \
FaceAngles[mesh] yields the internal angles of each face in the same order as \
the vertices in FaceList[mesh].\\n  * FaceNormals[mesh] yields a list of one \
vector for each face in the mesh such that the vertex is orthogonal to the \
face.\\n  * FaceBisectors[mesh] yields a list of the bisecting vectors of \
each of the corners of each face in the mesh.\\n  * FaceAxes[mesh] yields a \
list of orthogonal 2D axes that can be used to project each face into two \
dimensions, one pair for each face.\\n  * FaceCoordinates[mesh] yields a list \
of the faces but with the 3D mesh coordinates in the place of the vertex \
indices.\\n  * FaceRelativeCoordinates[mesh] yields a list of coordinates \
relative to the FaceAxes[mesh], such that each face has been flattened into \
the 2D plane it defines.\\n  * NeighborhoodList[mesh] yields a list of the \
neighborhood of each vertex in the same order as VertexList[mesh]; the \
neighborhood of a vertex u is a list of the vertices that are adjacent to u \
in counterclockwise order around the vector normal to u.\\n  * \
NeighborhoodAngles[mesh] yields a list of the angles between the nodes in the \
NeighborhoodList; these angles are in the same order as the nodes in \
NeighborhoodList such that the first angle in a neighborhood is between the \
first vertex in the neighborhood, the central vertex, and second vertex in \
the neighborhood and the last angle in the neighborhood angles list is the \
angle between the first vertex in the neighborhood list, the center vertex, \
and the last vertex in the neighborhood list.\\n  * \
NeighborhoodBisectors[mesh] yeilds a list of the vectors that bisect each of \
the angles in NeighborhoodAngles[mesh].\\n  * NeighborhoodEdgeLengths[s] \
yields a list of the edge lengths for the neighborhood of each vertex in the \
surface or map s. The results are in the same order as NeighborhoodList[s] \
such that for the neighborhood list L, and the neighborhood edge length list \
G, G[[i,j]] is the length of the edge from vertex i to the vertex \
L[[i,j]].\\n  * EdgeIndex[mesh, e] yields the index in the EdgeList[mesh] of \
the edge e (e may be a list {u,v} or an UndirectedEdge[u,v]). The vertices of \
the edge may be in any order.\\n  * FaceIndex[mesh, f] yields the index in \
the FaceList[mesh] of the face f. The vertices in f may be in any order.\\n  \
* SourceImage[mesh] yields the source volume of the mesh (if specified).\\n  \
* MetaInformation may be passed to the cortical mesh function and may be \
accessed and modified via the MetaInformation[mesh] function.\\n  * \
Graph[mesh] yields a pure graph object for the mesh.\\n  * Most graph \
functions work natively with cortical meshes; e.g., FindShortestPath, \
BetweennessCentrality, and GraphRadius all work with cortical meshes in the \
first argument slot.\\n  * BoundaryMeshRegion[mesh] yields a pure boundary \
mesh object version of the mesh.\\n  * 3D Graphics: CorticalMesh[] accepts \
any option that can be passed to Graphics3D; these options will be used as \
default values when plotting the cortical mesh. The options may be accessed \
via Options[mesh] and may be changed (when cloning a mesh m via \
CorticalMesh[m, options...]) with Options -> {new-options}; Options -> \
Automatic will reset the options to the defaults accepted by Graphics3D with \
the following differences: Lighting -> \\\"Neutral\\\", ColorFunction -> \
None, ColorFunctionScaling -> False, Boxed -> False.\\n  * Rendering: \
CorticalMeshes (and CorticalMaps) are rendered by a combination of four \
functions: ColorFunction, EdgeRenderingFunction, FaceRenderingFunction, and \
VertexRenderingFunction. The ColorFunction argument is all that one usually \
needs to use; it determines the default color for each vertex, which is \
reflected in the rendering color of the faces. The edges and vertices are not \
rendered by default, but the vertex coloring from ColorFunction determines \
the VertexColors setting in the face rendering. For all of these options, the \
provided argument must be a function that accepts an association as its first \
argument, within which are keys for each property of the relevant vertex, \
face, or edge. For the ColorFunction and VertexRenderingFunction options, the \
association additionally contains the keys \\\"Vertex\\\" and \
\\\"Coordinate\\\". For EdgeRenderingFunction, the association additionally \
contains the keys \\\"Edge\\\" and \\\"Coordinates\\\". For \
FaceRenderingFunction, it additionally contains \\\"Face\\\" and \
\\\"Coordinates\\\".\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643498882782*^9},
 CellTags->"Info3643629098-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CorticalMeshQ", "Subsection",
 CellChangeTimes->{{3.643642774934197*^9, 3.643642776486082*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CorticalMeshQ"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643501349205*^9, 3.6436435028683357`*^9}}],

Cell[BoxData[
 StyleBox["\<\"CorticalMeshQ[mesh] yields True if and only if mesh is a \
CorticalMesh object and False otherwise.\"\>", "MSG"]], "Print", "PrintUsage",
 
 CellChangeTimes->{3.643643503249318*^9},
 CellTags->"Info3643629103-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["EdgeCoordinates", "Subsection",
 CellChangeTimes->{{3.643642879469429*^9, 3.643642882562848*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "EdgeCoordinates"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.64364350636681*^9, 3.643643508189691*^9}}],

Cell[BoxData[
 StyleBox["\<\"EdgeCoordinates[s] yields a list identical to EdgePairs[s] \
except that the vertex ids in the list have been replaced with the \
coordinates of each vertex.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.64364350850076*^9},
 CellTags->"Info3643629108-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["EdgeIndex", "Subsection",
 CellChangeTimes->{{3.643643003253107*^9, 3.6436430044794703`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "EdgeIndex"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643510675812*^9, 3.6436435116997643`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"\\!\\(\\*RowBox[{\\\"EdgeIndex\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"g\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"e\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) gives the integer index for the edge \
\\!\\(\\*StyleBox[\\\"e\\\", \\\"TI\\\"]\\) in the graph \\!\\(\\*StyleBox[\\\
\"g\\\", \\\"TI\\\"]\\).\"\>", "MSG"], "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/EdgeIndex"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436435124140472`*^9},
 CellTags->"Info3643629112-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["EdgeLengths", "Subsection",
 CellChangeTimes->{{3.643642905884718*^9, 3.643642907380368*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "EdgeLengths"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.6436435141068783`*^9, 3.6436435152887163`*^9}}],

Cell[BoxData[
 StyleBox["\<\"EdgeLengths[s] yields a list of the lengths (Euclidean norm) \
of each edge in the EdgeList[s] where s may be a surface mesh object or \
projection.\\nEdgeLengths[s, X] yields a list of the lengths of the edges if \
the given mesh s had the coordinates given in the list X.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643515604431*^9},
 CellTags->"Info3643629115-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["EdgeList", "Subsection",
 CellChangeTimes->{{3.6436428843062973`*^9, 3.643642885847815*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "EdgeList"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643517639504*^9, 3.643643518483438*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"\\!\\(\\*RowBox[{\\\"EdgeList\\\", \\\"[\\\", \
StyleBox[\\\"g\\\", \\\"TI\\\"], \\\"]\\\"}]\\) gives the list of edges for \
the graph \\!\\(\\*StyleBox[\\\"g\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[{\\\"EdgeList\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"g\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"patt\\\", \\\
\"TI\\\"]}], \\\"]\\\"}]\\) gives a list of edges that match the pattern \
\\!\\(\\*StyleBox[\\\"patt\\\", \\\"TI\\\"]\\).\"\>", "MSG"], 
  "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/EdgeList"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436435187629633`*^9},
 CellTags->"Info3643629118-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["EdgeFaceMatrix", "Subsection",
 CellChangeTimes->{{3.643642926471718*^9, 3.643642930140477*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "EdgeFaceMatrix"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.6436435205869217`*^9, 3.643643522218543*^9}}],

Cell[BoxData[
 StyleBox["\<\"VertexFaceMatrix[M] yields a SparseArray matrix S such that \
each element S[[m*k + i,j]] of S is equal to 0 if edge j is the kth part of \
face i and 0 if not (where m is the number of faces in the mesh M).\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643522643705*^9},
 CellTags->"Info3643629122-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["EdgePairs", "Subsection",
 CellChangeTimes->{{3.643642890561439*^9, 3.643642893632862*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "EdgePairs"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643530893108*^9, 3.643643532028625*^9}}],

Cell[BoxData[
 StyleBox["\<\"EdgePairs[s] yields a list of the undirected edges between \
vertices in the surface mesh s; unlike the EdgeList function, this function \
yields the edges as lists instead of undirected edges.\"\>", "MSG"]], "Print",\
 "PrintUsage",
 CellChangeTimes->{3.643643533083809*^9},
 CellTags->"Info3643629133-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["EdgePropertyList", "Subsection",
 CellChangeTimes->{{3.643643118285708*^9, 3.6436431230551147`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "EdgePropertyList"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643535020844*^9, 3.643643537079936*^9}}],

Cell[BoxData[
 StyleBox["\<\"EdgePropertyList[mesh, prop] is equivalent to \
PropertyList[{mesh, EdgeList}, prop].\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436435376731853`*^9},
 CellTags->"Info3643629137-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["EdgePropertyValues", "Subsection",
 CellChangeTimes->{{3.643643124798621*^9, 3.643643127059914*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "EdgePropertyValues"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.64364353971196*^9, 3.643643541771138*^9}}],

Cell[BoxData[
 StyleBox["\<\"EdgePropertyValues[mesh, prop] is equivalent to \
PropertyValue[{mesh, EdgeList}, prop].\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643542094623*^9},
 CellTags->"Info3643629142-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["FaceAngles", "Subsection",
 CellChangeTimes->{{3.643642833816079*^9, 3.643642835132682*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FaceAngles"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.64364354385201*^9, 3.643643545022326*^9}}],

Cell[BoxData[
 StyleBox["\<\"FaceAngles[s] yields a list of the angles (in radians) of each \
edge in the FaceList[s] where s may be a surface or a map. FaceAngles[s, X] \
yields the angles for s if the vertices in s had coordinates equal to those \
in the list X.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436435453501663`*^9},
 CellTags->"Info3643629145-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["FaceAxes", "Subsection",
 CellChangeTimes->{{3.643642827189986*^9, 3.643642828945018*^9}, 
   3.643643433792272*^9}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FaceAxes"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643547239409*^9, 3.6436435483412657`*^9}}],

Cell[BoxData[
 StyleBox["\<\"FaceAxe[s] yields a list of the orthogonal axes to each of the \
faces in the surface mesh s.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643548640069*^9},
 CellTags->"Info3643629148-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["FaceBisectors", "Subsection",
 CellChangeTimes->{{3.643642816817285*^9, 3.6436428194387093`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FaceBisectors"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643550714691*^9, 3.6436435526835747`*^9}}],

Cell[BoxData[
 StyleBox["\<\"FaceBisectors[s] yields a list of the vectors which bisect \
each of the corners of the faces in s.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643553007042*^9},
 CellTags->"Info3643629152-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["FaceCoordinates", "Subsection",
 CellChangeTimes->{{3.643642848666877*^9, 3.643642850286457*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FaceCoordinates"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643554843327*^9, 3.64364355648594*^9}}],

Cell[BoxData[
 StyleBox["\<\"FaceCoordinates[s] yeilds a list of faces in which the \
coordinates insted of the vertex indices for each face are given.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643556808729*^9},
 CellTags->"Info3643629156-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["FaceCount", "Subsection",
 CellChangeTimes->{{3.643642837934523*^9, 3.643642838946159*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FaceCount"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.6436435588371162`*^9, 3.643643559849635*^9}}],

Cell[BoxData[
 StyleBox["\<\"FaceCount[s] yields the count of all faces in the surface or \
map s.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436435600951023`*^9},
 CellTags->"Info3643629160-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["FaceIndex", "Subsection",
 CellChangeTimes->{{3.643642997336397*^9, 3.643642998314633*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FaceIndex"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.6436435619534616`*^9, 3.643643562966214*^9}}],

Cell[BoxData[
 StyleBox["\<\"FaceIndex[mesh, f] yields the index in the FaceList[mesh] of \
the face f. The vertices in f may be in any order.\"\>", "MSG"]], "Print", \
"PrintUsage",
 CellChangeTimes->{3.64364356505507*^9},
 CellTags->"Info3643629165-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["FaceList", "Subsection",
 CellChangeTimes->{{3.6436428401274233`*^9, 3.643642841061426*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FaceList"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643566813457*^9, 3.643643567803688*^9}}],

Cell[BoxData[
 StyleBox["\<\"FaceList[s] yields a list of all faces in the surface or map \
s, if any, as lists of indices into VertexCoordinates[s].\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643568128401*^9},
 CellTags->"Info3643629168-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["FaceNormals", "Subsection",
 CellChangeTimes->{{3.643642865879581*^9, 3.643642867093854*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FaceNormals"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643570784778*^9, 3.643643572067562*^9}}],

Cell[BoxData[
 StyleBox["\<\"FaceNormals[s] yields a list of normal vectors to each \
trianglular face in the surface mesh s. The vector yielded for each face is \
orthogonal to the plane of the face.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643572368219*^9},
 CellTags->"Info3643629172-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["FacePropertyList", "Subsection",
 CellChangeTimes->{{3.6436431382995377`*^9, 3.643643140301382*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FacePropertyList"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643574542262*^9, 3.64364357653353*^9}}],

Cell[BoxData[
 StyleBox["\<\"FacePropertyList[mesh, prop] is equivalent to \
PropertyList[{mesh, FaceList}, prop].\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436435768448973`*^9},
 CellTags->"Info3643629176-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["FacePropertyValues", "Subsection",
 CellChangeTimes->{{3.643643142191169*^9, 3.643643144598833*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FacePropertyValues"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643578524809*^9, 3.643643580831031*^9}}],

Cell[BoxData[
 StyleBox["\<\"FacePropertyValues[mesh, prop] is equivalent to \
PropertyValue[{mesh, FaceList}, prop].\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436435811869297`*^9},
 CellTags->"Info3643629181-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["NeighborhoodAngles", "Subsection",
 CellChangeTimes->{{3.6436429697504263`*^9, 3.6436429719782867`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "NeighborhoodAngles"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.6436435827660637`*^9, 3.6436435853426037`*^9}}],

Cell[BoxData[
 StyleBox["\<\"NeighborhoodAngles[mesh] yields a list of the angles between \
the nodes in the NeighborhoodList; these angles are in the same order as the \
nodes in NeighborhoodList such that the first angle in a neighborhood is \
between the first vertex in the neighborhood, the central vertex, and second \
vertex in the neighborhood and the last angle in the neighborhood angles list \
is the angle between the first vertex in the neighborhood list, the center \
vertex, and the last vertex in the neighborhood list.\\nNeighborhoodAngles[s, \
X] yields the neighborhood angles for s if the vertices of s were replaced \
with the vertices in the list X.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436435857109537`*^9},
 CellTags->"Info3643629185-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["NeighborhoodBisectors", "Subsection",
 CellChangeTimes->{{3.6436429746329613`*^9, 3.643642977614456*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "NeighborhoodBisectors"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643587761119*^9, 3.643643590427577*^9}}],

Cell[BoxData[
 StyleBox["\<\"NeighborhoodBisectors[mesh] yeilds a list of the vectors that \
bisect each of the angles in \
NeighborhoodAngles[mesh].\\nNeighborhoodBisectors[s, X] yields the \
neighborhood bisecting vectors for the points given by the coordinate matrix \
X.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436435907833652`*^9},
 CellTags->"Info3643629190-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["NeighborhoodEdgeLengths", "Subsection",
 CellChangeTimes->{{3.643642981169198*^9, 3.643642984375636*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "NeighborhoodEdgeLengths"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.6436435924523983`*^9, 3.643643595220029*^9}}],

Cell[BoxData[
 StyleBox["\<\"NeighborhoodEdgeLengths[s] yields a list of the edge lengths \
for the neighborhood of each vertex in the surface or map s. The results are \
in the same order as NeighborhoodList[s] such that for the neighborhood list \
L, and the neighborhood edge length list G, G[[i,j]] is the length of the \
edge from vertex i to the vertex L[[i,j]].\"\>", "MSG"]], "Print", \
"PrintUsage",
 CellChangeTimes->{3.6436435955887413`*^9},
 CellTags->"Info3643629195-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["NeighborhoodList", "Subsection",
 CellChangeTimes->{{3.64364296466535*^9, 3.643642966634506*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "NeighborhoodList"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643597379792*^9, 3.6436436010251837`*^9}}],

Cell[BoxData[
 StyleBox["\<\"NeighborhoodList[s] yields a list of length N (where N is the \
number of vertices in s) of the neighboring vertices of each vertex; each \
entry k of the list is a list of the integer id's of the neighbors of the kth \
vertex. The neighbor id's are sorted such that they are listed in a \
counter-clockwise order around vertex k starting from the x-axis. The \
argument s may be either a map or a surface.\"\>", "MSG"]], "Print", \
"PrintUsage",
 CellChangeTimes->{3.6436436012926702`*^9},
 CellTags->"Info3643629201-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["RemoveEdgeProperty", "Subsection",
 CellChangeTimes->{{3.643643183097364*^9, 3.643643187124033*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RemoveEdgeProperty"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643603061079*^9, 3.643643605007516*^9}}],

Cell[BoxData[
 StyleBox["\<\"RemoveEdgeProperty[mesh, prop] is equivalent to \
RemoveProperty[{mesh, EdgeList}, prop].\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643605296661*^9},
 CellTags->"Info3643629205-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["RemoveFaceProperty", "Subsection",
 CellChangeTimes->{{3.643643190341399*^9, 3.6436431935478563`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RemoveFaceProperty"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.6436436071224003`*^9, 3.6436436100476503`*^9}}],

Cell[BoxData[
 StyleBox["\<\"RemoveFaceProperty[mesh, prop] is equivalent to \
RemoveProperty[{mesh, FaceList}, prop].\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436436103029203`*^9},
 CellTags->"Info3643629210-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["RemoveVertexProperty", "Subsection",
 CellChangeTimes->{{3.643643196225192*^9, 3.6436431988914337`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RemoveVertexProperty"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643613264863*^9, 3.643643615751424*^9}}],

Cell[BoxData[
 StyleBox["\<\"RemoveVertexProperty[mesh, prop] is equivalent to \
RemoveProperty[{mesh, VertexList}, prop].\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643616019109*^9},
 CellTags->"Info3643629215-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["SetEdgeProperties", "Subsection",
 CellChangeTimes->{{3.643643169237282*^9, 3.643643172195155*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SetEdgeProperties"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643617933712*^9, 3.6436436199926357`*^9}}],

Cell[BoxData[
 StyleBox["\<\"SetEdgeProperties[mesh, prop] is equivalent to \
SetProperty[{mesh, EdgeList}, prop].\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436436203271923`*^9},
 CellTags->"Info3643629220-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["SetFaceProperties", "Subsection",
 CellChangeTimes->{{3.643643173758716*^9, 3.643643175840354*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SetFaceProperties"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643622017705*^9, 3.6436436242111263`*^9}}],

Cell[BoxData[
 StyleBox["\<\"SetFaceProperties[mesh, prop] is equivalent to \
SetProperty[{mesh, faceList}, prop].\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643624521431*^9},
 CellTags->"Info3643629224-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["SetVertexProperties", "Subsection",
 CellChangeTimes->{{3.643643177460017*^9, 3.643643179890294*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SetVertexProperties"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.6436436262473173`*^9, 3.6436436287899637`*^9}}],

Cell[BoxData[
 StyleBox["\<\"SetVertexProperties[mesh, prop] is equivalent to \
SetProperty[{mesh, VertexList}, prop].\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643629155858*^9},
 CellTags->"Info3643629229-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["SumOverEdges", "Subsection",
 CellChangeTimes->{{3.643642954631145*^9, 3.6436429561942*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SumOverEdges"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643631062517*^9, 3.6436436327726173`*^9}}],

Cell[BoxData[
 StyleBox["\<\"SumOverEdges[M, Q] yields the result of summing over the edges \
given in the matrix Q whose last dimension must be equal to 2 and whose first \
dimension must be equal to the number of faces in cortical mesh or map \
M.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643633063496*^9},
 CellTags->"Info3643629233-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["SumOverFaces", "Subsection",
 CellChangeTimes->{{3.643642943088743*^9, 3.643642944809301*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SumOverFaces"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643634607398*^9, 3.643643637475308*^9}}],

Cell[BoxData[
 StyleBox["\<\"SumOverFaces[M, Q] yields the result of summing over the faces \
given in the matrix Q whose last dimension must be equal to 3 and whose first \
dimension must be equal to the number of faces in cortical mesh or map \
M.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643637831944*^9},
 CellTags->"Info3643629237-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["VertexCoordinates", "Subsection",
 CellChangeTimes->{{3.64364277871338*^9, 3.643642786003564*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "VertexCoordinates"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.6436436589061604`*^9, 3.6436436613591537`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"VertexCoordinates[mesh] yields the list of vertex coordinates \
for the given mesh in vertex order.\"\>", "MSG"], "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/VertexCoordinates"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436436617223997`*^9},
 CellTags->"Info3643629261-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["VertexEdgeMatrix", "Subsection",
 CellChangeTimes->{{3.643642916864738*^9, 3.643642919181642*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "VertexEdgeMatrix"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643663608745*^9, 3.643643666162717*^9}}],

Cell[BoxData[
 StyleBox["\<\"VertexEdgeMatrix[M] yields a SparseArray matrix S such that \
each element S[[m*k + i,j]] of S is equal to 0 if vertex j is the k'th part \
of edge i and 0 if not (where m is the number of edges in the mesh M).\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436436664836082`*^9},
 CellTags->"Info3643629266-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["VertexFaceMatrix", "Subsection",
 CellChangeTimes->{{3.6436429214538927`*^9, 3.6436429237267017`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "VertexFaceMatrix"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643668164999*^9, 3.643643670145421*^9}}],

Cell[BoxData[
 StyleBox["\<\"VertexFaceMatrix[M] yields a SparseArray matrix S such that \
each element S[[m*k + i,j]] of S is equal to 0 if vertex j is the k'th part \
of face i and 0 if not (where m is the number of faces in the mesh M).\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436436704453773`*^9},
 CellTags->"Info3643629270-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["VertexIndex", "Subsection",
 CellChangeTimes->{{3.6436430203645277`*^9, 3.6436430217259607`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "VertexIndex"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.6436436720463133`*^9, 3.6436436733405237`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"\\!\\(\\*RowBox[{\\\"VertexIndex\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"g\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"v\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) gives the integer index for the vertex \
\\!\\(\\*StyleBox[\\\"v\\\", \\\"TI\\\"]\\) in the graph \\!\\(\\*StyleBox[\\\
\"g\\\", \\\"TI\\\"]\\).\"\>", "MSG"], "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/VertexIndex"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643673630411*^9},
 CellTags->"Info3643629273-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["VertexNormals", "Subsection",
 CellChangeTimes->{{3.643642809404615*^9, 3.6436428111475573`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "VertexNormals"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.6436436754438877`*^9, 3.643643676940415*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"VertexNormals is an option for graphics primitives which \
specifies the normal directions to assign to 3D vertices.\"\>", "MSG"], 
  "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/VertexNormals"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.643643677222577*^9},
 CellTags->"Info3643629277-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["VertexPropertyList", "Subsection",
 CellChangeTimes->{{3.64364316045113*^9, 3.643643162666524*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "VertexPropertyList"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643679122467*^9, 3.643643681260345*^9}}],

Cell[BoxData[
 StyleBox["\<\"VertexPropertyList[mesh, prop] is equivalent to \
PropertyList[{mesh, VertexList}, prop].\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6436436815477962`*^9},
 CellTags->"Info3643629281-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["VertexPropertyValues", "Subsection",
 CellChangeTimes->{{3.643643163869898*^9, 3.643643166423811*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6436434202257833`*^9, 3.643643421080229*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "VertexPropertyValues"}]], "Input",
 CellChangeTimes->{
  3.64364342239474*^9, {3.643643683217511*^9, 3.643643685647983*^9}}],

Cell[BoxData[
 StyleBox["\<\"VertexPropertyValues[mesh, prop] is equivalent to \
PropertyValue[{mesh, VertexList}, prop].\"\>", "MSG"]], "Print", "PrintUsage",
 
 CellChangeTimes->{3.643643704094427*^9},
 CellTags->"Info3643629304-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Usage Notes", "Subchapter",
 CellChangeTimes->{{3.6436440620974503`*^9, 3.643644063243951*^9}}],

Cell["\<\
As with MRImage3D objects, it is generally preferable to load a surface mesh \
via the FreeSurferSubject interface (see Section 7). These meshes \
automatically apply relevant properties andcache the result so that \
subsequent requests for the cortical surface needn\[CloseCurlyQuote]t be \
recomputed.\
\>", "Text",
 CellChangeTimes->{{3.643644067891265*^9, 3.643644151512116*^9}, {
  3.6436442229157248`*^9, 3.6436442308046007`*^9}, {3.643644287063381*^9, 
  3.6436443743752003`*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Chapter"],
 ". Cortical Maps"
}], "Chapter",
 CellChangeTimes->{{3.643583052911737*^9, 3.6435830563662443`*^9}}],

Cell[CellGroupData[{

Cell["Introduction", "Subchapter",
 CellChangeTimes->{{3.643646146697823*^9, 3.643646148069591*^9}}],

Cell["\<\
Cortical Maps are very similar to Cortical Mesh\[CloseCurlyQuote]s (and also \
are defined in the Neurotica`Mesh` package), but they represent 2D data \
instead of 3D data; i.e., they represent the projection of a cortical surface \
to a 2D plane. In fact, almost all functions that operate on Cortical Meshes \
also operate on Cortical Maps, with the exception of those functions that \
compute 3D geometry data (such as VertexNormals). Accordingly, only the \
functions that are uniquely related to Cortical Maps are described below.\
\>", "Text",
 CellChangeTimes->{{3.643646149677993*^9, 3.643646191168412*^9}, {
  3.64364630396317*^9, 3.643646345462894*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functions", "Subchapter",
 CellChangeTimes->{{3.643646350153757*^9, 3.643646351155355*^9}}],

Cell[CellGroupData[{

Cell["CortexPlot", "Subsection",
 CellChangeTimes->{{3.643646487270677*^9, 3.6436464885183372`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643646384050158*^9, 3.643646384826494*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CortexPlot"}]], "Input",
 CellChangeTimes->{{3.643646490263534*^9, 3.643646491646542*^9}}],

Cell[BoxData[
 StyleBox["\<\"CortexPlot[mesh] yields a Graphics form for the given \
CorticalMesh2D or CorticalMesh3D mesh. If the given mesh is a 3D mesh, then \
the options accepted by CorticalMap are used to create the projection \
(Method, Center, etc.). All options available to Graphics may be passed to \
CortexPlot. Note that some of the default options for Graphics have been \
altered in CortexPlot, and 2D graphics options that have been attached to the \
mesh will be used as well. See ?CorticalMap for more details.\\n\\nIf a \
CorticalMesh3D is passed to CortexPlot, the function attempts to convert it \
into a map. If the mesh's MetaInformation includes a rule with the head \
\\\"CorticalMap\\\", then the tail must be a list and must contain valid \
options which are passed to CorticalMap.\"\>", "MSG"]], "Print", "PrintUsage",
 
 CellChangeTimes->{3.643646491983419*^9},
 CellTags->"Info3643632091-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CorticalMap", "Subsection",
 CellChangeTimes->{{3.643646500129216*^9, 3.643646501478294*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CorticalMap"}]], "Input",
 CellChangeTimes->{{3.643646502309705*^9, 3.643646503852578*^9}}],

Cell[BoxData[
 StyleBox["\<\"CorticalMap[mesh] yields a 2D flattened cortical projection of \
the given cortical mesh. The following options may be given:\\n  * Method \
(default: \\\"Equirectangular\\\") specifies the projection method to be used \
in projecting the cortical surface to a flat map. Possible values for Method \
include:\\n    * \\\"Mollweide\\\", a Mollweide projection, parameters: \
Center\\n    * \\\"Equirectangular\\\", a rectangular projection, parameters: \
Center\\n    * \\\"Mercator\\\", the Mercator projection, parameters: \
Center\\n    * \\\"Orthographic\\\", a projection as viewed from an infinite \
distance, parameters: Center\\n    * \\\"Graph\\\", embeds the cortex using a \
2D graph embedding; note that Method -> {\\\"Graph\\\", options...} is \
allowed, and options are passed along to the graph embedding algorithm (see \
Graph, GraphPlot, GraphLayout); it is highly recommended that the Exclusions \
option be specified with graph embedding and that some cuts be made in order \
to produce a reasonable embedding.\\n  * Center (default: Automatic) \
specifies where the projection should be centered; this may be a 3D \
coordinate (in which case the closest point on the mesh to that coordinate is \
used) or a vertex identifier; if {center, orient} is given for the Center \
argument, then the orient point is placed on the positive x-axis in the map \
projection.\\n  * Exclusions (default: Automatic) specifies which vertices, \
edges, or faces are to be excluded from the projection; vertices should be \
specified as integer identifiers, edges as pairs (lists) or undirected edges, \
and faces as triples (lists) of vertex id's; in order for proper embedding, \
some cuts usually need to be made in the cortex; these are chosen \
heuristically if Automatic is specified.\\n  * Radius (default: Full) \
specifies that the radius of the projection should be limited to the given \
value; if this is not Full or All, then the projection algorithm excludes \
those faces, edges, and vertices that are farther (along the cortical \
surface) from the center of the projection than the given value.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643646504448378*^9},
 CellTags->"Info3643632104-4641653"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CorticalMapQ", "Subsection",
 CellChangeTimes->{{3.6436464271168337`*^9, 3.643646428656741*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643646384050158*^9, 3.643646384826494*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CorticalMapQ"}]], "Input",
 CellChangeTimes->{{3.643646430739791*^9, 3.6436464324938602`*^9}}],

Cell[BoxData[
 StyleBox["\<\"CorticalMapQ[x] yields True if x is a 2D cortical projection \
and False otherwise.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643646432850782*^9},
 CellTags->"Info3643632032-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Inclusions", "Subsection",
 CellChangeTimes->{{3.643646381193654*^9, 3.643646382441777*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643646384050158*^9, 3.643646384826494*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Inclusions"}]], "Input",
 CellChangeTimes->{{3.6436463854464083`*^9, 3.643646387853928*^9}}],

Cell[BoxData[
 StyleBox["\<\"Inclusions[map] yields a list of the {vertexIndives, \
edgeIndices, faceIndices} of the vertices, edges, and faces from the source \
mesh of the given map that are included in map.\"\>", "MSG"]], "Print", \
"PrintUsage",
 CellChangeTimes->{3.643646388134369*^9},
 CellTags->"Info3643631988-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Reproject", "Subsection",
 CellChangeTimes->{{3.643646462070319*^9, 3.643646463295833*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643646384050158*^9, 3.643646384826494*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Reproject"}]], "Input",
 CellChangeTimes->{{3.643646465222797*^9, 3.64364646740263*^9}}],

Cell[BoxData[
 StyleBox["\<\"Reproject[map, X] yields a map identical to the given map \
except that it reprojects its coordinates from the alternate coordinate list \
for the original mesh, given by X. If X is instead a mesh with the same \
number of elements as the original mesh, then its coordinates are used.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643646467701456*^9},
 CellTags->"Info3643632067-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["SourceMesh", "Subsection",
 CellChangeTimes->{{3.6436464025462523`*^9, 3.643646403771852*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643646384050158*^9, 3.643646384826494*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SourceMesh"}]], "Input",
 CellChangeTimes->{{3.6436464071601677`*^9, 3.643646409161182*^9}}],

Cell[BoxData[
 StyleBox["\<\"SourceMesh[map] yields the mesh object from which the given \
cortical projection, map, was constructed.\"\>", "MSG"]], "Print", \
"PrintUsage",
 CellChangeTimes->{3.6436464094448977`*^9},
 CellTags->"Info3643632009-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Chapter"],
 ". FreeSurfer Interface"
}], "Chapter",
 CellChangeTimes->{{3.643583063817088*^9, 3.643583071197969*^9}, {
  3.6435831021520023`*^9, 3.643583103473022*^9}}],

Cell[CellGroupData[{

Cell["Introduction", "Subchapter",
 CellChangeTimes->{{3.6437132147180223`*^9, 3.643713215860341*^9}}],

Cell[TextData[{
 "The Neurotica`FreeSurfer` package contains a great deal of tools (some \
described in Section 3, File Formats and I/O above) that fascilitate the \
interaction of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " with FreeSurfer subject data. Generally speaking, after importing \
Neurotica` or Neurotica`FreeSurfer`, one can simply call \
AddFreeSurferSubjectsDirectory[dir], and afterward, the $FreeSurferSubjects \
association will contain the relevant entries.\n\nFreeSurferSubject objects \
are the data structures that represent the subjects themselves. These \
subjects can be queried in a number of ways, the most common of which are to \
obtain cortical surfaces or MRImages. The Cortex and MRImage functions can be \
used to this end."
}], "Text",
 CellChangeTimes->{{3.643713218219995*^9, 3.643713257819334*^9}, {
  3.643713321417349*^9, 3.643713322841332*^9}, {3.643713545645966*^9, 
  3.6437136491704397`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subchapter",
 CellChangeTimes->{{3.643713650761747*^9, 3.6437136515704393`*^9}}],

Cell["\<\
Obtain the fsaverage FreeSurfer subject and get the RH inflated cortical mesh:\
\>", "Text",
 CellChangeTimes->{{3.6437136547151203`*^9, 3.643713667633297*^9}, {
  3.643713713721361*^9, 3.643713723249667*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"fsaverage", "=", 
   RowBox[{"$FreeSurferSubjects", "[", "\"\<fsaverage\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mesh", "=", 
   RowBox[{"Cortex", "[", 
    RowBox[{"fsaverage", ",", "\"\<Inflated\>\"", ",", "RH"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"CortexPlot3D", "[", "mesh", "]"}]}], "Input",
 CellChangeTimes->{{3.643713669756975*^9, 3.643713678880557*^9}, {
  3.6437137114355297`*^9, 3.643713762889718*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsveeXVdeVt9v3vvfD/eDhdtuWJSRyEDlHkYTIsagCiqLIGZFEFgKEyAhE
UETGSEKSrUgqglB0W24byTbCkkO32x2G3d2jv/Uf8d7n3b9R8y7WDmefU1Uc
kNZvDGocztlnn73Xms+ac669QpvF66Yt/7//5m/+ZtP/y59pi7Y+tHHjom3T
/x/+M3Lb5mWL/xcvLv5ff/M3w/n3f17/76CgoKCgoKCgoKCgoKCgoKCgoKCg
oKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg
oKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg
oKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg
oKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg
oKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg
oKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKBIX3311fXr
17/44otPP/305MmTP/rRj5ZHWrFixcMPP3zq1Cne4f0XX3yRY8p9sUFB31z9
5je/OXHixJIlS5YtWzYg0sCBAwcNGjRmzJgdO3bs2bOHvzt37tyyZQv8jhs3
rn379oPr9cADD/D3pZdegmh4L/etBAV9zQWtixYtWrp0af9IQlUYoiFDhowa
NQpO8a0/rNdJR5cuXTp9+vTKlSvbtWvXvXv3bt26jRgxYvz48Vu3bv3ss89+
+tOflvv+goK+Pvr1r3+NW8S39u3bF1rxrUbrkEhDI/Xo0aNz584//vGP5Ulf
StepehE/nz9/XiE07vv5559/7rnnrl27Vu47Dgq6g/WnP/0J3wqw/fr189yr
0Tps2DCAXbBgwbp163CvV69efcXRaUevxPRyJGPZsuAXXngBfj///PNyF0BQ
0J2kf/qnfzp+/Dgc7d69+8CBA++88w6h7LZt27pFIsTtEQmcq6qqfvKTn5w9
e/bKlStG6KuFdPpmGcWGsCJtXHDgNyiooH73u9/9y7/8C8js2rVr//79hw4d
Onr06NNPPw0+OEFcobqLL168CF91dXXmVQ3J13IrEWQX4cBvUFBB/fM//zMJ
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
AAAAAAAAAAAAAAAAAAAAAAAAAAD/op/pZIxs
    "], {{0, 432}, {318, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{318, 432},
  PlotRange->{{0, 318}, {0, 432}}]], "Output",
 CellChangeTimes->{3.6437138200609913`*^9},
 ImageSize->{322, 432},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}]
}, Open  ]],

Cell["Get the right hemisphere ribbon:", "Text",
 CellChangeTimes->{{3.643713739567814*^9, 3.643713745249023*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"brain", "=", 
  RowBox[{"MRImage", "[", 
   RowBox[{"fsaverage", ",", "\"\<Ribbon\>\"", ",", "RH"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.643713751116933*^9, 3.6437137754672117`*^9}, {
  3.643713855627943*^9, 3.6437138565038*^9}, {3.643713895565879*^9, 
  3.6437139204786882`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnU9oVWm3p6v/DDJzllkNGmeOHGWUSTvJyEl6kEkmuZCmcZCGdINcAg4c
pHEgBAShICAIIgShKAoRkVCIlFiUKEbR+KfUMlV+ZWn5/bf+fJN++jzUbrmD
7nub2x7ry/OAh332ec/ex8D67bXed71r/Yd/+K+z//nffvDBB/9tgpfZhcP/
cXl54R//07/nzYF//O+L//DvOPgf/+aDD/4L//7XcURERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERETsWiYmJvbs2cPrzMzMhx9+OD09zev+/fv37t3LMa+85XXPiHH/
2Ih4d6gDKMAHI6GYnJzk7dTU1Nzc3OzsLK8LCwtLS0tzIw4dOjQ/P8+rJ1dW
VjjJmQMHDqAtiAlfH/d/KCL+v4B7gFwcPHhQETh8+PDy8jIiwCtvl0Yc/ZVj
x47xemQEYxh88uTJjz766NKlS59++unFixc3NzfPnz//8ccfr62tra6u8l21
aNz/y4j4VwOjRi4UimMjMPbjx4+vjeDt+vr66dOnT506tT6Cg42NjTNnzqAS
ly9fvn79+q1bt3j98ssvv/jiC155e/v27a2tLc9z8ty5c1yKuxS/RPwdQDSB
XKgSJ0dwgPOgPiAOuA1Xrly5du0aOnDjxg2kAB1QKx4+fHjnzp179+49GLG9
vf3o0SMOnox4+vQpr1999RUawldwQhAfXJQil4jfLhMTE3Nzc0QciIa+hE6F
0oGbcfbs2asjtkbcHsHB3bt379+/j0p8NUKhePgrnOdTTn7zzTfPnj3b2dlB
QHiLznz22WdcfHZ2dtz/9Yj4f2R6ehpxwJAJOs6NQDScuOCV408++QTRIO4Y
gg68C2Th8ePHX3/9NYrx9Qg0AaHAIfn88895vXnzJgcM5pjxDEM38EO4ArqB
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
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERER/1r8T307WLM=
    "], {{0, 391}, {360, 0}}, {0,
     255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{360, 391},
  PlotRange->{{0, 360}, {0, 391}}]], "Output",
 CellChangeTimes->{{3.643713887580584*^9, 3.643713922113674*^9}},
 ImageSize->{364, 391},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[TextData[{
 
 CounterBox["Chapter"],
 ". Visual Cortex Utilities"
}], "Chapter",
 CellChangeTimes->{{3.643583083887712*^9, 3.643583100805681*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Chapter"],
 ". Cortical Surface Registration"
}], "Chapter",
 CellChangeTimes->{{3.643583138337253*^9, 3.6435831636677923`*^9}}],

Cell[CellGroupData[{

Cell["Introduction", "Subchapter",
 CellChangeTimes->{{3.64370887768145*^9, 3.643708878994665*^9}}],

Cell["\<\
The Neurotica`Registration` package provides convenient functions for \
defining objective/potential functions over cortical meshes and cortical \
maps. All such functions are members of an immutable class called \
CorticalPotentialFunction, and all of them have a few convenient properties:\
\>", "Text",
 CellChangeTimes->{{3.6437088804667883`*^9, 3.643708904595132*^9}, {
  3.643708939458396*^9, 3.643709006751725*^9}, {3.643709048238549*^9, 
  3.643709053686695*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Initialized from a Mesh or Map",
  FontWeight->"Bold"],
 ". All cortical potential functions are constructed for a specific cortical \
mesh or cortical map. For example, the HarmonicEdgePotential function \
constructs a cortical potential function for a specific mesh, based on the \
lengths of the edges in the mesh/map."
}], "Item",
 CellChangeTimes->{{3.643709284816556*^9, 3.643709370646599*^9}}],

Cell[TextData[{
 StyleBox["Linear Aggregation",
  FontWeight->"Bold"],
 ". If f and g are both cortical potential functions, then (f + g), (k * f), \
and (k * g) will always be cortical potential functions also, for any scalar \
k."
}], "Item",
 CellChangeTimes->{{3.6437090620142717`*^9, 3.64370918605934*^9}}],

Cell[TextData[{
 StyleBox["Evaluable as Functions",
  FontWeight->"Bold"],
 ". If f is a cortical potential function, then f[X], for a valid coordinate \
matrix X of the relevant map or mesh (e.g., VertexCoordinates[mesh]) will \
yield a real-valued potential."
}], "Item",
 CellChangeTimes->{{3.6437090620142717`*^9, 3.643709145613508*^9}, {
  3.643709190178812*^9, 3.643709272408786*^9}, {3.6437093827262707`*^9, 
  3.64370943534301*^9}}],

Cell[TextData[{
 StyleBox["Evaluable as Gradients",
  FontWeight->"Bold"],
 ". If f is a cortical potential function, then Grad[f, X], for a valid \
coordinate matrix X of the relevant map or mesh will yield a vector (of the \
same length and in the same order as Flatten[X]) of the gradient of f at X. \
This can also be written ",
 Cell[BoxData[
  RowBox[{
   SubscriptBox["\[Del]", "X"], "f"}]]],
 " (typed as esc-g-r-a-d-esc)."
}], "Item",
 CellChangeTimes->{{3.6437090620142717`*^9, 3.643709145613508*^9}, {
  3.643709190178812*^9, 3.643709272408786*^9}, {3.6437093827262707`*^9, 
  3.643709585049243*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functions", "Subchapter",
 CellChangeTimes->{{3.643709617145952*^9, 3.64370961804045*^9}}],

Cell[CellGroupData[{

Cell["CortexGradientPlot", "Subsection",
 CellChangeTimes->{{3.6437129777479067`*^9, 3.643712979985841*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643712982033537*^9, 3.643712982969431*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CortexGradientPlot"}]], "Input",
 CellChangeTimes->{{3.643712987505602*^9, 3.6437129914028473`*^9}, 
   3.643713365539496*^9}],

Cell[BoxData[
 StyleBox["\<\"CortexGradientPlot[mesh, functions] yields a plot of the edges \
in the given mesh with the arrows representing the gradient of the vertices \
in the mesh, according to the list of potential functions given in the list \
functions. In addition to all options that are valid for CortexPlot, the \
following options may be given:\\n  * Arrowheads (default: Small) indicates \
that the arrowheads should be the given size in the plot.\\n  * PlotStyle \
(default: Automatic) should be a list of style instructions for the arrows of \
the gradients; these are cycled across the potential functions as in \
ListPlot.\\n  * Scaled (default: Automatic) indicates the absolute plotting \
length of the largest single gradient vector for any of the vertices; \
effectively, all gradients are scaled such that the largest gradient is equal \
to this value. If Automatic is given, then the value used is 75% of the mean \
edge length.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643713469346116*^9},
 CellTags->"Info3643699069-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CorticalPotentialFunction", "Subsection",
 CellChangeTimes->{{3.643709628353293*^9, 3.643709631080052*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6437096354561157`*^9, 3.6437096383278646`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CorticalPotentialFunction"}]], "Input",
 CellChangeTimes->{{3.643709638938057*^9, 3.6437096392247267`*^9}}],

Cell[BoxData[
 StyleBox["\<\"CorticalPotentialFunction[{F, G}, X] yields a cortical \
potential function object with potential F and gradient G in terms of the \
coordinate matrix X, which is assumed to be a 2 or 3 by n matrix when the \
potential is evaluated. The following options may be given:\\n  * Print \
(default: Subscript[\\\"F\\\", \\\"Potential\\\"]) specifies what symbol \
should be used to display the potential function.\\n  * MetaInformation \
(default: {}) specifies any optional meta-information to attach to the \
potential function.\\n  * CorticalMesh (default: None) specifies the \
(optional) cortical mesh for which this potential function was defined.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6437104911166267`*^9},
 CellTags->"Info3643696091-2659506"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explanation", "Subsubsection",
 CellChangeTimes->{{3.643709647895554*^9, 3.643709649119707*^9}}],

Cell[TextData[{
 "CorticalPotentialFunction[] can be used to create a new cortical potential \
function with an arbitrary form. Note that both the form of the potential and \
the gradient must be supplied. The function constructed by a call to \
CorticalPotentailFunction[] is a proper cortical potential function and thus \
obeys the rules listed in the introduction. Note that the gradient form, G, \
defined in CorticalPotentialFunction should return a (2 or 3)\[Cross]n matrix \
of the column-vectors of the gradient at each vertex.\n\n",
 StyleBox["Important:",
  FontWeight->"Bold"],
 " Although all cortical potential functions can be called with either a 3\
\[Cross]n or n\[Cross]3 matrix (or, for maps, 2\[Cross]n or n\[Cross]2), \
CorticalPotentialFunction must be defined in terms of a 3\[Cross]n or 2\
\[Cross]n matrix. This is always the orientation of the matrix passed to the \
cortical potential function definitions."
}], "Text",
 CellChangeTimes->{{3.64370965105549*^9, 3.6437097144386997`*^9}, {
  3.6437100610379353`*^9, 3.643710155485516*^9}, {3.643710240793572*^9, 
  3.643710283240995*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.64370973523734*^9, 3.643709736365469*^9}}],

Cell["\<\
Here, we create a simple cortical potential function that is smaller when \
vertices are closer to the X-Y plane and larger when they are far from it. \
Minimizing such a function over a 3D spherical surface should result in a \
squashed cortical mesh.\
\>", "Text",
 CellChangeTimes->{{3.643709738237399*^9, 3.643709811443719*^9}, {
  3.643709852978798*^9, 3.643709871170382*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cpf", "=", 
  RowBox[{"CorticalPotentialFunction", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
        "The", " ", "function", " ", "value", " ", "itself", " ", "is", " ", 
         "just", " ", "the", " ", "sum", " ", "of", " ", "square", " ", 
         "distances", " ", "to", " ", "the", " ", "X"}], "-", 
        RowBox[{"Y", " ", "plane"}]}], ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{
         "which", " ", "is", " ", "just", " ", "the", " ", "square", " ", 
          "of", " ", "the", " ", "Z"}], "-", "value"}], ";", " ", 
        RowBox[{
        "remember", " ", "that", " ", "X", " ", "is", " ", "always", " ", 
         RowBox[{"3", "\[Cross]", "n"}], " ", "in", " ", "these", " ", 
         RowBox[{"definitions", ":"}]}]}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Total", "[", 
       RowBox[{
        RowBox[{"X", "[", 
         RowBox[{"[", "3", "]"}], "]"}], "^", "2"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "The", " ", "gradient", " ", "is", " ", "always", " ", "pointing", 
         " ", "away", " ", "from", " ", "the", " ", "Z", " ", "plane", " ", 
         "and", " ", "is", " ", "simply", " ", "the", " ", "distance", " ", 
         "from", " ", "it"}], ",", " ", 
        RowBox[{"which", " ", "is", " ", "easy", " ", "to", " ", 
         RowBox[{"calculate", ":"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"ConstantArray", "[", 
         RowBox[{"0.0", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"X", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}], ",", 
        RowBox[{"(*", " ", 
         RowBox[{"no", " ", "x", " ", "component"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"ConstantArray", "[", 
         RowBox[{"0.0", ",", 
          RowBox[{"Length", "[", 
           RowBox[{"X", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}], ",", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"no", " ", "y", " ", "component"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Sign", "[", 
          RowBox[{"X", "[", 
           RowBox[{"[", "3", "]"}], "]"}], "]"}], "*", 
         RowBox[{"Sqrt", "[", 
          RowBox[{
           RowBox[{"X", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "^", "2"}], "]"}]}]}], "}"}]}], 
     "}"}], ",", "\[IndentingNewLine]", "X", ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "Give", " ", "this", " ", "potential", " ", "function", " ", "a", " ", 
      "nice", " ", "name"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"Print", "\[Rule]", 
     RowBox[{"Subscript", "[", 
      RowBox[{"\"\<F\>\"", ",", "\"\<flatten-z\>\""}], "]"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.643709985629833*^9, 3.643710037782312*^9}, {
  3.643710159540056*^9, 3.643710226661436*^9}, {3.6437102891382103`*^9, 
  3.643710361839869*^9}, {3.64371049890226*^9, 3.643710574150693*^9}, {
  3.64371284161659*^9, 3.643712851150362*^9}}],

Cell[BoxData[
 SubscriptBox["\<\"F\"\>", "\<\"flatten-z\"\>"]], "Output",
 CellChangeTimes->{3.643710574444826*^9, 3.643712854658999*^9}]
}, Open  ]],

Cell["\<\
Test this on a mesh from the spherical fsaverage LH hemisphere.\
\>", "Text",
 CellChangeTimes->{{3.643710582433103*^9, 3.643710588289239*^9}, {
  3.6437124029363117`*^9, 3.643712416878427*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"sub", "=", 
   RowBox[{"$FreeSurferSubjects", "[", "\"\<fsaverage\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mesh", "=", 
   RowBox[{"Cortex", "[", 
    RowBox[{"sub", ",", "\"\<Sphere\>\"", ",", "LH"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"potential", "=", 
   RowBox[{"cpf", "+", 
    RowBox[{"HarmonicEdgePotential", "[", "mesh", "]"}], "+", 
    RowBox[{"HarmonicAnglePotential", "[", "mesh", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Xflat", "=", 
   RowBox[{"First", "@", 
    RowBox[{"FindArgMin", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"potential", "[", "X", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"X", ",", 
        RowBox[{"VertexCoordinatesTr", "[", "mesh", "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Gradient", "\[RuleDelayed]", 
       RowBox[{
        SubscriptBox["\[Del]", "X"], "potential"}]}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"meshFlat", "=", 
   RowBox[{"CorticalMesh", "[", 
    RowBox[{"mesh", ",", 
     RowBox[{"VertexCoordinates", "\[Rule]", 
      RowBox[{"Transpose", "[", "Xflat", "]"}]}]}], "]"}]}], ";"}]}], "Input",\

 CellChangeTimes->{{3.643710577977594*^9, 3.643710614120495*^9}, {
  3.6437124256977167`*^9, 3.6437125670280647`*^9}, {3.6437125985565567`*^9, 
  3.643712604155051*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CortexPlot3D", "[", "meshFlat", "]"}]], "Input",
 CellChangeTimes->{{3.643712570482633*^9, 3.643712575132062*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
1jarKg==
    "], {{0, 120}, {286, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{286, 120},
  PlotRange->{{0, 286}, {0, 120}}]], "Output",
 CellChangeTimes->{3.64371327364847*^9},
 ImageSize->{290, 120},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["GaussianPotentialWell", "Subsection",
 CellChangeTimes->{{3.643712741074682*^9, 3.64371274476725*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6437127489990396`*^9, 3.643712749767046*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "GaussianPotentialWell"}]], "Input",
 CellChangeTimes->{{3.643712750385479*^9, 3.643712753536375*^9}}],

Cell[BoxData[
 StyleBox["\<\"GaussianPotentialWell[mesh, u -> {x0, std}] yields a function \
symbol f such that f[X] is the potential and Grad[f, X] is the gradient of an \
inverted Gaussian potential well that draws vertex u toward position x0 with \
the standard deviation std. In addition to the center and standard deviation, \
the following rules may be appended to the list on the right hand side of the \
rule:\\n  * \\\"FWHM\\\" (default: False) when True indicates that std should \
be interpreted as a full-width-half-max specification instead of the standard \
deviation.\\n  * \\\"Normalize\\\" (default: True) when True indicates that \
the Gaussian should be multiplied by 1 / (Sqrt[2 Pi] std).\\n  * \
\\\"Shape\\\" (default: 2) specifies that the Gaussian function should be of \
the form Exp[Abs[t / std]^q/q] where q is the shape of the generalized \
Gaussian.\\n  * \\\"Weight\\\" (default: 1) specifies that the Gaussian \
function should be weighted by the given \
number.\\nGaussianPotentialWell[mesh, {u1, u2, ...} -> {x0, std}] yields the \
Gaussian potential well function in which all of the vertices in the list on \
the left hand side of the rule are attracted to the specified Gaussian \
potential well on the right side and the potential and gradient yielded are \
divided by the number of vertices. Note that with this argument, the option \
\\\"Weight\\\" may be a list of numbers, one for each of the individual \
vertices.\\nGaussianPotentialWell[mesh, {vertices1 -> gaussian1, vertices2 -> \
gaussian2, ...}] yields the Gaussian potential well function that operates \
over all of the given vertex and Gaussian specifications.\\nGiven the \
following values:\\n  * \[Beta] is the shape parameter,\\n  * \[Sigma] is the \
standard deviation (\[Sigma] = FWHM \[Beta]^(-1/\[Beta]) \
Log[2]^(-1/\[Beta])),\\n  * w is the weight, which has been multiplied by the \
normalizing term if the \\\"Normalize\\\" parameter is not set to False,\\n  \
* d[x] is equal to Norm[x - x0], the distance of the vertex from the center \
of the well,\\nthe Gaussian potential function f and its gradient are defined \
as:\\n  * f[x] = -w Exp[-(d[x]/\[Sigma])^\[Beta] / \[Beta]]\\n  * \
\[Gradient]f[x] = w (d[x]/\[Sigma])^(\[Beta] - 1) / \[Sigma] Exp[-(d[x]/\
\[Sigma])^\[Beta] / \[Beta]]\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.64371277839881*^9},
 CellTags->"Info3643698377-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["GradientFunction", "Subsection",
 CellChangeTimes->{{3.6437126653842382`*^9, 3.643712667025004*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643712669392661*^9, 3.6437126706488113`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "GradientFunction"}]], "Input",
 CellChangeTimes->{{3.643712671484187*^9, 3.643712673321656*^9}}],

Cell[BoxData[
 StyleBox["\<\"GradientFunction[f] yields a pure functional form of the \
gradient of the cortical potential function instance, f.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643712717164833*^9},
 CellTags->"Info3643698317-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["HarmonicAnglePotential", "Subsection",
 CellChangeTimes->{{3.643712694930477*^9, 3.643712697840932*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6437127026802053`*^9, 3.643712704008292*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "HarmonicAnglePotential"}]], "Input",
 CellChangeTimes->{{3.64371270538654*^9, 3.6437127056961317`*^9}}],

Cell[BoxData[
 StyleBox["\<\"HarmonicAnglePotential[mesh] yields a function symbol f such \
that f[X] is the harmonic angle potential where X is a possible vertex \
coordinate list for the given cortical mesh. The potential is calculated as \
the total of (a - a0)^2 where a is the angle of a face in X and a0 is the \
angle of the same face corner in the original mesh. Note that Grad[f, X] \
yields the numerical gradient of the potential at the vertex configuration \
given in X.\\nThe potential function of a HarmonicAnglePotential is U[a] = \
0.5 / n * (a - a0)^2 where a is the angle of a corner of a face, n is the \
number of faces in the system, and a0 is the angle of the same face in the \
initial mesh.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643712717503426*^9},
 CellTags->"Info3643698317-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["HarmonicEdgePotential", "Subsection",
 CellChangeTimes->{{3.643712710673094*^9, 3.643712713399667*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.64371271596996*^9, 3.643712717075079*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "HarmonicEdgePotential"}]], "Input",
 CellChangeTimes->{{3.643712717611979*^9, 3.64371271782775*^9}, {
  3.643712794319277*^9, 3.643712794702373*^9}}],

Cell[BoxData[
 StyleBox["\<\"HarmonicEdgePotential[mesh] yields a function symbol f such \
that f[X] is the harmonic edge potential where X is a possible vertex \
coordinate list for the given cortical mesh. The potential is calculated as \
the total of (d - d0)^2 where d is the distance between two vertices in X and \
d0 is the distance in the coordinates of the given mesh. Note that Grad[f, X] \
yields the numerical gradient of the potential at the vertex configuration \
given in X.\\nThe potential function of a HarmonicEdgePotential is U[d] = 0.5 \
/ n * (d - d0)^2 where d is the distance between a pair of vertices connected \
by an edge, n is the number of edges in the system, and d0 is the distance, \
in the initial mesh, between the two vertices.\"\>", "MSG"]], "Print", \
"PrintUsage",
 CellChangeTimes->{3.643712795214712*^9},
 CellTags->"Info3643698395-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MapTangledQ", "Subsection",
 CellChangeTimes->{{3.643712918492165*^9, 3.643712920683545*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643712923418701*^9, 3.643712924282919*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MapTangledQ"}]], "Input",
 CellChangeTimes->{{3.643712925285561*^9, 3.643712926867483*^9}}],

Cell[BoxData[
 StyleBox["\<\"MapTangledQ[map] yields True if and only if the given cortical \
map is tangled (has faces that are inverted); otherwise yields \
False.\\nMapTangledQ[map, X] is identical to MapTangledQ[map] except that it \
uses the coordinates given in X.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643713275167943*^9},
 CellTags->"Info3643698875-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MapUntangle", "Subsection",
 CellChangeTimes->{{3.6437129295710487`*^9, 3.6437129322908373`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643712935338567*^9, 3.643712936178618*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MapUntangle"}]], "Input",
 CellChangeTimes->{{3.64371293701897*^9, 3.643712938660199*^9}}],

Cell[BoxData[
 StyleBox["\<\"MapUntangle[map] attempts to untangle the map given by \
repeatedly moving tangled vertices to their centroids (with respect to their \
neighbors); this may not succeed, but will return the coordinates regardless \
after 50 such attempts.\\nMapUntangle[map, X] uses the coordinates X as the \
map coordinates.\\nMapUntangle[map, X, max] attempts at most max times to \
untangle the map.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.643713275344612*^9},
 CellTags->"Info3643698875-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["PotentialFunction", "Subsection",
 CellChangeTimes->{{3.643712677720626*^9, 3.643712679440867*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643712680904544*^9, 3.643712682624765*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "PotentialFunction"}]], "Input",
 CellChangeTimes->{{3.643712683234654*^9, 3.643712685249481*^9}}],

Cell[BoxData[
 StyleBox["\<\"PotentialFunction[f] yields a pure functional form of the \
cortical potential function instance, f.\"\>", "MSG"]], "Print", "PrintUsage",
 
 CellChangeTimes->{3.643712717327156*^9},
 CellTags->"Info3643698317-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["RegionDistancePotential", "Subsection",
 CellChangeTimes->{{3.6437128703399057`*^9, 3.643712872812449*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.6437128745960817`*^9, 3.643712875963962*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RegionDistancePotential"}]], "Input",
 CellChangeTimes->{{3.643712876909794*^9, 3.643712879708362*^9}}],

Cell[BoxData[
 StyleBox["\<\"RegionDistancePotential[mesh, reg, {F, G}] yields a cortical \
potential function with potential function F and gradient G. Both F and G \
must be functions such that F[dists] and G[dists], for a vector dists of the \
distances of the relevant vertices to the region, yield a total potential and \
a vector of gradient magnitudes, respectively. Note that the direction of the \
gradient is calculated automatically. The following additional options may be \
given:\\n  * Print (default: Style[\\\"\[GothicCapitalG]\\\", FontWeight -> \
Bold]) specifies the default display name for the function.\\n  * \
MetaInformation (default: {}) specifies extra meta information attached to \
the function.\\n  * VertexWeight (default: Automatic) specifies the relative \
strength of each vertex in the field; the region will have a repulsive, \
neutral, or attractive effect on any vertex with a weight less than, equal \
to, or greater than 0, respectively. If a property is named by this argument, \
then its values are used. The default value, Automatic, applies the field to \
all vertices.\\nSee also SignedRegionDistancePotential.\"\>", "MSG"]], "Print",\
 "PrintUsage",
 CellChangeTimes->{3.64371327479563*^9},
 CellTags->"Info3643698874-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["SignedRegionDistancePotential", "Subsection",
 CellChangeTimes->{{3.64371288611685*^9, 3.6437128898356457`*^9}}],

Cell[CellGroupData[{

Cell["Details", "Subsubsection",
 CellChangeTimes->{{3.643712894067588*^9, 3.64371289717157*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SignedRegionDistancePotential"}]], "Input",
 CellChangeTimes->{{3.643712898063492*^9, 3.643712898367216*^9}}],

Cell[BoxData[
 StyleBox["\<\"SignedRegionDistancePotential[mesh, reg, {F, G}] is identical \
to RegionDistancePotential[mesh, reg, {F, G}] except that the functions F and \
G are given signed distances to the BoundaryMeshRegion reg for the relevant \
vertices instead of the absolute distances.\"\>", "MSG"]], "Print", \
"PrintUsage",
 CellChangeTimes->{3.643713274962545*^9},
 CellTags->"Info3643698874-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Closed]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{786, 764},
WindowMargins->{{0, Automatic}, {Automatic, -22}},
FrontEndVersion->"10.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 23, \
2015)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData["Text"], FontSize -> 16], 
   Cell[
    StyleData["Item"]]}, Visible -> False, FrontEndVersion -> 
  "10.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 23, 2015)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Info3643554561-3240927"->{
  Cell[19828, 499, 1577, 22, 349, "Print",
   CellTags->"Info3643554561-3240927"]},
 "Info3643557228-3240927"->{
  Cell[494423, 9224, 312, 5, 61, "Print",
   CellTags->"Info3643557228-3240927"]},
 "Info3643558026-7008490"->{
  Cell[220228, 4301, 578, 9, 113, "Print",
   CellTags->"Info3643558026-7008490"]},
 "Info3643558416-7008490"->{
  Cell[393070, 7237, 393, 6, 79, "Print",
   CellTags->"Info3643558416-7008490"]},
 "Info3643559706-7008490"->{
  Cell[209060, 3968, 375, 6, 61, "Print",
   CellTags->"Info3643559706-7008490"]},
 "Info3643560126-3324954"->{
  Cell[213767, 4114, 340, 6, 61, "Print",
   CellTags->"Info3643560126-3324954"]},
 "Info3643561028-1762344"->{
  Cell[502820, 9479, 329, 5, 79, "Print",
   CellTags->"Info3643561028-1762344"]},
 "Info3643561663-3675405"->{
  Cell[188707, 3443, 1960, 27, 434, "Print",
   CellTags->"Info3643561663-3675405"]},
 "Info3643565099-3675405"->{
  Cell[187354, 3402, 563, 8, 112, "Print",
   CellTags->"Info3643565099-3675405"]},
 "Info3643565176-3675405"->{
  Cell[402143, 7483, 325, 5, 61, "Print",
   CellTags->"Info3643565176-3675405"]},
 "Info3643565201-3675405"->{
  Cell[485191, 8924, 355, 6, 79, "Print",
   CellTags->"Info3643565201-3675405"]},
 "Info3643565938-3675405"->{
  Cell[492091, 9145, 242, 4, 43, "Print",
   CellTags->"Info3643565938-3675405"]},
 "Info3643566076-3675405"->{
  Cell[488141, 9011, 230, 4, 43, "Print",
   CellTags->"Info3643566076-3675405"]},
 "Info3643566582-6300800"->{
  Cell[493168, 9183, 395, 7, 97, "Print",
   CellTags->"Info3643566582-6300800"]},
 "Info3643566691-6300800"->{
  Cell[486478, 8965, 830, 12, 169, "Print",
   CellTags->"Info3643566691-6300800"]},
 "Info3643566989-6300800"->{
  Cell[181081, 3227, 327, 6, 61, "Print",
   CellTags->"Info3643566989-6300800"]},
 "Info3643622094-4641653"->{
  Cell[630060, 11916, 804, 12, 149, "Print",
   CellTags->"Info3643622094-4641653"]},
 "Info3643622480-4641653"->{
  Cell[631399, 11950, 1018, 15, 223, "Print",
   CellTags->"Info3643622480-4641653"]},
 "Info3643622489-4641653"->{
  Cell[632590, 11974, 268, 5, 61, "Print",
   CellTags->"Info3643622489-4641653"]},
 "Info3643622524-4641653"->{
  Cell[633395, 12001, 932, 13, 187, "Print",
   CellTags->"Info3643622524-4641653"]},
 "Info3643622532-4641653"->{
  Cell[634873, 12036, 974, 15, 187, "Print",
   CellTags->"Info3643622532-4641653"]},
 "Info3643622537-4641653"->{
  Cell[636394, 12074, 414, 7, 97, "Print",
   CellTags->"Info3643622537-4641653"]},
 "Info3643622554-4641653"->{
  Cell[637390, 12105, 1641, 23, 349, "Print",
   CellTags->"Info3643622554-4641653"]},
 "Info3643622562-4641653"->{
  Cell[639572, 12151, 225, 4, 43, "Print",
   CellTags->"Info3643622562-4641653"]},
 "Info3643622566-4641653"->{
  Cell[640300, 12178, 236, 4, 43, "Print",
   CellTags->"Info3643622566-4641653"]},
 "Info3643622570-4641653"->{
  Cell[641071, 12205, 239, 4, 43, "Print",
   CellTags->"Info3643622570-4641653"]},
 "Info3643622577-4641653"->{
  Cell[642015, 12236, 408, 7, 79, "Print",
   CellTags->"Info3643622577-4641653"]},
 "Info3643622581-4641653"->{
  Cell[642582, 12252, 292, 5, 61, "Print",
   CellTags->"Info3643622581-4641653"]},
 "Info3643622583-4641653"->{
  Cell[643037, 12266, 292, 5, 61, "Print",
   CellTags->"Info3643622583-4641653"]},
 "Info3643622586-4641653"->{
  Cell[643491, 12280, 288, 5, 61, "Print",
   CellTags->"Info3643622586-4641653"]},
 "Info3643622591-4641653"->{
  Cell[643940, 12294, 292, 5, 61, "Print",
   CellTags->"Info3643622591-4641653"]},
 "Info3643622594-4641653"->{
  Cell[644398, 12308, 292, 5, 61, "Print",
   CellTags->"Info3643622594-4641653"]},
 "Info3643622598-4641653"->{
  Cell[644851, 12322, 344, 6, 61, "Print",
   CellTags->"Info3643622598-4641653"]},
 "Info3643622603-4641653"->{
  Cell[645357, 12337, 307, 5, 61, "Print",
   CellTags->"Info3643622603-4641653"]},
 "Info3643622614-4641653"->{
  Cell[646191, 12365, 1694, 23, 385, "Print",
   CellTags->"Info3643622614-4641653"]},
 "Info3643622621-4641653"->{
  Cell[648423, 12411, 450, 7, 97, "Print",
   CellTags->"Info3643622621-4641653"]},
 "Info3643622626-4641653"->{
  Cell[649420, 12441, 486, 8, 97, "Print",
   CellTags->"Info3643622626-4641653"]},
 "Info3643622638-4641653"->{
  Cell[650435, 12472, 1462, 20, 295, "Print",
   CellTags->"Info3643622638-4641653"]},
 "Info3643622645-4641653"->{
  Cell[652440, 12515, 595, 9, 115, "Print",
   CellTags->"Info3643622645-4641653"]},
 "Info3643622652-4641653"->{
  Cell[653586, 12547, 768, 11, 151, "Print",
   CellTags->"Info3643622652-4641653"]},
 "Info3643622660-4641653"->{
  Cell[654909, 12581, 801, 12, 149, "Print",
   CellTags->"Info3643622660-4641653"]},
 "Info3643622672-4641653"->{
  Cell[656265, 12616, 427, 7, 79, "Print",
   CellTags->"Info3643622672-4641653"]},
 "Info3643622675-4641653"->{
  Cell[656858, 12632, 225, 4, 43, "Print",
   CellTags->"Info3643622675-4641653"]},
 "Info3643622683-4641653"->{
  Cell[657686, 12660, 608, 9, 133, "Print",
   CellTags->"Info3643622683-4641653"]},
 "Info3643623017-4641653"->{
  Cell[658833, 12691, 635, 10, 115, "Print",
   CellTags->"Info3643623017-4641653"]},
 "Info3643623022-4641653"->{
  Cell[660012, 12723, 522, 9, 97, "Print",
   CellTags->"Info3643623022-4641653"]},
 "Info3643629068-4641653"->{
  Cell[662817, 12801, 509, 8, 94, "Print",
   CellTags->"Info3643629068-4641653"]},
 "Info3643629073-4641653"->{
  Cell[665466, 12872, 1113, 16, 223, "Print",
   CellTags->"Info3643629073-4641653"]},
 "Info3643629078-4641653"->{
  Cell[667050, 12910, 711, 11, 130, "Print",
   CellTags->"Info3643629078-4641653"]},
 "Info3643629083-4641653"->{
  Cell[668234, 12943, 897, 13, 201, "Print",
   CellTags->"Info3643629083-4641653"]},
 "Info3643629088-4641653"->{
  Cell[669612, 12978, 297, 5, 61, "Print",
   CellTags->"Info3643629088-4641653"]},
 "Info3643629095-4641653"->{
  Cell[670402, 13005, 393, 6, 79, "Print",
   CellTags->"Info3643629095-4641653"]},
 "Info3643629098-4641653"->{
  Cell[671255, 13033, 6713, 90, 1471, "Print",
   CellTags->"Info3643629098-4641653"]},
 "Info3643629103-4641653"->{
  Cell[678431, 13145, 247, 5, 43, "Print",
   CellTags->"Info3643629103-4641653"]},
 "Info3643629108-4641653"->{
  Cell[679142, 13172, 302, 5, 61, "Print",
   CellTags->"Info3643629108-4641653"]},
 "Info3643629112-4641653"->{
  Cell[679901, 13199, 611, 13, 42, "Print",
   CellTags->"Info3643629112-4641653"]},
 "Info3643629115-4641653"->{
  Cell[680973, 13234, 422, 7, 97, "Print",
   CellTags->"Info3643629115-4641653"]},
 "Info3643629118-4641653"->{
  Cell[681848, 13263, 752, 16, 58, "Print",
   CellTags->"Info3643629118-4641653"]},
 "Info3643629122-4641653"->{
  Cell[683065, 13301, 356, 6, 76, "Print",
   CellTags->"Info3643629122-4641653"]},
 "Info3643629133-4641653"->{
  Cell[683874, 13329, 341, 6, 61, "Print",
   CellTags->"Info3643629133-4641653"]},
 "Info3643629137-4641653"->{
  Cell[684684, 13357, 233, 4, 43, "Print",
   CellTags->"Info3643629137-4641653"]},
 "Info3643629142-4641653"->{
  Cell[685387, 13383, 234, 4, 43, "Print",
   CellTags->"Info3643629142-4641653"]},
 "Info3643629145-4641653"->{
  Cell[686075, 13409, 383, 6, 79, "Print",
   CellTags->"Info3643629145-4641653"]},
 "Info3643629148-4641653"->{
  Cell[686937, 13438, 239, 4, 43, "Print",
   CellTags->"Info3643629148-4641653"]},
 "Info3643629152-4641653"->{
  Cell[687641, 13464, 245, 4, 43, "Print",
   CellTags->"Info3643629152-4641653"]},
 "Info3643629156-4641653"->{
  Cell[688350, 13490, 271, 5, 61, "Print",
   CellTags->"Info3643629156-4641653"]},
 "Info3643629160-4641653"->{
  Cell[689076, 13517, 217, 4, 43, "Print",
   CellTags->"Info3643629160-4641653"]},
 "Info3643629165-4641653"->{
  Cell[689748, 13543, 260, 5, 61, "Print",
   CellTags->"Info3643629165-4641653"]},
 "Info3643629168-4641653"->{
  Cell[690461, 13570, 269, 5, 61, "Print",
   CellTags->"Info3643629168-4641653"]},
 "Info3643629172-4641653"->{
  Cell[691187, 13597, 317, 5, 61, "Print",
   CellTags->"Info3643629172-4641653"]},
 "Info3643629176-4641653"->{
  Cell[691972, 13624, 233, 4, 43, "Print",
   CellTags->"Info3643629176-4641653"]},
 "Info3643629181-4641653"->{
  Cell[692676, 13650, 236, 4, 43, "Print",
   CellTags->"Info3643629181-4641653"]},
 "Info3643629185-4641653"->{
  Cell[693391, 13676, 790, 11, 169, "Print",
   CellTags->"Info3643629185-4641653"]},
 "Info3643629190-4641653"->{
  Cell[694660, 13709, 393, 7, 97, "Print",
   CellTags->"Info3643629190-4641653"]},
 "Info3643629195-4641653"->{
  Cell[695536, 13738, 489, 8, 97, "Print",
   CellTags->"Info3643629195-4641653"]},
 "Info3643629201-4641653"->{
  Cell[696493, 13768, 556, 9, 115, "Print",
   CellTags->"Info3643629201-4641653"]},
 "Info3643629205-4641653"->{
  Cell[697520, 13799, 235, 4, 43, "Print",
   CellTags->"Info3643629205-4641653"]},
 "Info3643629210-4641653"->{
  Cell[698232, 13825, 237, 4, 43, "Print",
   CellTags->"Info3643629210-4641653"]},
 "Info3643629215-4641653"->{
  Cell[698946, 13851, 239, 4, 43, "Print",
   CellTags->"Info3643629215-4641653"]},
 "Info3643629220-4641653"->{
  Cell[699656, 13877, 233, 4, 43, "Print",
   CellTags->"Info3643629220-4641653"]},
 "Info3643629224-4641653"->{
  Cell[700360, 13903, 231, 4, 43, "Print",
   CellTags->"Info3643629224-4641653"]},
 "Info3643629229-4641653"->{
  Cell[701068, 13929, 235, 4, 43, "Print",
   CellTags->"Info3643629229-4641653"]},
 "Info3643629233-4641653"->{
  Cell[701762, 13955, 366, 6, 79, "Print",
   CellTags->"Info3643629233-4641653"]},
 "Info3643629237-4641653"->{
  Cell[702587, 13983, 366, 6, 79, "Print",
   CellTags->"Info3643629237-4641653"]},
 "Info3643629261-4641653"->{
  Cell[703425, 14011, 423, 10, 42, "Print",
   CellTags->"Info3643629261-4641653"]},
 "Info3643629266-4641653"->{
  Cell[704315, 14043, 361, 6, 79, "Print",
   CellTags->"Info3643629266-4641653"]},
 "Info3643629270-4641653"->{
  Cell[705147, 14071, 361, 6, 79, "Print",
   CellTags->"Info3643629270-4641653"]},
 "Info3643629273-4641653"->{
  Cell[705973, 14099, 615, 13, 42, "Print",
   CellTags->"Info3643629273-4641653"]},
 "Info3643629277-4641653"->{
  Cell[707053, 14134, 437, 11, 58, "Print",
   CellTags->"Info3643629277-4641653"]},
 "Info3643629281-4641653"->{
  Cell[707960, 14167, 237, 4, 43, "Print",
   CellTags->"Info3643629281-4641653"]},
 "Info3643629304-4641653"->{
  Cell[708672, 14193, 240, 5, 43, "Print",
   CellTags->"Info3643629304-4641653"]},
 "Info3643631988-4641653"->{
  Cell[715688, 14376, 328, 6, 61, "Print",
   CellTags->"Info3643631988-4641653"]},
 "Info3643632009-4641653"->{
  Cell[717308, 14431, 254, 5, 61, "Print",
   CellTags->"Info3643632009-4641653"]},
 "Info3643632032-4641653"->{
  Cell[715028, 14351, 229, 4, 43, "Print",
   CellTags->"Info3643632032-4641653"]},
 "Info3643632067-4641653"->{
  Cell[716442, 14403, 433, 7, 79, "Print",
   CellTags->"Info3643632067-4641653"]},
 "Info3643632091-4641653"->{
  Cell[711108, 14270, 927, 14, 203, "Print",
   CellTags->"Info3643632091-4641653"]},
 "Info3643632104-4641653"->{
  Cell[712343, 14300, 2260, 31, 439, "Print",
   CellTags->"Info3643632104-4641653"]},
 "Info3643696091-2659506"->{
  Cell[783077, 15628, 798, 12, 133, "Print",
   CellTags->"Info3643696091-2659506"]},
 "Info3643698317-2659506"->{
  Cell[796834, 15947, 264, 5, 43, "Print",
   CellTags->"Info3643698317-2659506"],
  Cell[797554, 15973, 831, 12, 133, "Print",
   CellTags->"Info3643698317-2659506"],
  Cell[801991, 16097, 248, 5, 43, "Print",
   CellTags->"Info3643698317-2659506"]},
 "Info3643698377-2659506"->{
  Cell[793971, 15893, 2418, 33, 475, "Print",
   CellTags->"Info3643698377-2659506"]},
 "Info3643698395-2659506"->{
  Cell[798883, 16007, 881, 13, 151, "Print",
   CellTags->"Info3643698395-2659506"]},
 "Info3643698874-2659506"->{
  Cell[802698, 16123, 1272, 18, 221, "Print",
   CellTags->"Info3643698874-2659506"],
  Cell[804437, 16162, 413, 7, 79, "Print",
   CellTags->"Info3643698874-2659506"]},
 "Info3643698875-2659506"->{
  Cell[800195, 16041, 387, 6, 79, "Print",
   CellTags->"Info3643698875-2659506"],
  Cell[801016, 16068, 532, 8, 97, "Print",
   CellTags->"Info3643698875-2659506"]},
 "Info3643699069-2659506"->{
  Cell[781544, 15592, 1068, 15, 187, "Print",
   CellTags->"Info3643699069-2659506"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Info3643554561-3240927", 805570, 16197},
 {"Info3643557228-3240927", 805683, 16200},
 {"Info3643558026-7008490", 805795, 16203},
 {"Info3643558416-7008490", 805908, 16206},
 {"Info3643559706-7008490", 806020, 16209},
 {"Info3643560126-3324954", 806132, 16212},
 {"Info3643561028-1762344", 806244, 16215},
 {"Info3643561663-3675405", 806356, 16218},
 {"Info3643565099-3675405", 806471, 16221},
 {"Info3643565176-3675405", 806584, 16224},
 {"Info3643565201-3675405", 806696, 16227},
 {"Info3643565938-3675405", 806808, 16230},
 {"Info3643566076-3675405", 806920, 16233},
 {"Info3643566582-6300800", 807032, 16236},
 {"Info3643566691-6300800", 807144, 16239},
 {"Info3643566989-6300800", 807258, 16242},
 {"Info3643622094-4641653", 807370, 16245},
 {"Info3643622480-4641653", 807485, 16248},
 {"Info3643622489-4641653", 807601, 16251},
 {"Info3643622524-4641653", 807714, 16254},
 {"Info3643622532-4641653", 807829, 16257},
 {"Info3643622537-4641653", 807944, 16260},
 {"Info3643622554-4641653", 808057, 16263},
 {"Info3643622562-4641653", 808173, 16266},
 {"Info3643622566-4641653", 808286, 16269},
 {"Info3643622570-4641653", 808399, 16272},
 {"Info3643622577-4641653", 808512, 16275},
 {"Info3643622581-4641653", 808625, 16278},
 {"Info3643622583-4641653", 808738, 16281},
 {"Info3643622586-4641653", 808851, 16284},
 {"Info3643622591-4641653", 808964, 16287},
 {"Info3643622594-4641653", 809077, 16290},
 {"Info3643622598-4641653", 809190, 16293},
 {"Info3643622603-4641653", 809303, 16296},
 {"Info3643622614-4641653", 809416, 16299},
 {"Info3643622621-4641653", 809532, 16302},
 {"Info3643622626-4641653", 809645, 16305},
 {"Info3643622638-4641653", 809758, 16308},
 {"Info3643622645-4641653", 809874, 16311},
 {"Info3643622652-4641653", 809988, 16314},
 {"Info3643622660-4641653", 810103, 16317},
 {"Info3643622672-4641653", 810218, 16320},
 {"Info3643622675-4641653", 810331, 16323},
 {"Info3643622683-4641653", 810444, 16326},
 {"Info3643623017-4641653", 810558, 16329},
 {"Info3643623022-4641653", 810673, 16332},
 {"Info3643629068-4641653", 810786, 16335},
 {"Info3643629073-4641653", 810899, 16338},
 {"Info3643629078-4641653", 811015, 16341},
 {"Info3643629083-4641653", 811130, 16344},
 {"Info3643629088-4641653", 811245, 16347},
 {"Info3643629095-4641653", 811358, 16350},
 {"Info3643629098-4641653", 811471, 16353},
 {"Info3643629103-4641653", 811588, 16356},
 {"Info3643629108-4641653", 811701, 16359},
 {"Info3643629112-4641653", 811814, 16362},
 {"Info3643629115-4641653", 811928, 16365},
 {"Info3643629118-4641653", 812041, 16368},
 {"Info3643629122-4641653", 812155, 16371},
 {"Info3643629133-4641653", 812268, 16374},
 {"Info3643629137-4641653", 812381, 16377},
 {"Info3643629142-4641653", 812494, 16380},
 {"Info3643629145-4641653", 812607, 16383},
 {"Info3643629148-4641653", 812720, 16386},
 {"Info3643629152-4641653", 812833, 16389},
 {"Info3643629156-4641653", 812946, 16392},
 {"Info3643629160-4641653", 813059, 16395},
 {"Info3643629165-4641653", 813172, 16398},
 {"Info3643629168-4641653", 813285, 16401},
 {"Info3643629172-4641653", 813398, 16404},
 {"Info3643629176-4641653", 813511, 16407},
 {"Info3643629181-4641653", 813624, 16410},
 {"Info3643629185-4641653", 813737, 16413},
 {"Info3643629190-4641653", 813852, 16416},
 {"Info3643629195-4641653", 813965, 16419},
 {"Info3643629201-4641653", 814078, 16422},
 {"Info3643629205-4641653", 814192, 16425},
 {"Info3643629210-4641653", 814305, 16428},
 {"Info3643629215-4641653", 814418, 16431},
 {"Info3643629220-4641653", 814531, 16434},
 {"Info3643629224-4641653", 814644, 16437},
 {"Info3643629229-4641653", 814757, 16440},
 {"Info3643629233-4641653", 814870, 16443},
 {"Info3643629237-4641653", 814983, 16446},
 {"Info3643629261-4641653", 815096, 16449},
 {"Info3643629266-4641653", 815210, 16452},
 {"Info3643629270-4641653", 815323, 16455},
 {"Info3643629273-4641653", 815436, 16458},
 {"Info3643629277-4641653", 815550, 16461},
 {"Info3643629281-4641653", 815664, 16464},
 {"Info3643629304-4641653", 815777, 16467},
 {"Info3643631988-4641653", 815890, 16470},
 {"Info3643632009-4641653", 816003, 16473},
 {"Info3643632032-4641653", 816116, 16476},
 {"Info3643632067-4641653", 816229, 16479},
 {"Info3643632091-4641653", 816342, 16482},
 {"Info3643632104-4641653", 816457, 16485},
 {"Info3643696091-2659506", 816573, 16488},
 {"Info3643698317-2659506", 816688, 16491},
 {"Info3643698377-2659506", 816969, 16498},
 {"Info3643698395-2659506", 817085, 16501},
 {"Info3643698874-2659506", 817200, 16504},
 {"Info3643698875-2659506", 817399, 16509},
 {"Info3643699069-2659506", 817595, 16514}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 109, 1, 92, "Title"],
Cell[692, 25, 125, 1, 51, "Subtitle"],
Cell[CellGroupData[{
Cell[842, 30, 236, 7, 65, "Chapter"],
Cell[CellGroupData[{
Cell[1103, 41, 227, 3, 62, "Subchapter"],
Cell[1333, 46, 723, 19, 121, "Text"],
Cell[CellGroupData[{
Cell[2081, 69, 236, 6, 51, "Item"],
Cell[2320, 77, 348, 8, 51, "Item"],
Cell[2671, 87, 262, 6, 51, "Item"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2982, 99, 107, 1, 62, "Subchapter"],
Cell[3092, 102, 672, 11, 121, "Text"],
Cell[CellGroupData[{
Cell[3789, 117, 569, 11, 91, "Item"],
Cell[4361, 130, 964, 21, 151, "Item"],
Cell[5328, 153, 948, 19, 171, "Item"],
Cell[6279, 174, 806, 15, 131, "Item"],
Cell[7088, 191, 624, 12, 91, "Item"],
Cell[7715, 205, 619, 12, 91, "Item"],
Cell[8337, 219, 575, 11, 71, "Item"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[8961, 236, 176, 2, 62, "Subchapter"],
Cell[9140, 240, 593, 10, 77, "Text"],
Cell[9736, 252, 1531, 27, 198, "Item"],
Cell[11270, 281, 2388, 43, 550, "Program"],
Cell[13661, 326, 972, 16, 113, "Item"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14670, 347, 115, 1, 62, "Subchapter"],
Cell[14788, 350, 319, 9, 55, "Text"],
Cell[15110, 361, 122, 2, 28, "Input"],
Cell[15235, 365, 224, 5, 55, "Text"],
Cell[15462, 372, 194, 4, 28, "Input",
 Evaluatable->False],
Cell[15659, 378, 741, 13, 165, "Text"],
Cell[16403, 393, 264, 6, 28, "Input"],
Cell[16670, 401, 208, 5, 55, "Text"],
Cell[CellGroupData[{
Cell[16903, 410, 144, 2, 28, "Input",
 Evaluatable->False],
Cell[17050, 414, 252, 4, 28, "Output"]
}, Open  ]],
Cell[17317, 421, 404, 8, 77, "Text"],
Cell[17724, 431, 343, 10, 46, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[18116, 447, 236, 7, 65, "Chapter"],
Cell[CellGroupData[{
Cell[18377, 458, 102, 1, 62, "Subchapter"],
Cell[18482, 461, 817, 14, 165, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19336, 480, 99, 1, 62, "Subchapter"],
Cell[CellGroupData[{
Cell[19460, 485, 97, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[19582, 490, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[19705, 495, 120, 2, 28, "Input"],
Cell[19828, 499, 1577, 22, 349, "Print",
 CellTags->"Info3643554561-3240927"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[21454, 527, 152, 2, 35, "Subsubsection"],
Cell[21609, 531, 895, 17, 187, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22541, 553, 99, 1, 35, "Subsubsection"],
Cell[22643, 556, 491, 10, 143, "Text"],
Cell[CellGroupData[{
Cell[23159, 570, 347, 10, 28, "Input",
 Evaluatable->False],
Cell[23509, 582, 128823, 2119, 312, "Output"]
}, Open  ]],
Cell[152347, 2704, 803, 17, 97, "Input"],
Cell[CellGroupData[{
Cell[153175, 2725, 229, 5, 46, "Input"],
Cell[153407, 2732, 13016, 220, 83, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[166460, 2957, 191, 4, 28, "Input"],
Cell[166654, 2963, 13351, 225, 83, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[180042, 3193, 121, 2, 28, "Input"],
Cell[180166, 3197, 73, 1, 28, "Output"]
}, Open  ]],
Cell[180254, 3201, 396, 6, 99, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[180699, 3213, 105, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[180829, 3218, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[180954, 3223, 124, 2, 28, "Input"],
Cell[181081, 3227, 327, 6, 61, "Print",
 CellTags->"Info3643566989-6300800"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[181457, 3239, 102, 1, 35, "Subsubsection"],
Cell[181562, 3242, 572, 12, 143, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182171, 3259, 99, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[182295, 3264, 131, 2, 28, "Input"],
Cell[182429, 3268, 96, 1, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182562, 3274, 1154, 22, 250, "Input"],
Cell[183719, 3298, 247, 3, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[184003, 3306, 175, 4, 28, "Input"],
Cell[184181, 3312, 390, 7, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[184608, 3324, 870, 22, 114, "Input"],
Cell[185481, 3348, 219, 3, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[185737, 3356, 146, 2, 28, "Input"],
Cell[185886, 3360, 677, 9, 182, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186600, 3374, 225, 4, 28, "Input"],
Cell[186828, 3380, 99, 1, 62, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[186988, 3388, 95, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[187108, 3393, 102, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[187235, 3398, 116, 2, 28, "Input"],
Cell[187354, 3402, 563, 8, 112, "Print",
 CellTags->"Info3643565099-3675405"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[187966, 3416, 100, 1, 35, "Subsubsection"],
Cell[188069, 3419, 209, 4, 55, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[188327, 3429, 103, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[188455, 3434, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[188578, 3439, 126, 2, 28, "Input"],
Cell[188707, 3443, 1960, 27, 434, "Print",
 CellTags->"Info3643561663-3675405"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[190716, 3476, 102, 1, 35, "Subsubsection"],
Cell[190821, 3479, 1810, 30, 539, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[192668, 3514, 99, 1, 35, "Subsubsection"],
Cell[192770, 3517, 279, 6, 55, "Text"],
Cell[193052, 3525, 6110, 145, 607, "Input"],
Cell[199165, 3672, 1190, 28, 131, "Input"],
Cell[CellGroupData[{
Cell[200380, 3704, 133, 2, 28, "Input"],
Cell[200516, 3708, 769, 22, 58, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[201322, 3735, 132, 2, 28, "Input"],
Cell[201457, 3739, 242, 4, 28, "Output"]
}, Open  ]],
Cell[201714, 3746, 207, 4, 55, "Text"],
Cell[CellGroupData[{
Cell[201946, 3754, 162, 3, 28, "Input"],
Cell[202111, 3759, 354, 8, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[202502, 3772, 96, 2, 28, "Input"],
Cell[202601, 3776, 187, 6, 28, "Output"]
}, Open  ]],
Cell[202803, 3785, 209, 4, 55, "Text"],
Cell[203015, 3791, 265, 7, 28, "Input"],
Cell[CellGroupData[{
Cell[203305, 3802, 167, 3, 28, "Input"],
Cell[203475, 3807, 212, 6, 28, "Output"]
}, Open  ]],
Cell[203702, 3816, 186, 4, 33, "Text"],
Cell[203891, 3822, 287, 7, 28, "Input"],
Cell[CellGroupData[{
Cell[204203, 3833, 167, 3, 28, "Input"],
Cell[204373, 3838, 186, 6, 28, "Output"]
}, Open  ]],
Cell[204574, 3847, 126, 1, 33, "Text"],
Cell[CellGroupData[{
Cell[204725, 3852, 204, 4, 28, "Input"],
Cell[204932, 3858, 303, 8, 24, "Message"],
Cell[205238, 3868, 465, 10, 24, "Message"],
Cell[205706, 3880, 526, 11, 24, "Message"],
Cell[206235, 3893, 719, 13, 42, "Message"],
Cell[206957, 3908, 662, 12, 43, "Message"],
Cell[207622, 3922, 443, 10, 24, "Message"],
Cell[208068, 3934, 490, 10, 24, "Message"],
Cell[208561, 3946, 78, 1, 62, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[208700, 3954, 94, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[208819, 3959, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[208942, 3964, 115, 2, 28, "Input"],
Cell[209060, 3968, 375, 6, 61, "Print",
 CellTags->"Info3643559706-7008490"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[209484, 3980, 100, 1, 35, "Subsubsection"],
Cell[209587, 3983, 338, 6, 99, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[209962, 3994, 101, 1, 35, "Subsubsection"],
Cell[210066, 3997, 137, 2, 28, "Input"],
Cell[210206, 4001, 518, 12, 28, "Input"],
Cell[CellGroupData[{
Cell[210749, 4017, 425, 11, 28, "Input"],
Cell[211177, 4030, 809, 21, 74, "Output"]
}, Open  ]],
Cell[212001, 4054, 135, 2, 28, "Input"],
Cell[CellGroupData[{
Cell[212161, 4060, 446, 11, 28, "Input"],
Cell[212610, 4073, 732, 20, 74, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[213403, 4100, 95, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[213523, 4105, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[213648, 4110, 116, 2, 28, "Input"],
Cell[213767, 4114, 340, 6, 61, "Print",
 CellTags->"Info3643560126-3324954"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[214156, 4126, 106, 1, 35, "Subsubsection"],
Cell[214265, 4129, 551, 11, 143, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[214853, 4145, 99, 1, 35, "Subsubsection"],
Cell[214955, 4148, 235, 6, 28, "Input"],
Cell[CellGroupData[{
Cell[215215, 4158, 300, 7, 28, "Input"],
Cell[215518, 4167, 473, 10, 46, "Output"]
}, Open  ]],
Cell[216006, 4180, 535, 11, 63, "Input"],
Cell[CellGroupData[{
Cell[216566, 4195, 128, 2, 28, "Input"],
Cell[216697, 4199, 77, 1, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[216811, 4205, 175, 4, 28, "Input"],
Cell[216989, 4211, 1232, 19, 97, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[218258, 4235, 437, 11, 63, "Input"],
Cell[218698, 4248, 180, 4, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[218915, 4257, 345, 10, 28, "Input"],
Cell[219263, 4269, 544, 11, 46, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[219868, 4287, 95, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[219988, 4292, 97, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[220110, 4297, 115, 2, 28, "Input"],
Cell[220228, 4301, 578, 9, 113, "Print",
 CellTags->"Info3643558026-7008490"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[220855, 4316, 102, 1, 35, "Subsubsection"],
Cell[220960, 4319, 662, 12, 209, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[221659, 4336, 101, 1, 35, "Subsubsection"],
Cell[221763, 4339, 195, 2, 33, "Text"],
Cell[CellGroupData[{
Cell[221983, 4345, 347, 10, 28, "Input",
 Evaluatable->False],
Cell[222333, 4357, 128823, 2119, 312, "Output"]
}, Open  ]],
Cell[351171, 6479, 701, 15, 80, "Input"],
Cell[CellGroupData[{
Cell[351897, 6498, 263, 6, 46, "Input"],
Cell[352163, 6506, 13109, 221, 83, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[365309, 6732, 225, 5, 28, "Input"],
Cell[365537, 6739, 13073, 221, 83, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[378647, 6965, 204, 5, 28, "Input"],
Cell[378854, 6972, 75, 1, 28, "Output"]
}, Open  ]],
Cell[378944, 6976, 153, 3, 33, "Text"],
Cell[CellGroupData[{
Cell[379122, 6983, 301, 7, 46, "Input"],
Cell[379426, 6992, 13116, 222, 83, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[392603, 7221, 150, 2, 36, "Subsection"],
Cell[CellGroupData[{
Cell[392778, 7227, 97, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[392900, 7232, 167, 3, 28, "Input"],
Cell[393070, 7237, 393, 6, 79, "Print",
 CellTags->"Info3643558416-7008490"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[393512, 7249, 102, 1, 35, "Subsubsection"],
Cell[393617, 7252, 752, 13, 209, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[394406, 7270, 101, 1, 35, "Subsubsection"],
Cell[394510, 7273, 282, 6, 55, "Text"],
Cell[394795, 7281, 1245, 28, 114, "Input"],
Cell[396043, 7311, 371, 6, 99, "Text"],
Cell[CellGroupData[{
Cell[396439, 7321, 395, 9, 63, "Input"],
Cell[396837, 7332, 524, 12, 39, "Message"],
Cell[397364, 7346, 556, 12, 24, "Message"],
Cell[397923, 7360, 151, 3, 28, "Output"]
}, Open  ]],
Cell[398089, 7366, 183, 4, 55, "Text"],
Cell[CellGroupData[{
Cell[398297, 7374, 134, 2, 28, "Input"],
Cell[398434, 7378, 159, 3, 32, "Output"]
}, Open  ]],
Cell[398608, 7384, 162, 3, 33, "Text"],
Cell[CellGroupData[{
Cell[398795, 7391, 1727, 40, 250, "Input"],
Cell[400525, 7433, 467, 10, 39, "Message"],
Cell[400995, 7445, 498, 10, 24, "Message"],
Cell[401496, 7457, 206, 5, 35, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[401763, 7469, 101, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[401889, 7474, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[402014, 7479, 126, 2, 28, "Input"],
Cell[402143, 7483, 325, 5, 61, "Print",
 CellTags->"Info3643565176-3675405"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[402517, 7494, 102, 1, 35, "Subsubsection"],
Cell[402622, 7497, 234, 5, 55, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[402893, 7507, 99, 1, 35, "Subsubsection"],
Cell[402995, 7510, 183, 2, 33, "Text"],
Cell[CellGroupData[{
Cell[403203, 7516, 242, 6, 28, "Input"],
Cell[403448, 7524, 21740, 360, 320, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[425225, 7889, 724, 18, 63, "Input"],
Cell[425952, 7909, 216, 4, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[426205, 7918, 365, 8, 63, "Input"],
Cell[426573, 7928, 196, 5, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[426806, 7938, 752, 18, 114, "Input"],
Cell[427561, 7958, 57185, 945, 212, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[484807, 8910, 104, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[484936, 8915, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[485061, 8920, 127, 2, 28, "Input"],
Cell[485191, 8924, 355, 6, 79, "Print",
 CellTags->"Info3643565201-3675405"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[485595, 8936, 102, 1, 35, "Subsubsection"],
Cell[485700, 8939, 341, 6, 77, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[486090, 8951, 109, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[486224, 8956, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[486347, 8961, 128, 2, 28, "Input"],
Cell[486478, 8965, 830, 12, 169, "Print",
 CellTags->"Info3643566691-6300800"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[487357, 8983, 104, 1, 35, "Subsubsection"],
Cell[487464, 8986, 258, 5, 55, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[487771, 8997, 100, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[487896, 9002, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[488021, 9007, 117, 2, 28, "Input"],
Cell[488141, 9011, 230, 4, 43, "Print",
 CellTags->"Info3643566076-3675405"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[488420, 9021, 104, 1, 35, "Subsubsection"],
Cell[488527, 9024, 193, 4, 55, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[488757, 9033, 99, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[488881, 9038, 432, 10, 80, "Input"],
Cell[489316, 9050, 193, 4, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[489546, 9059, 453, 13, 46, "Input"],
Cell[490002, 9074, 143, 3, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[490182, 9082, 302, 6, 63, "Input"],
Cell[490487, 9090, 318, 6, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[490842, 9101, 297, 6, 63, "Input"],
Cell[491142, 9109, 245, 5, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[491424, 9119, 132, 2, 28, "Input"],
Cell[491559, 9123, 99, 1, 62, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[491719, 9131, 101, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[491845, 9136, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[491968, 9141, 120, 2, 28, "Input"],
Cell[492091, 9145, 242, 4, 43, "Print",
 CellTags->"Info3643565938-3675405"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[492382, 9155, 101, 1, 35, "Subsubsection"],
Cell[492486, 9158, 253, 5, 77, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[492788, 9169, 92, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[492905, 9174, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[493030, 9179, 135, 2, 28, "Input"],
Cell[493168, 9183, 395, 7, 97, "Print",
 CellTags->"Info3643566582-6300800"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[493612, 9196, 102, 1, 35, "Subsubsection"],
Cell[493717, 9199, 292, 5, 77, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[494058, 9210, 97, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[494180, 9215, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[494305, 9220, 115, 2, 28, "Input"],
Cell[494423, 9224, 312, 5, 61, "Print",
 CellTags->"Info3643557228-3240927"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[494784, 9235, 100, 1, 35, "Subsubsection"],
Cell[494887, 9238, 287, 5, 55, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[495211, 9248, 99, 1, 35, "Subsubsection"],
Cell[495313, 9251, 401, 10, 28, "Input"],
Cell[CellGroupData[{
Cell[495739, 9265, 299, 7, 28, "Input"],
Cell[496041, 9274, 445, 10, 39, "Message"],
Cell[496489, 9286, 445, 10, 39, "Message"],
Cell[496937, 9298, 289, 6, 47, "Output"]
}, Open  ]],
Cell[497241, 9307, 200, 4, 55, "Text"],
Cell[CellGroupData[{
Cell[497466, 9315, 130, 2, 28, "Input"],
Cell[497599, 9319, 83, 1, 28, "Output"]
}, Open  ]],
Cell[497697, 9323, 90, 2, 28, "Input"],
Cell[497790, 9327, 437, 10, 63, "Input"],
Cell[CellGroupData[{
Cell[498252, 9341, 246, 6, 28, "Input"],
Cell[498501, 9349, 469, 10, 39, "Message"],
Cell[498973, 9361, 501, 10, 24, "Message"],
Cell[499477, 9373, 471, 10, 39, "Message"],
Cell[499951, 9385, 469, 10, 39, "Message"],
Cell[500423, 9397, 552, 11, 24, "Message"],
Cell[500978, 9410, 365, 7, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[501380, 9422, 130, 2, 28, "Input"],
Cell[501513, 9426, 70, 1, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[501620, 9432, 132, 2, 28, "Input"],
Cell[501755, 9436, 70, 1, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[501862, 9442, 218, 5, 28, "Input"],
Cell[502083, 9449, 298, 9, 28, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[502442, 9465, 105, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[502572, 9470, 96, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[502693, 9475, 124, 2, 28, "Input"],
Cell[502820, 9479, 329, 5, 79, "Print",
 CellTags->"Info3643561028-1762344"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[503198, 9490, 101, 1, 35, "Subsubsection"],
Cell[503302, 9493, 389, 6, 99, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[503728, 9504, 99, 1, 35, "Subsubsection"],
Cell[503830, 9507, 3362, 56, 437, "Input"],
Cell[CellGroupData[{
Cell[507217, 9567, 263, 6, 28, "Input"],
Cell[507483, 9575, 252, 5, 28, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[507808, 9588, 98, 1, 62, "Subchapter"],
Cell[507909, 9591, 533, 10, 165, "Text"],
Cell[508445, 9603, 629, 14, 80, "Input",
 Evaluatable->False],
Cell[509077, 9619, 818, 14, 187, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[509944, 9639, 147, 5, 54, "Chapter"],
Cell[CellGroupData[{
Cell[510116, 9648, 104, 1, 62, "Subchapter"],
Cell[510223, 9651, 415, 7, 121, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[510675, 9663, 106, 1, 62, "Subchapter"],
Cell[CellGroupData[{
Cell[510806, 9668, 102, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[510933, 9673, 100, 1, 35, "Subsubsection"],
Cell[511036, 9676, 609, 11, 165, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[511682, 9692, 98, 1, 35, "Subsubsection"],
Cell[511783, 9695, 445, 7, 99, "Text"],
Cell[CellGroupData[{
Cell[512253, 9706, 166, 2, 28, "Item"],
Cell[512422, 9710, 201, 4, 28, "Item"],
Cell[512626, 9716, 202, 4, 28, "Item"],
Cell[512831, 9722, 238, 3, 28, "Item"],
Cell[513072, 9727, 304, 6, 45, "Item"],
Cell[513379, 9735, 597, 10, 96, "Item"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[514025, 9751, 98, 1, 35, "Subsubsection"],
Cell[514126, 9754, 425, 7, 121, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[514588, 9766, 101, 1, 35, "Subsubsection"],
Cell[514692, 9769, 103, 1, 33, "Text"],
Cell[CellGroupData[{
Cell[514820, 9774, 893, 22, 80, "Input"],
Cell[515716, 9798, 26871, 447, 406, "Output"]
}, Open  ]],
Cell[542602, 10248, 264, 5, 77, "Text"],
Cell[542869, 10255, 107, 1, 33, "Text"],
Cell[CellGroupData[{
Cell[543001, 10260, 463, 11, 63, "Input"],
Cell[543467, 10273, 1151, 29, 80, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[544679, 10309, 114, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[544818, 10314, 96, 1, 35, "Subsubsection"],
Cell[544917, 10317, 1152, 19, 253, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[546106, 10341, 98, 1, 35, "Subsubsection"],
Cell[546207, 10344, 209, 4, 33, "Text"],
Cell[CellGroupData[{
Cell[546441, 10352, 255, 5, 28, "Item"],
Cell[546699, 10359, 265, 5, 28, "Item"],
Cell[546967, 10366, 263, 5, 28, "Item"],
Cell[547233, 10373, 461, 8, 45, "Item"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[547743, 10387, 99, 1, 35, "Subsubsection"],
Cell[547845, 10390, 192, 2, 33, "Text"],
Cell[CellGroupData[{
Cell[548062, 10396, 756, 19, 80, "Input"],
Cell[548821, 10417, 5456, 132, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[554314, 10554, 190, 3, 28, "Input"],
Cell[554507, 10559, 64693, 1068, 447, "Output"]
}, Open  ]],
Cell[619215, 11630, 253, 5, 77, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[619517, 11641, 170, 2, 36, "Subsection"],
Cell[619690, 11645, 853, 15, 297, "Text"],
Cell[CellGroupData[{
Cell[620568, 11664, 222, 3, 28, "Item"],
Cell[620793, 11669, 171, 2, 28, "Item"],
Cell[620967, 11673, 183, 2, 28, "Item"],
Cell[621153, 11677, 173, 2, 28, "Item"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[621387, 11686, 101, 1, 62, "Subchapter"],
Cell[CellGroupData[{
Cell[621513, 11691, 168, 2, 44, "Subsection"],
Cell[CellGroupData[{
Cell[621706, 11697, 98, 1, 35, "Subsubsection"],
Cell[621807, 11700, 937, 16, 231, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[622781, 11721, 98, 1, 35, "Subsubsection"],
Cell[622882, 11724, 352, 6, 55, "Text"],
Cell[CellGroupData[{
Cell[623259, 11734, 173, 2, 28, "Item"],
Cell[623435, 11738, 334, 6, 62, "Item"],
Cell[623772, 11746, 171, 2, 28, "Item"],
Cell[623946, 11750, 347, 6, 28, "Item"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[624354, 11763, 93, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[624472, 11768, 95, 1, 35, "Subsubsection"],
Cell[624570, 11771, 481, 8, 121, "Text"],
Cell[CellGroupData[{
Cell[625076, 11783, 342, 6, 68, "ItemNumbered"],
Cell[625421, 11791, 247, 5, 49, "ItemNumbered"],
Cell[625671, 11798, 344, 6, 68, "ItemNumbered"]
}, Open  ]],
Cell[626030, 11807, 275, 5, 55, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[626342, 11817, 98, 1, 35, "Subsubsection"],
Cell[626443, 11820, 469, 8, 77, "Text"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[626973, 11835, 101, 1, 62, "Subchapter"],
Cell[627077, 11838, 1269, 20, 319, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[628395, 11864, 161, 6, 54, "Chapter"],
Cell[CellGroupData[{
Cell[628581, 11874, 150, 2, 62, "Subchapter"],
Cell[628734, 11878, 772, 14, 187, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[629543, 11897, 99, 1, 62, "Subchapter"],
Cell[CellGroupData[{
Cell[629667, 11902, 110, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[629802, 11907, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[629925, 11912, 132, 2, 28, "Input"],
Cell[630060, 11916, 804, 12, 149, "Print",
 CellTags->"Info3643622094-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[630925, 11935, 188, 2, 36, "Subsection"],
Cell[CellGroupData[{
Cell[631138, 11941, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[631261, 11946, 135, 2, 28, "Input"],
Cell[631399, 11950, 1018, 15, 223, "Print",
 CellTags->"Info3643622480-4641653"]
}, Open  ]],
Cell[CellGroupData[{
Cell[632454, 11970, 133, 2, 28, "Input"],
Cell[632590, 11974, 268, 5, 61, "Print",
 CellTags->"Info3643622489-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[632919, 11986, 115, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[633059, 11991, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[633182, 11996, 210, 3, 28, "Input"],
Cell[633395, 12001, 932, 13, 187, "Print",
 CellTags->"Info3643622524-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[634388, 12021, 118, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[634531, 12026, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[634654, 12031, 216, 3, 28, "Input"],
Cell[634873, 12036, 974, 15, 187, "Print",
 CellTags->"Info3643622532-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[635908, 12058, 143, 2, 36, "Subsection"],
Cell[CellGroupData[{
Cell[636076, 12064, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[636199, 12069, 192, 3, 28, "Input"],
Cell[636394, 12074, 414, 7, 97, "Print",
 CellTags->"Info3643622537-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[636869, 12088, 150, 2, 36, "Subsection"],
Cell[CellGroupData[{
Cell[637044, 12094, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[637167, 12099, 220, 4, 28, "Input"],
Cell[637390, 12105, 1641, 23, 349, "Print",
 CellTags->"Info3643622554-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[639092, 12135, 104, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[639221, 12140, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[639344, 12145, 225, 4, 28, "Input"],
Cell[639572, 12151, 225, 4, 43, "Print",
 CellTags->"Info3643622562-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[639858, 12162, 74, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[639957, 12167, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[640080, 12172, 217, 4, 28, "Input"],
Cell[640300, 12178, 236, 4, 43, "Print",
 CellTags->"Info3643622566-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[640597, 12189, 101, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[640723, 12194, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[640846, 12199, 222, 4, 28, "Input"],
Cell[641071, 12205, 239, 4, 43, "Print",
 CellTags->"Info3643622570-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[641371, 12216, 267, 5, 61, "Subsection"],
Cell[CellGroupData[{
Cell[641663, 12225, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[641786, 12230, 226, 4, 28, "Input"],
Cell[642015, 12236, 408, 7, 79, "Print",
 CellTags->"Info3643622577-4641653"]
}, Open  ]],
Cell[CellGroupData[{
Cell[642460, 12248, 119, 2, 28, "Input"],
Cell[642582, 12252, 292, 5, 61, "Print",
 CellTags->"Info3643622581-4641653"]
}, Open  ]],
Cell[CellGroupData[{
Cell[642911, 12262, 123, 2, 28, "Input"],
Cell[643037, 12266, 292, 5, 61, "Print",
 CellTags->"Info3643622583-4641653"]
}, Open  ]],
Cell[CellGroupData[{
Cell[643366, 12276, 122, 2, 28, "Input"],
Cell[643491, 12280, 288, 5, 61, "Print",
 CellTags->"Info3643622586-4641653"]
}, Open  ]],
Cell[CellGroupData[{
Cell[643816, 12290, 121, 2, 28, "Input"],
Cell[643940, 12294, 292, 5, 61, "Print",
 CellTags->"Info3643622591-4641653"]
}, Open  ]],
Cell[CellGroupData[{
Cell[644269, 12304, 126, 2, 28, "Input"],
Cell[644398, 12308, 292, 5, 61, "Print",
 CellTags->"Info3643622594-4641653"]
}, Open  ]],
Cell[CellGroupData[{
Cell[644727, 12318, 121, 2, 28, "Input"],
Cell[644851, 12322, 344, 6, 61, "Print",
 CellTags->"Info3643622598-4641653"]
}, Open  ]],
Cell[CellGroupData[{
Cell[645232, 12333, 122, 2, 28, "Input"],
Cell[645357, 12337, 307, 5, 61, "Print",
 CellTags->"Info3643622603-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[645725, 12349, 97, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[645847, 12354, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[645970, 12359, 218, 4, 28, "Input"],
Cell[646191, 12365, 1694, 23, 385, "Print",
 CellTags->"Info3643622614-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[647946, 12395, 102, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[648073, 12400, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[648196, 12405, 224, 4, 28, "Input"],
Cell[648423, 12411, 450, 7, 97, "Print",
 CellTags->"Info3643622621-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[648934, 12425, 108, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[649067, 12430, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[649190, 12435, 227, 4, 28, "Input"],
Cell[649420, 12441, 486, 8, 97, "Print",
 CellTags->"Info3643622626-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[649967, 12456, 99, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[650091, 12461, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[650214, 12466, 218, 4, 28, "Input"],
Cell[650435, 12472, 1462, 20, 295, "Print",
 CellTags->"Info3643622638-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[651958, 12499, 105, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[652088, 12504, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[652211, 12509, 226, 4, 28, "Input"],
Cell[652440, 12515, 595, 9, 115, "Print",
 CellTags->"Info3643622645-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[653096, 12531, 108, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[653229, 12536, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[653352, 12541, 231, 4, 28, "Input"],
Cell[653586, 12547, 768, 11, 151, "Print",
 CellTags->"Info3643622652-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[654415, 12565, 111, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[654551, 12570, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[654674, 12575, 232, 4, 28, "Input"],
Cell[654909, 12581, 801, 12, 149, "Print",
 CellTags->"Info3643622660-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[655771, 12600, 119, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[655915, 12605, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[656038, 12610, 224, 4, 28, "Input"],
Cell[656265, 12616, 427, 7, 79, "Print",
 CellTags->"Info3643622672-4641653"]
}, Open  ]],
Cell[CellGroupData[{
Cell[656729, 12628, 126, 2, 28, "Input"],
Cell[656858, 12632, 225, 4, 43, "Print",
 CellTags->"Info3643622675-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[657144, 12643, 161, 2, 36, "Subsection"],
Cell[CellGroupData[{
Cell[657330, 12649, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[657453, 12654, 230, 4, 28, "Input"],
Cell[657686, 12660, 608, 9, 133, "Print",
 CellTags->"Info3643622683-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[658355, 12676, 116, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[658496, 12681, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[658619, 12686, 211, 3, 28, "Input"],
Cell[658833, 12691, 635, 10, 115, "Print",
 CellTags->"Info3643623017-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[659529, 12708, 119, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[659673, 12713, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[659796, 12718, 213, 3, 28, "Input"],
Cell[660012, 12723, 522, 9, 97, "Print",
 CellTags->"Info3643623022-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[660619, 12741, 143, 5, 54, "Chapter"],
Cell[CellGroupData[{
Cell[660787, 12750, 102, 1, 62, "Subchapter"],
Cell[660892, 12753, 1365, 23, 297, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[662294, 12781, 99, 1, 62, "Subchapter"],
Cell[CellGroupData[{
Cell[662418, 12786, 100, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[662543, 12791, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[662668, 12796, 146, 3, 28, "Input"],
Cell[662817, 12801, 509, 8, 94, "Print",
 CellTags->"Info3643629068-4641653"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[663375, 12815, 96, 1, 35, "Subsubsection"],
Cell[663474, 12818, 735, 12, 165, "Text"],
Cell[664212, 12832, 799, 19, 114, "Input",
 Evaluatable->False]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[665060, 12857, 102, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[665187, 12862, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[665312, 12867, 151, 3, 28, "Input"],
Cell[665466, 12872, 1113, 16, 223, "Print",
 CellTags->"Info3643629073-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[666640, 12895, 107, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[666772, 12900, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[666897, 12905, 150, 3, 28, "Input"],
Cell[667050, 12910, 711, 11, 130, "Print",
 CellTags->"Info3643629078-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[667822, 12928, 107, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[667954, 12933, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[668079, 12938, 152, 3, 28, "Input"],
Cell[668234, 12943, 897, 13, 201, "Print",
 CellTags->"Info3643629083-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[669192, 12963, 112, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[669329, 12968, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[669454, 12973, 155, 3, 28, "Input"],
Cell[669612, 12978, 297, 5, 61, "Print",
 CellTags->"Info3643629088-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[669970, 12990, 117, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[670112, 12995, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[670237, 13000, 162, 3, 28, "Input"],
Cell[670402, 13005, 393, 6, 79, "Print",
 CellTags->"Info3643629095-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[670856, 13018, 102, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[670983, 13023, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[671108, 13028, 144, 3, 28, "Input"],
Cell[671255, 13033, 6713, 90, 1471, "Print",
 CellTags->"Info3643629098-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[678029, 13130, 101, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[678155, 13135, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[678280, 13140, 148, 3, 28, "Input"],
Cell[678431, 13145, 247, 5, 43, "Print",
 CellTags->"Info3643629103-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[678739, 13157, 103, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[678867, 13162, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[678992, 13167, 147, 3, 28, "Input"],
Cell[679142, 13172, 302, 5, 61, "Print",
 CellTags->"Info3643629108-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[679505, 13184, 99, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[679629, 13189, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[679754, 13194, 144, 3, 28, "Input"],
Cell[679901, 13199, 611, 13, 42, "Print",
 CellTags->"Info3643629112-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[680573, 13219, 99, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[680697, 13224, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[680822, 13229, 148, 3, 28, "Input"],
Cell[680973, 13234, 422, 7, 97, "Print",
 CellTags->"Info3643629115-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[681456, 13248, 98, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[681579, 13253, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[681704, 13258, 141, 3, 28, "Input"],
Cell[681848, 13263, 752, 16, 58, "Print",
 CellTags->"Info3643629118-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[682661, 13286, 102, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[682788, 13291, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[682913, 13296, 149, 3, 28, "Input"],
Cell[683065, 13301, 356, 6, 76, "Print",
 CellTags->"Info3643629122-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[683482, 13314, 97, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[683604, 13319, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[683729, 13324, 142, 3, 28, "Input"],
Cell[683874, 13329, 341, 6, 61, "Print",
 CellTags->"Info3643629133-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[684276, 13342, 106, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[684407, 13347, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[684532, 13352, 149, 3, 28, "Input"],
Cell[684684, 13357, 233, 4, 43, "Print",
 CellTags->"Info3643629137-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[684978, 13368, 106, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[685109, 13373, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[685234, 13378, 150, 3, 28, "Input"],
Cell[685387, 13383, 234, 4, 43, "Print",
 CellTags->"Info3643629142-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[685682, 13394, 98, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[685805, 13399, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[685930, 13404, 142, 3, 28, "Input"],
Cell[686075, 13409, 383, 6, 79, "Print",
 CellTags->"Info3643629145-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[686519, 13422, 122, 2, 36, "Subsection"],
Cell[CellGroupData[{
Cell[686666, 13428, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[686791, 13433, 143, 3, 28, "Input"],
Cell[686937, 13438, 239, 4, 43, "Print",
 CellTags->"Info3643629148-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[687237, 13449, 103, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[687365, 13454, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[687490, 13459, 148, 3, 28, "Input"],
Cell[687641, 13464, 245, 4, 43, "Print",
 CellTags->"Info3643629152-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[687947, 13475, 103, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[688075, 13480, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[688200, 13485, 147, 3, 28, "Input"],
Cell[688350, 13490, 271, 5, 61, "Print",
 CellTags->"Info3643629156-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[688682, 13502, 97, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[688804, 13507, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[688929, 13512, 144, 3, 28, "Input"],
Cell[689076, 13517, 217, 4, 43, "Print",
 CellTags->"Info3643629160-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[689354, 13528, 97, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[689476, 13533, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[689601, 13538, 144, 3, 28, "Input"],
Cell[689748, 13543, 260, 5, 61, "Print",
 CellTags->"Info3643629165-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[690069, 13555, 98, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[690192, 13560, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[690317, 13565, 141, 3, 28, "Input"],
Cell[690461, 13570, 269, 5, 61, "Print",
 CellTags->"Info3643629168-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[690791, 13582, 99, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[690915, 13587, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[691040, 13592, 144, 3, 28, "Input"],
Cell[691187, 13597, 317, 5, 61, "Print",
 CellTags->"Info3643629172-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[691565, 13609, 106, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[691696, 13614, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[691821, 13619, 148, 3, 28, "Input"],
Cell[691972, 13624, 233, 4, 43, "Print",
 CellTags->"Info3643629176-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[692266, 13635, 106, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[692397, 13640, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[692522, 13645, 151, 3, 28, "Input"],
Cell[692676, 13650, 236, 4, 43, "Print",
 CellTags->"Info3643629181-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[692973, 13661, 110, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[693108, 13666, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[693233, 13671, 155, 3, 28, "Input"],
Cell[693391, 13676, 790, 11, 169, "Print",
 CellTags->"Info3643629185-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[694242, 13694, 111, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[694378, 13699, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[694503, 13704, 154, 3, 28, "Input"],
Cell[694660, 13709, 393, 7, 97, "Print",
 CellTags->"Info3643629190-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[695114, 13723, 111, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[695250, 13728, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[695375, 13733, 158, 3, 28, "Input"],
Cell[695536, 13738, 489, 8, 97, "Print",
 CellTags->"Info3643629195-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[696086, 13753, 103, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[696214, 13758, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[696339, 13763, 151, 3, 28, "Input"],
Cell[696493, 13768, 556, 9, 115, "Print",
 CellTags->"Info3643629201-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[697110, 13784, 106, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[697241, 13789, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[697366, 13794, 151, 3, 28, "Input"],
Cell[697520, 13799, 235, 4, 43, "Print",
 CellTags->"Info3643629205-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[697816, 13810, 108, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[697949, 13815, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[698074, 13820, 155, 3, 28, "Input"],
Cell[698232, 13825, 237, 4, 43, "Print",
 CellTags->"Info3643629210-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[698530, 13836, 110, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[698665, 13841, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[698790, 13846, 153, 3, 28, "Input"],
Cell[698946, 13851, 239, 4, 43, "Print",
 CellTags->"Info3643629215-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[699246, 13862, 105, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[699376, 13867, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[699501, 13872, 152, 3, 28, "Input"],
Cell[699656, 13877, 233, 4, 43, "Print",
 CellTags->"Info3643629220-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[699950, 13888, 105, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[700080, 13893, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[700205, 13898, 152, 3, 28, "Input"],
Cell[700360, 13903, 231, 4, 43, "Print",
 CellTags->"Info3643629224-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[700652, 13914, 107, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[700784, 13919, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[700909, 13924, 156, 3, 28, "Input"],
Cell[701068, 13929, 235, 4, 43, "Print",
 CellTags->"Info3643629229-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[701364, 13940, 98, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[701487, 13945, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[701612, 13950, 147, 3, 28, "Input"],
Cell[701762, 13955, 366, 6, 79, "Print",
 CellTags->"Info3643629233-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[702189, 13968, 100, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[702314, 13973, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[702439, 13978, 145, 3, 28, "Input"],
Cell[702587, 13983, 366, 6, 79, "Print",
 CellTags->"Info3643629237-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[703014, 13996, 104, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[703143, 14001, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[703268, 14006, 154, 3, 28, "Input"],
Cell[703425, 14011, 423, 10, 42, "Print",
 CellTags->"Info3643629261-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[703909, 14028, 104, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[704038, 14033, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[704163, 14038, 149, 3, 28, "Input"],
Cell[704315, 14043, 361, 6, 79, "Print",
 CellTags->"Info3643629266-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[704737, 14056, 108, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[704870, 14061, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[704995, 14066, 149, 3, 28, "Input"],
Cell[705147, 14071, 361, 6, 79, "Print",
 CellTags->"Info3643629270-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[705569, 14084, 103, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[705697, 14089, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[705822, 14094, 148, 3, 28, "Input"],
Cell[705973, 14099, 615, 13, 42, "Print",
 CellTags->"Info3643629273-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[706649, 14119, 103, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[706777, 14124, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[706902, 14129, 148, 3, 28, "Input"],
Cell[707053, 14134, 437, 11, 58, "Print",
 CellTags->"Info3643629277-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[707551, 14152, 105, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[707681, 14157, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[707806, 14162, 151, 3, 28, "Input"],
Cell[707960, 14167, 237, 4, 43, "Print",
 CellTags->"Info3643629281-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[708258, 14178, 108, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[708391, 14183, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[708516, 14188, 153, 3, 28, "Input"],
Cell[708672, 14193, 240, 5, 43, "Print",
 CellTags->"Info3643629304-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[708985, 14206, 101, 1, 62, "Subchapter"],
Cell[709089, 14209, 497, 9, 99, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[709635, 14224, 143, 5, 54, "Chapter"],
Cell[CellGroupData[{
Cell[709803, 14233, 100, 1, 62, "Subchapter"],
Cell[709906, 14236, 673, 10, 143, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[710616, 14251, 97, 1, 62, "Subchapter"],
Cell[CellGroupData[{
Cell[710738, 14256, 100, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[710863, 14261, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[710986, 14266, 119, 2, 28, "Input"],
Cell[711108, 14270, 927, 14, 203, "Print",
 CellTags->"Info3643632091-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[712096, 14291, 99, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[712220, 14296, 120, 2, 28, "Input"],
Cell[712343, 14300, 2260, 31, 439, "Print",
 CellTags->"Info3643632104-4641653"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[714652, 14337, 102, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[714779, 14342, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[714902, 14347, 123, 2, 28, "Input"],
Cell[715028, 14351, 229, 4, 43, "Print",
 CellTags->"Info3643632032-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[715318, 14362, 98, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[715441, 14367, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[715564, 14372, 121, 2, 28, "Input"],
Cell[715688, 14376, 328, 6, 61, "Print",
 CellTags->"Info3643631988-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[716077, 14389, 97, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[716199, 14394, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[716322, 14399, 117, 2, 28, "Input"],
Cell[716442, 14403, 433, 7, 79, "Print",
 CellTags->"Info3643632067-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[716936, 14417, 100, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[717061, 14422, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[717184, 14427, 121, 2, 28, "Input"],
Cell[717308, 14431, 254, 5, 61, "Print",
 CellTags->"Info3643632009-4641653"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[717647, 14445, 199, 6, 54, "Chapter"],
Cell[CellGroupData[{
Cell[717871, 14455, 102, 1, 62, "Subchapter"],
Cell[717976, 14458, 946, 17, 209, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[718959, 14480, 98, 1, 62, "Subchapter"],
Cell[719060, 14483, 219, 4, 33, "Text"],
Cell[CellGroupData[{
Cell[719304, 14491, 496, 12, 63, "Input"],
Cell[719803, 14505, 39508, 654, 447, "Output"]
}, Open  ]],
Cell[759326, 15162, 114, 1, 33, "Text"],
Cell[CellGroupData[{
Cell[759465, 15167, 311, 7, 28, "Input"],
Cell[759779, 15176, 18376, 308, 406, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[778194, 15489, 151, 5, 54, "Chapter"],
Cell[CellGroupData[{
Cell[778370, 15498, 159, 5, 54, "Chapter"],
Cell[CellGroupData[{
Cell[778554, 15507, 99, 1, 62, "Subchapter"],
Cell[778656, 15510, 481, 8, 99, "Text"],
Cell[CellGroupData[{
Cell[779162, 15522, 427, 8, 62, "Item"],
Cell[779592, 15532, 311, 7, 45, "Item"],
Cell[779906, 15541, 440, 9, 45, "Item"],
Cell[780349, 15552, 611, 14, 62, "Item"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[781009, 15572, 96, 1, 62, "Subchapter"],
Cell[CellGroupData[{
Cell[781130, 15577, 108, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[781263, 15582, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[781386, 15587, 155, 3, 28, "Input"],
Cell[781544, 15592, 1068, 15, 187, "Print",
 CellTags->"Info3643699069-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[782673, 15614, 113, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[782811, 15619, 102, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[782938, 15624, 136, 2, 28, "Input"],
Cell[783077, 15628, 798, 12, 133, "Print",
 CellTags->"Info3643696091-2659506"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[783924, 15646, 102, 1, 35, "Subsubsection"],
Cell[784029, 15649, 1113, 18, 253, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[785179, 15672, 98, 1, 35, "Subsubsection"],
Cell[785280, 15675, 391, 7, 77, "Text"],
Cell[CellGroupData[{
Cell[785696, 15686, 3222, 76, 233, "Input"],
Cell[788921, 15764, 137, 2, 28, "Output"]
}, Open  ]],
Cell[789073, 15769, 204, 4, 33, "Text"],
Cell[789280, 15775, 1440, 39, 148, "Input"],
Cell[CellGroupData[{
Cell[790745, 15818, 138, 2, 28, "Input"],
Cell[790886, 15822, 2633, 50, 135, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[793580, 15879, 108, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[793713, 15884, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[793838, 15889, 130, 2, 28, "Input"],
Cell[793971, 15893, 2418, 33, 475, "Print",
 CellTags->"Info3643698377-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[796450, 15933, 106, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[796581, 15938, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[796706, 15943, 125, 2, 28, "Input"],
Cell[796834, 15947, 264, 5, 43, "Print",
 CellTags->"Info3643698317-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[797159, 15959, 110, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[797294, 15964, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[797419, 15969, 132, 2, 28, "Input"],
Cell[797554, 15973, 831, 12, 133, "Print",
 CellTags->"Info3643698317-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[798446, 15992, 109, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[798580, 15997, 97, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[798702, 16002, 178, 3, 28, "Input"],
Cell[798883, 16007, 881, 13, 151, "Print",
 CellTags->"Info3643698395-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[799825, 16027, 99, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[799949, 16032, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[800072, 16037, 120, 2, 28, "Input"],
Cell[800195, 16041, 387, 6, 79, "Print",
 CellTags->"Info3643698875-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[800643, 16054, 103, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[800771, 16059, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[800894, 16064, 119, 2, 28, "Input"],
Cell[801016, 16068, 532, 8, 97, "Print",
 CellTags->"Info3643698875-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[801609, 16083, 105, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[801739, 16088, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[801862, 16093, 126, 2, 28, "Input"],
Cell[801991, 16097, 248, 5, 43, "Print",
 CellTags->"Info3643698317-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[802300, 16109, 113, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[802438, 16114, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[802563, 16119, 132, 2, 28, "Input"],
Cell[802698, 16123, 1272, 18, 221, "Print",
 CellTags->"Info3643698874-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[804031, 16148, 118, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[804174, 16153, 97, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[804296, 16158, 138, 2, 28, "Input"],
Cell[804437, 16162, 413, 7, 79, "Print",
 CellTags->"Info3643698874-2659506"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Closed]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
